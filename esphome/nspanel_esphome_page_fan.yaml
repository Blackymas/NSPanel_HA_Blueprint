#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME Page fan                                                                          #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_FAN: 16
  PAGE_FAN_ID: 22
  TAG_PAGE_FAN: nspanel.page.fan

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (
                  page_id == ${PAGE_FAN_ID} and  // Page fan
                  !touch_event                   // Only act with release
                ) {
              switch (component_id) {
                case 13:  // bt_oscillate
                  esphome::api::CustomAPIDevice ha_event_fan_oscillate;
                  ha_event_fan_oscillate.fire_homeassistant_event("${EVENT_NAME}", {
                    {"device_name", device_name->state.c_str()},
                    {"esphome_version", "${version}"},
                    {"type", "action_call"},
                    {"action", "fan.oscillate"},
                    {"key", "oscillating"},
                    {"value", "toggle"},
                    {"entity", detailed_entity->state.c_str()}
                  });
                  break;
                case 14:  // power_button
                  esphome::api::CustomAPIDevice ha_event_fan_toggle;
                  ha_event_fan_toggle.fire_homeassistant_event("${EVENT_NAME}", {
                    {"device_name", device_name->state.c_str()},
                    {"esphome_version", "${version}"},
                    {"type", "action_call"},
                    {"action", "fan.toggle"},
                    {"entity", detailed_entity->state.c_str()}
                  });
                  break;
              }
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_FAN

script:
  - id: !extend event_from_display_legacy
    then:
      - lambda: |-
          if (page == "fan") {
            if (json["key"].isNull() || json["value"].isNull()) {
              ESP_LOGV("${TAG_PAGE_FAN}", "Missing fan `key` or `value` fields");
              return;
            } // endif missing fields

            const std::string key = json["key"].as<std::string>();
            const std::string value = json["value"].as<std::string>();

            ESP_LOGV("${TAG_PAGE_FAN}", "Fan control: key=%s, value=%s", key.c_str(), value.c_str());

            if (key == "stop" || value == "0") {
              ESP_LOGV("${TAG_PAGE_FAN}", "Turning fan off");
              esphome::api::CustomAPIDevice ha_event;
              ha_event.fire_homeassistant_event("${EVENT_NAME}", {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "action_call"},
                {"action", "fan.turn_off"},
                {"entity", detailed_entity->state.c_str()}
              });
            } else {
              ESP_LOGV("${TAG_PAGE_FAN}", "Turning fan on with settings");
              esphome::api::CustomAPIDevice ha_event;
              ha_event.fire_homeassistant_event("${EVENT_NAME}", {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "action_call"},
                {"action", "fan.turn_on"},
                {"key", key.c_str()},
                {"value", value.c_str()},
                {"entity", detailed_entity->state.c_str()}
              });
            } // endif key == "stop" || value == "0"
          } // endif page == "fan"

  - id: !extend page_change
    then:
      - lambda: if (new_page_id == ${PAGE_FAN_ID}) page_fan->execute();

  - id: page_fan
    mode: single
    then:  # There's nothing here so far

  - id: !extend stop_page_constructors
    then:
      - lambda: page_fan->stop();
...
