#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME VERSION                                                                           #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  ##### DON'T CHANGE THIS ######
  version: 202510.0
  min_blueprint_version: 202510.0
  min_tft_version: 202510.0
  min_esphome_compiler_version: 2025.8.0
  ##############################
  TAG_VERSIONING: nspanel.versioning

esphome:
  project:
    version: '"${ version | string }"'
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_VERSIONING
  min_version: ${min_esphome_compiler_version}

script:
  - id: !extend action_component_val
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "ver_blueprint") {
              version_blueprint->publish_state(val);
            }
          }

  - id: !extend boot
    then:
      - delay: ${DELAY_DEFAULT}ms
      - lambda: |-
          version_esphome->publish_state(${version});

  - id: check_versions
    mode: restart
    parameters:
      reset_flag: bool
    then:
      - lambda: |-
          ESP_LOGV("${TAG_VERSIONING}", "Script: Check version");
          ESP_LOGV("${TAG_VERSIONING}", "  reset_flag: %s", TRUEFALSE(reset_flag));
          ESP_LOGV("${TAG_VERSIONING}", "  VERSION_CHECK_OK: %s", (system_flags.version_check_ok) ? "Set" : "NOT set");
          ESP_LOGV("${TAG_VERSIONING}", "  is_device_ready_for_tasks: %s", YESNO(is_device_ready_for_tasks()));
          ESP_LOGV("${TAG_VERSIONING}", "  Versions:");
          ESP_LOGV("${TAG_VERSIONING}", "    Blueprint: %s", version_blueprint->state.c_str());
          ESP_LOGV("${TAG_VERSIONING}", "    ESPHome: ${version}");
          ESP_LOGV("${TAG_VERSIONING}", "    TFT: %s", version_tft->state.c_str());
          if (reset_flag) system_flags.version_check_ok = false;
          if (system_flags.version_check_ok) {
            ESP_LOGD("${TAG_VERSIONING}", "VERSION_CHECK_OK is already set");
            return;
          }
          if (!is_device_ready_for_tasks()) {
            ESP_LOGD("${TAG_VERSIONING}", "Device not ready for tasks - Skip version check");
            return;
          }
      - delay: 5s
      - script.execute: wait_for_versions
      - script.wait: wait_for_versions
      - lambda: |-
          ESP_LOGD("${TAG_VERSIONING}", "Versions:");
          ESP_LOGD("${TAG_VERSIONING}", "  Blueprint: %0.1f", version_blueprint->state);
          ESP_LOGD("${TAG_VERSIONING}", "  ESPHome:   ${version}");
          ESP_LOGD("${TAG_VERSIONING}", "  TFT:       %0.1f", version_tft->state);
          system_flags.version_check_ok = true;
          if (version_blueprint->state != ${version}) {
            ESP_LOGE("${TAG_VERSIONING}", "Blueprint version mismatch!");
            system_flags.version_check_ok = false;
          }
          if (version_tft->state != ${version}) {
            ESP_LOGE("${TAG_VERSIONING}", "TFT version mismatch!");
            system_flags.version_check_ok = false;
          }
          char tft_str[16];
          char blueprint_str[16];
          snprintf(tft_str, sizeof(tft_str), "%.1f", version_tft->state);
          snprintf(blueprint_str, sizeof(blueprint_str), "%.1f", version_blueprint->state);

          fire_ha_event("version", {
            {"tft", tft_str},
            {"esphome", "${version | string}"},
            {"blueprint", blueprint_str}
          });
          ESP_LOGD("${TAG_VERSIONING}", "Check version completed");

  - id: !extend dump_config
    then:
      - lambda: |-
          // Report blueprint version
          ESP_LOGCONFIG("${TAG_VERSIONING}", "Blueprint:");
          if (system_flags.blueprint_ready) {
            ESP_LOGCONFIG("${TAG_VERSIONING}", "  Version: %0.1f", version_blueprint->state);
            ESP_LOGCONFIG("${TAG_VERSIONING}", "  Progress: %0.1f%%", blueprint_status_flags.get_completion_percentage());
          } else {
            ESP_LOGW("${TAG_VERSIONING}", "  Progress: %0.1f%%", blueprint_status_flags.get_completion_percentage());
            ESP_LOGW("${TAG_VERSIONING}", "  State: %s", (system_flags.wifi_ready and system_flags.api_ready)
                                                    ? "Pending" : "DISCONNECTED");
          }

          // Report ESPHome
          ESP_LOGCONFIG("${TAG_VERSIONING}", "ESPHome:");
          ESP_LOGCONFIG("${TAG_VERSIONING}", "  Version: ${version}");
          ESP_LOGCONFIG("${TAG_VERSIONING}", "  Compiler: %s", ESPHOME_VERSION);

          // Report framework
          #ifdef USE_ESP_IDF
          ESP_LOGCONFIG("${TAG_VERSIONING}", "  Framework: ESP-IDF");
          #elif defined(USE_ARDUINO)
          ESP_LOGW("${TAG_VERSIONING}", "  Framework: Arduino");
          #else
          ESP_LOGE("${TAG_VERSIONING}", "  Framework: Unknown");
          #endif

  - id: !extend page_blank
    then:
      - lambda: |-
          ESP_LOGW("${TAG_VERSIONING}", "Construct blank page");
          disp1->set_component_text("esp_version", "FW: ${version}");  // ESPHome version
          #ifdef ARDUINO
          disp1->set_component_text("framework", "Arduino");
          #elif defined(USE_ESP_IDF)
          disp1->set_component_text("framework", "ESP-IDF");
          #endif

  - id: !extend stop_all
    then:
      - lambda: |-
          check_versions->stop();
          wait_for_version_blueprint->stop();
          wait_for_versions->stop();

  - id: wait_for_version_blueprint
    mode: single
    then:
      - repeat:
          count: 60  # seconds
          then:
            - lambda: |-
                if (version_blueprint->state > 0) wait_for_version_blueprint->stop();
                if (iteration % 5 == 1) boot_log->execute("Boot", "Waiting for Blueprint version");
                if (iteration % 9) boot_request_blueprint_settings->execute("timeout");
            - delay: 1s

  - id: wait_for_versions
    mode: single
    then:
      - script.execute: wait_for_version_blueprint
      - script.wait: wait_for_version_blueprint

sensor:
  - id: version_blueprint
    name: Version Blueprint
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    accuracy_decimals: 1
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("${TAG_VERSIONING}", "Blueprint version: %0.1f", x);
            if (x > 0) blueprint_status_flags.version = true;
            check_versions->execute(x != ${version});

  - id: version_esphome
    name: Version ESPHome
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    accuracy_decimals: 1
...
