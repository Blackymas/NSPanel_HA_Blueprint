#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### TFT Upload engine                                                                         #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
##### ATTENTION: This will add advanced elements to the core system and requires the core part. #####
#####################################################################################################
---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ##############################

  ################## Defaults ##################
  # Just in case user forgets to set something #
  nextion_update_base_url: "https://raw.githubusercontent.com/Blackymas/NSPanel_HA_Blueprint/"
  nextion_update_url: "${nextion_update_base_url}/main/hmi/nspanel_blank.tft"
  ##############################################
  TAG_UPLOAD_TFT: "nspanel.addon.upload_tft"
  upload_tft_automatically: true
  upload_tft_baud_rate: 115200

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_ADDON_UPLOAD_TFT

# yamllint disable rule:comments-indentation
api:
  actions:
    ##### TFT File Update Service: `upload_tft`
    # Updates the panel's TFT file remotely from a specified URL or the default location, requiring the "Upload TFT" add-on.
    # Usage: Essential for applying custom TFT designs or updates, especially when direct repository access is unavailable.
    #
    # Parameters:
    # - `url` (string): URL for the TFT file. If "default" or empty, uses the URL from "Update TFT - Display Model" in Home Assistant settings.
    #
    # Example:
    # service: esphome.<your_panel_name>_upload_tft
    # data:
    #   url: "http://homeassistant.local:8123/local/custom_tft_file.tft"  # Custom or default URL to the TFT file
    #
    # [!NOTE]
    # Utilize "default" to automatically use the URL associated with the display model set in Home Assistant.
    #
    # [!ATTENTION]
    # Requires the "Upload TFT" add-on for functionality.
    - action: upload_tft
      variables:
        url: string
      then:
        - lambda: |-
            if (!system_flags.tft_upload_active)
              upload_tft->execute(url.c_str());

button:
  ##### UPDATE TFT DISPLAY #####
  - id: tft_update
    name: Update TFT display
    platform: template
    icon: mdi:file-sync
    entity_category: config
    on_press:
      then:
        - lambda: |-
            upload_tft->execute("");

display:
  - id: !extend disp1
    tft_url: ${nextion_update_url}
    exit_reparse_on_start: true

nspanel_ha_blueprint:
  lwip_tcp_mss: 1400
  task_wdt_timeout_s: 30

script:
  - id: !extend check_versions
    then:
      - lambda: |-
          if (${'true' if upload_tft_automatically else 'false'} and
              version_tft->state != "${version}" and
              tft_file_model->active_index().value_or(0) > 1) {  // Only when std TFT is selected
            ESP_LOGI("${TAG_UPLOAD_TFT}", "Auto updating TFT");
            upload_tft->execute("");
          }

  - id: !extend dump_config
    then:
      - lambda: |-
          if (system_flags.tft_upload_active)
            ESP_LOGW("${TAG_UPLOAD_TFT}", "TFT upload in progress");
          ESP_LOGCONFIG("${TAG_UPLOAD_TFT}", "Add-on Upload TFT:");
          ESP_LOGCONFIG("${TAG_UPLOAD_TFT}", "  File model: %s", tft_file_model->state.c_str());
          ESP_LOGCONFIG("${TAG_UPLOAD_TFT}", "  Valid TFT:  %s", YESNO((display_mode > 0 and display_mode < 4)));

  - id: nextion_status
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Nextion status:");
          ESP_LOGD("${TAG_UPLOAD_TFT}", "  Is detected: %s", YESNO(disp1->is_detected()));
          ESP_LOGD("${TAG_UPLOAD_TFT}", "  Is setup:    %s", YESNO(disp1->is_setup()));
          ESP_LOGD("${TAG_UPLOAD_TFT}", "  Queue size:  %d", disp1->queue_size());

  - id: nextion_upload
    mode: single
    parameters:
      baud_rate: uint32_t
    then:
      - lambda: |-
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Waiting for empty UART and Nextion queues");
      - wait_until:
          condition:
            - lambda: return (disp1->queue_size() < 1) and (tf_uart->available() < 1);
          timeout: 10s
      - delay: 2s
      - lambda: |-
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Starting TFT upload...");
          tft_upload_result = disp1->upload_tft(baud_rate, !disp1->is_setup());
          ESP_LOGV("${TAG_UPLOAD_TFT}", "TFT upload: %s", YESNO(tft_upload_result));

  - id: !extend stop_all
    then:
      - lambda: |-
          nextion_status->stop();

  - id: upload_tft
    mode: single
    parameters:
      url: string
    then:
      # Make sure the screen is ON
      - if:
          condition:
            - switch.is_off: screen_power
          then:
            - switch.turn_on: screen_power
            - delay: 5s
      - lambda: |-
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Set Nextion unavailable for blueprint calls");
          nextion_init->publish_state(false);

          ESP_LOGD("${TAG_UPLOAD_TFT}", "Preparing for upload...");

          // Then start the upload
          nextion_status->execute();
          system_flags.tft_upload_active = true;
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Starting the upload script");
          ESP_LOGV("${TAG_UPLOAD_TFT}", "  Valid TFT: %s", YESNO((display_mode > 0 and display_mode < 4)));
          ESP_LOGV("${TAG_UPLOAD_TFT}", "  Current baud rate: %" PRIu32, tf_uart->get_baud_rate());
          ESP_LOGV("${TAG_UPLOAD_TFT}", "  Target upload baud rate: %" PRIu32, ${upload_tft_baud_rate} == 0
                                                                                ? tf_uart->get_baud_rate()
                                                                                : ${upload_tft_baud_rate});

          // Calculate URL if needed
          std::string resolved_url = url;

          // Convert to lowercase and trim
          std::transform(resolved_url.begin(), resolved_url.end(), resolved_url.begin(),
                        [](unsigned char c){ return std::tolower(c); });
          auto endPos = resolved_url.find_last_not_of(" \t");
          if (std::string::npos != endPos) {
            resolved_url = resolved_url.substr(0, endPos + 1);
          }

          // Calculate URL if empty
          if (resolved_url.empty()) {
            auto idx_opt = tft_file_model->active_index();
            if (!idx_opt.has_value()) {
              resolved_url = "${nextion_update_url}";  // Fallback if no valid index
            } else {
              const int idx = idx_opt.value();

              if (idx == 0) {
                resolved_url = "${nextion_update_url}";
              } else if (idx >= 1 && idx <= 7) {
                static const char* const FILENAME_PARTS[] = {
                  nullptr, "blank", "eu", "us", "us_land", "CJK_eu", "CJK_us", "CJK_us_land"
                };

                const char* version = "v${version}";
                const char* branch = "main";

                for (const char* p = version; *p != '\0'; ++p) {
                  if (*p == 'b') { branch = "beta"; break; }
                  if (*p == 'd') { branch = "dev"; break; }
                }

                if (branch[0] == 'm' && version[0] != 'm') {
                  branch = version;
                }

                resolved_url = std::string("${nextion_update_base_url}") + branch +
                              "/hmi/nspanel_" + FILENAME_PARTS[idx] + ".tft";
              } else {
                resolved_url = "${nextion_update_url}";
              }
            }
          }

          ESP_LOGV("${TAG_UPLOAD_TFT}", "  Upload URL: %s", resolved_url.c_str());
          disp1->set_tft_url(resolved_url.c_str());

          // Stop Bluetooth
          #ifdef USE_BLUETOOTH
          ESP_LOGI("${TAG_UPLOAD_TFT}", "Disabling Bluetooth and releasing memory...");

          // Stop BLE operations
          esp_ble_gap_stop_advertising();
          esp_ble_gap_stop_scanning();

          // Stop Classic Bluetooth operations
          esp_bt_gap_set_scan_mode(ESP_BT_NON_CONNECTABLE, ESP_BT_NON_DISCOVERABLE);
          esp_bt_gap_cancel_discovery();

          // Disable and deinitialize Bluedroid stack
          if (esp_bluedroid_get_status() == ESP_BLUEDROID_STATUS_ENABLED) {
            esp_bluedroid_disable();
          }  // if esp_bluedroid_get_status()

          if (esp_bluedroid_get_status() != ESP_BLUEDROID_STATUS_UNINITIALIZED) {
            esp_bluedroid_deinit();
          }  // if esp_bluedroid_get_status()

          // Disable and deinitialize Bluetooth controller
          if (esp_bt_controller_get_status() == ESP_BT_CONTROLLER_STATUS_ENABLED) {
            esp_bt_controller_disable();
          }  // if esp_bt_controller_get_status()

          if (esp_bt_controller_get_status() != ESP_BT_CONTROLLER_STATUS_IDLE) {
            esp_bt_controller_deinit();
          }  // if esp_bt_controller_get_status()

          // Release Bluetooth memory - this is the key step!
          esp_err_t err = esp_bt_mem_release(ESP_BT_MODE_BTDM);
          if (err == ESP_OK) {
            ESP_LOGI("${TAG_UPLOAD_TFT}", "Bluetooth memory released successfully");
          } else {
            ESP_LOGE("${TAG_UPLOAD_TFT}", "Failed to release BT memory: %s", esp_err_to_name(err));
          }  // if err == ESP_OK

          #else
          ESP_LOGV("${TAG_UPLOAD_TFT}", "Bluetooth not compiled in");
          #endif  // USE_BLUETOOTH

      - delay: 2s
      - lambda: |-
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Stopping other scripts");
          stop_all->execute();
      - script.wait: stop_all
      - wait_until:
          condition:
            - lambda: return (!(display_mode > 0 and display_mode < 4));
          timeout: 1s

      ### Attempt twice at the target baud rate
      - script.execute:
          id: upload_tft_sequence_attempt
          baud_rate: ${upload_tft_baud_rate}
      - script.wait: upload_tft_sequence_attempt

      ### Attempt twice at the original baud rate
      - if:
          condition:
            - lambda: return (tf_uart->get_baud_rate() != ${upload_tft_baud_rate});
          then:
            - script.execute:
                id: upload_tft_sequence_attempt
                baud_rate: 0
            - script.wait: upload_tft_sequence_attempt

      ### Attempt twice at the Nextion's default baud rate (115200bps)
      - if:
          condition:
            - lambda: return (${upload_tft_baud_rate} != 115200) and (tf_uart->get_baud_rate() != 115200);
          then:
            - script.execute:
                id: upload_tft_sequence_attempt
                baud_rate: 115200
            - script.wait: upload_tft_sequence_attempt

      ### Restart Nextion and attempt twice again at default baud rate (115200bps)
      - lambda: |-
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Restarting Nextion display");
          screen_power->turn_off();
      - delay: 2s
      - switch.turn_on: screen_power
      - delay: 5s
      - script.execute:
          id: upload_tft_sequence_attempt
          baud_rate: 115200
      - script.wait: upload_tft_sequence_attempt

      ### All tries failed ###
      - lambda: |-
          ESP_LOGE("${TAG_UPLOAD_TFT}", "TFT upload failed");
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Turn off Nextion and restart ESPHome");
          screen_power->turn_off();

          // Restart ESPHome
          App.safe_reboot();

  - id: upload_tft_sequence_attempt
    mode: single
    parameters:
      baud_rate: uint32_t
    then:
      - lambda: |-
          nextion_status->execute();
          ESP_LOGD("${TAG_UPLOAD_TFT}", "Setting baud rate");
          set_baud_rate->execute(baud_rate, false);
      - script.wait: set_baud_rate
      - delay: 2s
      - repeat:
          count: 2
          then:
            # First attempt
            - script.execute:
                id: upload_tft_attempt
                baud_rate: !lambda return baud_rate;
            - script.wait: upload_tft_attempt
            - delay: 5s

  - id: upload_tft_attempt
    mode: single
    parameters:
      baud_rate: uint32_t
    then:
      - logger.log: "Attempting to upload TFT"
      - lambda: tft_upload_attempt++;
      - lambda: |-
          char update_msg[128];
          sprintf(update_msg, "Attempt #%d at %" PRIu32 " bps", tft_upload_attempt, tf_uart->get_baud_rate());
          tft_upload_result = false;
          ESP_LOGD("${TAG_UPLOAD_TFT}", update_msg);
      - delay: 1s
      - lambda: |-
          nextion_upload->execute(baud_rate);
      - script.wait: nextion_upload
      - lambda: |-
          char update_msg[128];
          sprintf(update_msg, "Attempt #%d at %" PRIu32 " bps returned: %s", tft_upload_attempt,
                  tf_uart->get_baud_rate(), tft_upload_result ? "Success!" : "FAILED");
          ESP_LOGD("${TAG_UPLOAD_TFT}", update_msg);
          ESP_LOGI("addon_upload_tft.script.upload_tft_attempt", "Restarting ESPHome");
          App.safe_reboot();

select:
  - id: tft_file_model
    name: Update TFT display - Model
    platform: template
    options:
      - "Use nextion_update_url"
      - "NSPanel Blank"
      - "NSPanel EU"
      - "NSPanel US"
      - "NSPanel US Landscape"
      - "NSPanel EU (CJK languages)"
      - "NSPanel US (CJK languages)"
      - "NSPanel US Landscape (CJK languages)"
    initial_option: "NSPanel EU"
    optimistic: true
    restore_value: true
    internal: false
    entity_category: config
    disabled_by_default: false
    icon: mdi:file-sync
    update_interval: never
...
