#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME BARE - The bare minimal to allow OTA and communication to Home Assistant          #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ##############################
  device_name: nspanel
  name: ${device_name}
  friendly_name: ${device_name}
  ota_password: ${wifi_password}
  wifi_enable_priority_on_boot: 200
  screen_power_on_priority_on_boot: 600
  screen_power_on_delay_on_boot: 0s
  GPIO_DISPLAY_POWER_PIN:
    number: 4
    inverted: true

api:
  reboot_timeout: 60min

button:
  - id: nspanel_factory_reset  # Factory Reset button - Used to clean values from flash
    name: Factory reset
    platform: factory_reset
    internal: false
    disabled_by_default: true
    icon: mdi:restart-alert

  - id: restart_nspanel  # Reboot ESP32
    name: Restart
    platform: restart

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: NSPanel HA Blueprint
  project:
    name: Blackymas.NSPanel_HA_Blueprint
    version: bare
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_BARE
  on_boot:
    - priority: ${screen_power_on_priority_on_boot}
      then:
        - if:
            condition:
              - switch.is_off: screen_power
            then:
              - delay: ${screen_power_on_delay_on_boot}
              - switch.turn_on: screen_power
    - priority: ${wifi_enable_priority_on_boot}
      then:
        - if:
            condition:
              - not:
                  wifi.enabled:
            then:
              - wifi.enable:

esp32:
  board: esp32dev
  framework:
    type: esp-idf

logger:

ota:
  - id: ota_std
    platform: esphome
    password: ${ota_password}

switch:
  - id: screen_power  # Controls the display's power source
    name: Nextion display - Power
    platform: gpio
    entity_category: diagnostic
    pin: ${GPIO_DISPLAY_POWER_PIN}
    restore_mode: ALWAYS_OFF
    internal: false
    disabled_by_default: true

wifi:
  networks:
    - id: wifi_default
      ssid: ${wifi_ssid}
      password: ${wifi_password}
...
