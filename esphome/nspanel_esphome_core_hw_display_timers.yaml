#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - HARDWARE - Display - Timers                                                #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  TAG_HW_DISPLAY_TIMERS: nspanel_ha_blueprint.hw.display.timers

api:
  actions:
    # Wake Up action
    - action: wake_up
      variables:
        reset_timer: bool  # Determines whether to reset the sleep and dimming timers upon waking the display.
      then:
        - lambda: |-
            if (current_page_id == ${PAGE_ID_SCREENSAVER})
              goto_page_id->execute(get_page_id(wakeup_page_name->state.c_str()), true);
            if (reset_timer)
              timer_page->execute();

binary_sensor:
  - id: !extend left_button
    on_press:
      then:
        - &hardware_button_on_press
          lambda: |-
            if (hw_button_wakeup->state) {
              if (current_page_id == ${PAGE_ID_SCREENSAVER})
                goto_page_id->execute(get_page_id(wakeup_page_name->state.c_str()), false);
              timer_wakeup->execute();
              timer_sleep->execute();
            }

  - id: !extend right_button
    on_press:
      then:
        - *hardware_button_on_press

display:
  - id: !extend disp1
    on_touch:
      then:
        - script.execute: timer_reset_all

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_HW_DISPLAY_TIMERS

number:
  - id: !extend display_brightness  # Defined by nspanel_esphome_core_display.yaml
    on_value:
      then:
        - lambda: |-
            if (current_page_id != ${PAGE_ID_SCREENSAVER}) {
              disp1->set_backlight_brightness(x / 100.0f);
              timer_wakeup->execute();
              timer_sleep->execute();
            }

  - id: timeout_page
    name: Timeout - Page
    platform: template
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 15
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    on_value:
      then:
        - script.execute: timer_page

  - id: timeout_dim
    name: Timeout - Dimming
    platform: template
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 30
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    on_value:
      then:
        - script.execute: timer_wakeup

  - id: timeout_sleep
    name: Timeout - Sleep
    platform: template
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 60
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    on_value:
      then:
        - lambda: |-
            if (x == 0 and current_page_id == ${PAGE_ID_SCREENSAVER})
              goto_page_id->execute(get_page_id(wakeup_page_name->state.c_str()), true);

script:
  - id: !extend ha_button
    then:
      - lambda: |-
          if (current_page_id != ${PAGE_ID_SCREENSAVER})
            timer_reset_all->execute();

  - id: !extend goto_page_id
    then:
      - lambda: |-
          if (reset_timers and page_id != ${PAGE_ID_SCREENSAVER}) {
            if (page_id != ${PAGE_ID_HOME})
              timer_page->execute();
            timer_wakeup->execute();
            timer_sleep->execute();
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          timer_dim->stop();
          timer_wakeup->stop();
          timer_page->stop();
          timer_reset_all->stop();
          timer_sleep->stop();

  - id: !extend time_watchdog  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          if (current_page_id != ${PAGE_ID_SCREENSAVER} and current_page_id != ${PAGE_ID_BOOT}) {
            if (!timer_dim->is_running())
              timer_dim->execute();
            if (!timer_page->is_running() and current_page_id != ${PAGE_ID_HOME})
              timer_page->execute();
            if (!timer_sleep->is_running())
              timer_sleep->execute();
          }

  - id: timer_reset_all  # Global timer reset - Triggered with a touch on the screen
    mode: restart
    then:
      - lambda: |-
          timer_wakeup->execute();
          timer_page->execute();
          timer_sleep->execute();

  - id: timer_page       # Handles the fallback to home page after a timeout
    mode: restart
    then:
      - if:
          condition:
            - lambda: |-
                return (timeout_page->state >= 1 and not is_page_in_group(NON_API_ID_PAGE_MASK));
          then:
            - delay: !lambda return (timeout_page->state *1000);
            - lambda: |-
                if (timeout_page->state >= 1 and not is_page_in_group(NON_API_ID_PAGE_MASK)) {
                  ESP_LOGD("${TAG_HW_DISPLAY_TIMERS}", "Fallback to Home");
                  goto_page_id->execute(${PAGE_ID_HOME}, false);
                }

  - id: timer_wakeup
    mode: restart
    then:
      - lambda: |-
          if (current_page_id != ${PAGE_ID_SCREENSAVER} and
              current_page_id != ${PAGE_ID_BOOT}) {
            ESP_LOGD("${TAG_HW_DISPLAY_TIMERS}", "Wake on page: %s", page_names[current_page_id]);
            disp1->set_backlight_brightness(display_brightness->state / 100.0f);
            timer_dim->execute();
          }

  - id: timer_dim        # Handles the brightness dimming after a timeout
    mode: restart
    then:
      - if:
          condition:
            - number.in_range:
                id: timeout_dim
                above: 1
          then:
            - delay: !lambda return (timeout_dim->state *1000);
            - lambda: |-
                if (timeout_dim->state > 0 and
                    current_page_id != ${PAGE_ID_SCREENSAVER} and
                    current_page_id != ${PAGE_ID_BOOT})
                  disp1->set_backlight_brightness(display_dim_brightness->state / 100.0f);

  - id: timer_sleep  # Handles the sleep (go to screensaver page) after a timeout
    mode: restart
    then:
      - if:
          condition:
            - lambda: |-
                return (timeout_sleep->state >= 1 and current_page_id != ${PAGE_ID_BOOT});
          then:
            - delay: !lambda return (timeout_sleep->state *1000);
            - lambda: |-
                if (timeout_sleep->state >= 1 and
                    current_page_id != ${PAGE_ID_SCREENSAVER} and
                    current_page_id != ${PAGE_ID_BOOT}) {
                  ESP_LOGD("${TAG_HW_DISPLAY_TIMERS}", "Sleep from page %s", page_names[current_page_id]);
                  goto_page_id->execute(${PAGE_ID_SCREENSAVER}, false);
                  disp1->set_backlight_brightness(display_sleep_brightness->state / 100.0f);
                }

select:
  - id: wakeup_page_name
    name: Wake-up page
    platform: template
    options:
      - buttonpage01
      - buttonpage02
      - buttonpage03
      - buttonpage04
      - climate
      - entitypage01
      - entitypage02
      - entitypage03
      - entitypage04
      - home
      - qrcode
      - utilities
    initial_option: home
    optimistic: true
    restore_value: true
    internal: false
    entity_category: config
    icon: mdi:page-next-outline
    disabled_by_default: true
    on_value:
      then:
        - lambda: |-
            set_variable_value->execute("wakeup_page_id",
                                        get_page_id(wakeup_page_name->state.c_str()));

sensor:
  - id: !extend brightslider
    on_value:
      then:
        - script.execute: timer_reset_all
        - number.set:
            id: display_brightness
            value: !lambda return int(x);

  - id: !extend dimslider
    on_value:
      then:
        - script.execute: timer_reset_all
        - number.set:
            id: display_dim_brightness
            value: !lambda return int(x);
...
