#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE                                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ##############################
  invalid_cooldown: "100ms"
  GPIO_RELAY_1_PIN: 22
  GPIO_RELAY_2_PIN: 19

  DELAY_DEFAULT: 25  # delay in msec
  DELAY_LONG: 125    # delay in msec
  DELAY_SHORT: 5     # delay in msec

  PAGE_QRCODE_ID: 17
  PAGE_UTILITIES_ID: 27
  PAGE_WEATHER01_ID: 2
  PAGE_WEATHER02_ID: 3
  PAGE_WEATHER03_ID: 4
  PAGE_WEATHER04_ID: 5
  PAGE_WEATHER05_ID: 6

  TAG_CORE: "nspanel.core"

packages:
  # yamllint disable rule:colons
  version:           !include nspanel_esphome_version.yaml
  api:               !include nspanel_esphome_api.yaml
  base:              !include nspanel_esphome_base.yaml
  boot:              !include nspanel_esphome_boot.yaml
  datetime:          !include nspanel_esphome_datetime.yaml
  hw_buttons:        !include nspanel_esphome_hw_buttons.yaml
  hw_display:        !include nspanel_esphome_hw_display.yaml
  hw_memory:         !include nspanel_esphome_hw_memory.yaml
  hw_wifi:           !include nspanel_esphome_hw_wifi.yaml
  page_boot:         !include nspanel_esphome_page_boot.yaml
  page_home:         !include nspanel_esphome_page_home.yaml
  page_screensaver:  !include nspanel_esphome_page_screensaver.yaml
  # yamllint enable rule:colons

##### ESPHOME CONFIGURATION #####
esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE

##### START - GLOBALS CONFIGURATION #####
globals:
  ####### Relay settings #######
  # Bit # Settings             #
  #  0  # Relay 1 - Local      #
  #  1  # Relay 1 - Fallback   #
  #  2  # reserved             #
  #  3  # reserved             #
  #  4  # Relay 2 - Local      #
  #  5  # Relay 2 - Fallback   #
  #  6  # reserved             #
  #  7  # reserved             #
  ##############################
  - id: relay_settings
    type: uint8_t
    restore_value: true
    initial_value: '0'
  ##### Relay icons #####
  - id: home_relay1_icon
    type: std::string
    restore_value: true
    initial_value: ''
  - id: home_relay1_icon_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'
  - id: home_relay2_icon
    type: std::string
    restore_value: true
    initial_value: ''
  - id: home_relay2_icon_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'

  ##### Add-on Climate #####
  ##### Is embedded thermostat set as main climate entity? #####
  - id: is_embedded_thermostat
    type: bool
    restore_value: true
    initial_value: 'false'

  #### Localization (MUI) ####
  - id: mui_decimal_separator
    type: std::string
    restore_value: true
    initial_value: '"."'

##### START - NUMBER CONFIGURATION #####
number:
  ##### Timers settings #####
  - name: Timeout Page
    platform: template
    id: timeout_page
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 15
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    update_interval: never
    on_value:
      then:
        - script.execute: timer_page
  - name: Timeout Dimming
    platform: template
    id: timeout_dim
    entity_category: config
    min_value: 0
    max_value: 86400
    initial_value: 30
    step: 1
    restore_value: true
    optimistic: true
    icon: mdi:timer
    unit_of_measurement: "s"
    update_interval: never
    on_value:
      then:
        - script.execute: timer_dim

##### START - SWITCH CONFIGURATION #####
switch:
  ##### PHYSICAL SWITCH 1 #####
  - name: Relay 1
    platform: gpio
    id: relay_1
    pin: ${GPIO_RELAY_1_PIN}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - lambda: |-
            if (id(relay_settings) & RelaySettings::Relay1_Local)
              update_bitwise_setting(buttons_settings, true, ButtonSettings::ButtonLeft_State);
        - script.execute:
            id: refresh_relays
            relay_mask: 1
        - script.execute:
            id: refresh_hardware_buttons_bars
            button_mask: 1
    on_turn_off:
      then:
        - lambda: |-
            if (id(relay_settings) & RelaySettings::Relay1_Local)
              update_bitwise_setting(buttons_settings, false, ButtonSettings::ButtonLeft_State);
        - script.execute:
            id: refresh_relays
            relay_mask: 1
        - script.execute:
            id: refresh_hardware_buttons_bars
            button_mask: 1
  ##### PHYSICAL SWITCH 2 ######
  - name: Relay 2
    platform: gpio
    id: relay_2
    pin: ${GPIO_RELAY_2_PIN}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - lambda: |-
            if (id(relay_settings) & RelaySettings::Relay2_Local)
              update_bitwise_setting(buttons_settings, true, ButtonSettings::ButtonRight_State);
        - script.execute:
            id: refresh_relays
            relay_mask: 2
        - script.execute:
            id: refresh_hardware_buttons_bars
            button_mask: 2
    on_turn_off:
      then:
        - lambda: |-
            if (id(relay_settings) & RelaySettings::Relay2_Local)
              update_bitwise_setting(buttons_settings, false, ButtonSettings::ButtonRight_State);
        - script.execute:
            id: refresh_relays
            relay_mask: 2
        - script.execute:
            id: refresh_hardware_buttons_bars
            button_mask: 2

##### START - TEXT SENSOR CONFIGURATION #####
text_sensor:
  ##### Versioning #####
  - id: version_blueprint
    name: Version Blueprint
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("${TAG_CORE}", "Blueprint version: %s", x.c_str());
            if (!x.empty())
              set_blueprint_status_flag(BlueprintStatusFlag::VERSION);
            check_versions->execute(x != "${version}");

  - id: version_esphome
    name: Version ESPHome
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    lambda: |-
      return {"${version}"};

script:  # Scripts
  - id: !extend action_component_color
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "relay1_icon_color") {
              id(home_relay1_icon_color) = color;
              disp1->set_component_font_color("home.chip_relay1", color);
            } else if (component == "relay2_icon_color") {
              id(home_relay1_icon_color) = color;
              disp1->set_component_font_color("home.chip_relay2", color);
            }
          }

  - id: !extend action_component_text
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "ver_blueprint") {
              version_blueprint->publish_state(txt.c_str());
            } else if (component == "decimal_separator") {
              id(mui_decimal_separator) = txt;
            } else if (component == "relay1_icon") {
              id(home_relay1_icon) = txt;
              disp1->set_component_text("home.chip_relay1", id(home_relay1_icon).c_str());
            } else if (component == "relay2_icon") {
              id(home_relay2_icon) = txt;
              disp1->set_component_text("home.chip_relay2", id(home_relay2_icon).c_str());
            }
          }

  - id: !extend action_component_val
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "relay_settings") {
              id(relay_settings) = val;
              // Update blueprint status
              set_blueprint_status_flag(BlueprintStatusFlag::RELAY_SETTINGS);
            }
            if (component == "embedded_climate") {
              id(is_embedded_thermostat) = val;
            }
          }

  - id: !extend boot
    then:
      - delay: ${DELAY_DEFAULT}ms
      - text_sensor.template.publish:
          id: version_esphome
          state: "${version}"

  - id: change_climate_state
    mode: restart
    parameters:
      embedded: bool
      key: string
      value: string
    then:
      - lambda: |-
          if (!embedded and is_device_ready_for_tasks()) {
            if (key == "temperature" or key == "target_temp_high" or key == "target_temp_low") {
              esphome::api::CustomAPIDevice ha_event;
              ha_event.fire_homeassistant_event("${EVENT_NAME}", {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "service_call"},
                {"service", "climate.set_temperature"},
                {"key", key.c_str()},
                {"value", to_string(stof(value) / 10)},
                {"entity", detailed_entity->state.c_str()}
              });
            } else if (key == "hvac_mode") {
              esphome::api::CustomAPIDevice ha_event;
              ha_event.fire_homeassistant_event("${EVENT_NAME}", {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "service_call"},
                {"service", "climate.set_hvac_mode"},
                {"key", "hvac_mode"},
                {"value", value.c_str()},
                {"entity", detailed_entity->state.c_str()}
              });
            }
          }

  - id: check_versions
    mode: restart
    parameters:
      reset_flag: bool
    then:
      - lambda: |-
          ESP_LOGV("${TAG_CORE}", "Script: Check version");
          ESP_LOGV("${TAG_CORE}", "  reset_flag: %s", TRUEFALSE(reset_flag));
          ESP_LOGV("${TAG_CORE}", "  VERSION_CHECK_OK: %s", is_system_flag_set(NSPanelFlag::VERSION_CHECK_OK) ? "Set" : "NOT set");
          ESP_LOGV("${TAG_CORE}", "  is_device_ready_for_tasks: %s", YESNO(is_device_ready_for_tasks()));
          ESP_LOGV("${TAG_CORE}", "  Versions:");
          ESP_LOGV("${TAG_CORE}", "    Blueprint: %s", version_blueprint->state.c_str());
          ESP_LOGV("${TAG_CORE}", "    ESPHome: ${version}");
          ESP_LOGV("${TAG_CORE}", "    TFT: %s", version_tft->state.c_str());
          if (reset_flag)
            clear_system_flag(NSPanelFlag::VERSION_CHECK_OK);
          if (is_system_flag_set(NSPanelFlag::VERSION_CHECK_OK)) {
            ESP_LOGD("${TAG_CORE}", "VERSION_CHECK_OK is already set");
            return;
          }
          if (!is_device_ready_for_tasks()) {
            ESP_LOGD("${TAG_CORE}", "Device not ready for tasks - Skip version check");
            return;
          }
      - delay: 5s
      - script.execute: wait_for_versions
      - script.wait: wait_for_versions
      - lambda: |-
          ESP_LOGD("${TAG_CORE}", "Versions:");
          ESP_LOGD("${TAG_CORE}", "  Blueprint: %s", version_blueprint->state.c_str());
          ESP_LOGD("${TAG_CORE}", "  ESPHome:   ${version}");
          ESP_LOGD("${TAG_CORE}", "  TFT:       %s", version_tft->state.c_str());
          set_system_flag(NSPanelFlag::VERSION_CHECK_OK);
      - if:
          condition:
            - not:
                - text_sensor.state:
                    id: version_blueprint
                    state: ${version}
          then:
            - lambda: |-
                ESP_LOGE("${TAG_CORE}", "Blueprint version mismatch!");
                clear_system_flag(NSPanelFlag::VERSION_CHECK_OK);
      - if:
          condition:
            - not:
                - text_sensor.state:
                    id: version_tft
                    state: ${version}
          then:
            - lambda: |-
                ESP_LOGE("${TAG_CORE}", "TFT version mismatch!");
                clear_system_flag(NSPanelFlag::VERSION_CHECK_OK);
      - delay: 1s
      - homeassistant.event:
          event: ${EVENT_NAME}
          data:
            device_name: !lambda return device_name->state.c_str();
            esphome_version: ${version}
            type: version
            tft: !lambda return version_tft->state.c_str();
            esphome: ${version}
            blueprint: !lambda return version_blueprint->state.c_str();
      - lambda: |-
          ESP_LOGD("${TAG_CORE}", "Check version completed");

  - id: !extend dump_config
    then:
      # Report API status
      - lambda: |-
          // Report blueprint version
          ESP_LOGCONFIG("${TAG_CORE}", "Blueprint:");
          if (is_system_flag_set(NSPanelFlag::BLUEPRINT_READY)) {
            ESP_LOGCONFIG("${TAG_CORE}", "  Version: %s", version_blueprint->state.c_str());
            ESP_LOGCONFIG("${TAG_CORE}", "  Progress: %0.1f%%", get_blueprint_status_percentage());
          } else {
            ESP_LOGW("${TAG_CORE}", "  Progress: %0.1f%%", get_blueprint_status_percentage());
            ESP_LOGW("${TAG_CORE}", "  State: %s",
                      (are_all_system_flags_set({NSPanelFlag::WIFI_READY, NSPanelFlag::API_READY}))
                      ? "Pending" : "DISCONNECTED");
            ESP_LOGCONFIG("${TAG_CORE}", "Requesting blueprint settings");
            boot_event->execute(false);
          }

      # Report ESPHome
      - lambda: |-
          ESP_LOGCONFIG("${TAG_CORE}", "ESPHome:");
          ESP_LOGCONFIG("${TAG_CORE}", "  Version: ${version}");
          ESP_LOGCONFIG("${TAG_CORE}", "  Compiler: %s", ESPHOME_VERSION);
          ESP_LOGCONFIG("${TAG_CORE}", "  Compilation time: %s", App.get_compilation_time().c_str());

      # Report framework
      - lambda: |-
          ESP_LOGCONFIG("${TAG_CORE}", "  Framework:   "
          #ifdef ARDUINO
          "Arduino"
          #elif defined(USE_ESP_IDF)
          "ESP-IDF"
          #else
          "Unknown"
          #endif
          );

      # Report memory
      - lambda: |-
          #include <esp_heap_caps.h>
          const size_t internal_heap_size = heap_caps_get_total_size(MALLOC_CAP_INTERNAL);
          const size_t internal_heap_size_free = heap_caps_get_free_size(MALLOC_CAP_INTERNAL);
          ESP_LOGCONFIG("${TAG_CORE}", "  Free heap:");

          if (internal_heap_size != 0) {
            ESP_LOGCONFIG("${TAG_CORE}", "    Internal:  %7d bytes (%0.1f%%)", internal_heap_size_free,
                    ((float)internal_heap_size_free / internal_heap_size) * 100.0f);
          } else {
            ESP_LOGCONFIG("${TAG_CORE}", "    Internal:  %7d bytes", internal_heap_size_free);
          }

          #ifdef USE_PSRAM
          const size_t psram_heap_size = heap_caps_get_total_size(MALLOC_CAP_SPIRAM);
          const size_t psram_heap_size_free = heap_caps_get_free_size(MALLOC_CAP_SPIRAM);
          if (psram_heap_size != 0) {
            ESP_LOGCONFIG("${TAG_CORE}", "    PSRAM:     %7d bytes (%0.1f%%)", psram_heap_size_free,
                                                  ((float)psram_heap_size_free / psram_heap_size) * 100.0f);
          } else {
            ESP_LOGCONFIG("${TAG_CORE}", "    PSRAM:     %7d bytes", psram_heap_size_free);
          }
          #endif  // USE_PSRAM

      # Report Packages
      - lambda: |-
          ESP_LOGCONFIG("${TAG_CORE}", "Packages:");
          #ifdef NSPANEL_HA_BLUEPRINT_CORE
          ESP_LOGCONFIG("${TAG_CORE}", "  - Core");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADVANCED
          ESP_LOGCONFIG("${TAG_CORE}", "  - Advanced");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_BLUETOOTH_PROXY
          ESP_LOGCONFIG("${TAG_CORE}", "  - Bluetooth Proxy");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_UPLOAD_TFT
          ESP_LOGCONFIG("${TAG_CORE}", "  - Upload TFT");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_BASE
          ESP_LOGCONFIG("${TAG_CORE}", "  - Climate - Base");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL
          ESP_LOGCONFIG("${TAG_CORE}", "  - Climate - Cool");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          ESP_LOGCONFIG("${TAG_CORE}", "  - Climate - Dual");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT
          ESP_LOGCONFIG("${TAG_CORE}", "  - Climate - Heat");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_PREBUILT
          ESP_LOGCONFIG("${TAG_CORE}", "  - Pre-built");
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_PREBUILT_WALL_DISPLAY
          ESP_LOGCONFIG("${TAG_CORE}", "  - Pre-built (Wall Display)");
          #endif
          #if defined(USE_BLUETOOTH_PROXY) || defined(USE_WEBSERVER) || defined(USE_CAPTIVE_PORTAL)
          ESP_LOGCONFIG("${TAG_CORE}", "Components:");
          #ifdef USE_ESP32_BLE_SERVER
          ESP_LOGCONFIG("${TAG_CORE}", "  - BLE server");
          #endif
          #ifdef USE_ESP32_BLE_CLIENT
          ESP_LOGCONFIG("${TAG_CORE}", "  - BLE tracker");
          #endif
          #ifdef USE_BLUETOOTH_PROXY
          ESP_LOGCONFIG("${TAG_CORE}", "  - Bluetooth proxy");
          #endif
          #ifdef USE_CAPTIVE_PORTAL
          ESP_LOGCONFIG("${TAG_CORE}", "  - Captive portal");
          #endif
          #ifdef USE_IMPROV
          ESP_LOGCONFIG("${TAG_CORE}", "  - Improv (BLE)");
          #endif
          #ifdef USE_WEBSERVER
          ESP_LOGCONFIG("${TAG_CORE}", "  - Web server");
          #endif
          #endif

  - id: page_blank
    mode: single
    then:
      - lambda: |-
          ESP_LOGW("${TAG_CORE}", "Construct blank page");
          disp1->set_component_text("esp_version", "FW: ${version}");  // ESPHome version
          #ifdef ARDUINO
          disp1->set_component_text("framework", "Arduino");
          #elif defined(USE_ESP_IDF)
          disp1->set_component_text("framework", "ESP-IDF");
          #endif

  - id: page_qrcode
    mode: single
    then:  # There's nothing here so far

  - id: page_utilities
    mode: single
    then:
      - lambda: if (UtilitiesGroups == nullptr) resetUtilitiesGroups();

  - id: page_weather
    mode: single
    parameters:
      page_number: uint
    then:  # There's nothing here so far
  - id: page_weather01
    mode: single
    then:
      - script.execute:
          id: page_weather
          page_number: 1
  - id: page_weather02
    mode: single
    then:
      - script.execute:
          id: page_weather
          page_number: 2
  - id: page_weather03
    mode: single
    then:
      - script.execute:
          id: page_weather
          page_number: 3
  - id: page_weather04
    mode: single
    then:
      - script.execute:
          id: page_weather
          page_number: 4
  - id: page_weather05
    mode: single
    then:
      - script.execute:
          id: page_weather
          page_number: 5

  - id: refresh_relays
    mode: single
    parameters:
      relay_mask: uint8_t
    then:
      - lambda: |-
          if (relay_mask & 1) {  // Chip - Relay 1
            add_component_visibility(${PAGE_HOME_ID}, "chip_relay1", relay_1->state);
            if (current_page_id == ${PAGE_HOME_ID}) {
              if (relay_1->state) {
                disp1->show_component("chip_relay1");
              } else {
                disp1->hide_component("chip_relay1");
              }
            }
          }
          if (relay_mask & 2) {  // Chip - Relay 2
            add_component_visibility(${PAGE_HOME_ID}, "chip_relay2", relay_2->state);
            if (current_page_id == ${PAGE_HOME_ID}) {
              if (relay_2->state) {
                disp1->show_component("chip_relay2");
              } else {
                disp1->hide_component("chip_relay2");
              }
            }
          }

  - id: service_call_alarm_control_panel
    mode: single
    parameters:
      entity: string
      key: string
      code_format: string
      pin: string
    then:
      - lambda: |-
          // Log code only when needed
          #if ESPHOME_LOG_LEVEL >= ESPHOME_LOG_LEVEL_VERBOSE
          std::string arm_key = "alarm_control_panel.alarm_arm_" + key;
          if (key == "disarm") {
            arm_key = "alarm_control_panel.alarm_disarm";
          } else if (key == "bypass") {
            arm_key = "alarm_control_panel.alarm_arm_custom_bypass";
          }
          ESP_LOGV("${TAG_CORE}", "Home Assistant Action call:");
          ESP_LOGV("${TAG_CORE}", "  entity: %s", entity.c_str());
          ESP_LOGV("${TAG_CORE}", "  key: %s", key.c_str());
          ESP_LOGV("${TAG_CORE}", "  code_format: %s", code_format.c_str());
          ESP_LOGV("${TAG_CORE}", "  pin: %s", YESNO(!pin.empty()));
          ESP_LOGV("${TAG_CORE}", "  action: %s", arm_key.c_str());
          #endif  // ESPHOME_LOG_LEVEL > ESPHOME_LOG_LEVEL_VERBOSE

      - if:
          condition:
            - lambda: return pin.empty();
          then:
            - homeassistant.action:
                action: &alarm_control_panel_action !lambda |-
                  if (key == "disarm") return std::string("alarm_control_panel.alarm_disarm");
                  if (key == "bypass") return std::string("alarm_control_panel.alarm_arm_custom_bypass");
                  return std::string("alarm_control_panel.alarm_arm_" + key);
                data:
                  entity_id: !lambda return entity;
          else:
            - homeassistant.action:
                action: *alarm_control_panel_action
                data:
                  entity_id: !lambda return entity;
                  code: !lambda return pin;

  - id: !extend stop_all
    mode: single
    then:
      - script.stop: check_versions
      - script.stop: wakeup
      - script.stop: wait_for_api
      - script.stop: wait_for_blueprint
      - script.stop: wait_for_version_blueprint
      - script.stop: wait_for_versions
      - lambda: |-
          change_climate_state->stop();
          refresh_relays->stop();
          service_call_alarm_control_panel->stop();
          update_alarm_icon->stop();
          update_climate_icon->stop();
          cleanupUtilitiesGroups();

  - id: update_alarm_icon  # To do: Move to blueprint
    mode: single
    parameters:
      component: string
      state: string
    then:
      - lambda: |-
          static std::string alarm_icon = "\uEECC"; //mdi:shield-alert-outline
          static uint16_t alarm_color = 65535;
          if (state == "disarmed")
            {
              alarm_icon = "\uE99B"; //mdi:shield-off-outline
              alarm_color = 65535;
            }
          else if (state == "armed_home")
            {
              alarm_icon = "\uECCA"; //mdi:shield-home-outline
              alarm_color = 19818;
            }
          else if (state == "armed_away")
            {
              alarm_icon = "\uECCB"; //mdi:shield-lock-outline
              alarm_color = 19818;
            }
          else if (state == "armed_night")
            {
              alarm_icon = "\uF828"; //mdi:shield-moon-outline
              alarm_color = 19818;
            }
          else if (state == "armed_vacation")
            {
              alarm_icon = "\uECC6"; //mdi:shield-airplane-outline
              alarm_color = 19818;
            }
          else if (state == "armed_custom_bypass")
            {
              alarm_icon = "\uE77F"; //mdi:shield-half-full
              alarm_color = 19818;
            }
          else if (state == "pending" or state == "arming")
            {
              alarm_icon = "\uE498"; //mdi:shield-outline
              alarm_color = 65024;
            }
          else if (state == "disarming")
            {
              alarm_icon = "\uE99B"; //mdi:shield-off-outline
              alarm_color = 65024;
            }
          else if (state == "triggered")
            {
              alarm_icon = "\uEECC"; //mdi:shield-alert-outline
              alarm_color = 63488;
            }
          disp1->set_component_text(component.c_str(), alarm_icon.c_str());
          disp1->set_component_font_color(component.c_str(), alarm_color);

  - id: update_climate_icon
    mode: single
    parameters:
      component: string
      action: uint
      mode: uint
    then:
      - lambda: |-
          switch (action) // CLIMATE_ACTION_OFF = 0, CLIMATE_ACTION_COOLING = 2, CLIMATE_ACTION_HEATING = 3, CLIMATE_ACTION_IDLE = 4, CLIMATE_ACTION_DRYING = 5, CLIMATE_ACTION_FAN = 6
            {
              case 0: //CLIMATE_ACTION_OFF
                switch (mode) // CLIMATE_MODE_OFF = 0, CLIMATE_MODE_HEAT_COOL = 1, CLIMATE_MODE_COOL = 2, CLIMATE_MODE_HEAT = 3, CLIMATE_MODE_FAN_ONLY = 4, CLIMATE_MODE_DRY = 5, CLIMATE_MODE_AUTO = 6
                  {
                    case 0: //CLIMATE_MODE_OFF
                      disp1->set_component_text(component.c_str(), "\uFFFF"); // (E424) Don't show icon when off
                      disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                      break;
                    case 1: //CLIMATE_MODE_HEAT_COOL
                      disp1->set_component_text(component.c_str(), "\uE069"); // mdi:autorenew
                      disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                      break;
                    case 2: //CLIMATE_MODE_COOL
                      disp1->set_component_text(component.c_str(), "\uE716"); // mdi:snowflake
                      disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                      break;
                    case 3: //CLIMATE_MODE_HEAT
                      disp1->set_component_text(component.c_str(), "\uE237"); // mdi:fire
                      disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                      break;
                    case 4: //CLIMATE_MODE_FAN_ONLY
                      disp1->set_component_text(component.c_str(), "\uE20F"); // mdi:fan
                      disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                      break;
                    case 5: //CLIMATE_MODE_DRY
                      disp1->set_component_text(component.c_str(), "\uE58D"); // mdi:water-percent
                      disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                      break;
                    case 6: //CLIMATE_MODE_AUTO
                      disp1->set_component_text(component.c_str(), "\uEE8D"); // mdi:calendar-sync
                      disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                      break;
                  }
                  break;
              case 2: //CLIMATE_ACTION_COOLING
                disp1->set_component_text(component.c_str(), "\uE716"); // mdi:snowflake
                disp1->set_component_font_color(component.c_str(), 1055); // blue
                break;
              case 3: //CLIMATE_ACTION_HEATING
                disp1->set_component_text(component.c_str(), "\uE237"); // mdi:fire
                disp1->set_component_font_color(component.c_str(), 64164); // deep-orange
                break;
              case 4: //CLIMATE_ACTION_IDLE
                disp1->set_component_text(component.c_str(), "\uE50E"); // mdi:thermometer
                disp1->set_component_font_color(component.c_str(), 35921); // grey (off)
                break;
              case 5: //CLIMATE_ACTION_DRYING
                disp1->set_component_text(component.c_str(), "\uE58D"); // mdi:water-percent
                disp1->set_component_font_color(component.c_str(), 64704); // orange
                break;
              case 6: //CLIMATE_ACTION_FAN
                disp1->set_component_text(component.c_str(), "\uE20F"); // mdi:fan
                disp1->set_component_font_color(component.c_str(), 1530); // cyan
                break;
            }

  - id: wakeup
    mode: single
    parameters:
      reset_timer: bool
    then:
      - lambda: |-
          if (current_page_id == ${PAGE_SCREENSAVER_ID} or current_page_id == ${PAGE_BOOT_ID}) {
            ESP_LOGD("${TAG_CORE}", "Wake-up on page: %s", wakeup_page_name->state.c_str());
            goto_page->execute(wakeup_page_id);
          }
          if (reset_timer) {
            timer_reset_all->execute();
          } else {
            timer_sleep->execute();
            timer_dim->execute();
          }

  - id: wait_for_api
    mode: single
    then:
      - repeat:
          count: 60  # seconds
          then:
            - if:
                condition:
                  - lambda: return is_system_flag_set(NSPanelFlag::WIFI_READY);
                then:
                  - script.stop: wait_for_api
            - if:
                condition:
                  - lambda: return (iteration % 5 == 1);  // Log every 5 seconds (at iterations 1, 6, 11, etc.)
                then:
                  - script.execute:
                      id: boot_log
                      category: "Boot"
                      log_message: "Waiting for API..."
            - delay: 1s

  - id: wait_for_blueprint
    mode: single
    then:
      - script.execute:
          id: boot_log
          category: Boot
          log_message: Waiting for Blueprint
      - while:
          condition:
            - lambda: return not is_system_flag_set(NSPanelFlag::BLUEPRINT_READY);
            - lambda: return not is_blueprint_fully_ready();
          then:
            - lambda: |-
                ESP_LOGD("${TAG_CORE}", "Blueprint progress: %0.1f%%", get_blueprint_status_percentage());
                ESP_LOGV("${TAG_CORE}", "  Page home: %s",
                                        YESNO(is_blueprint_status_flag_set(BlueprintStatusFlag::PAGE_HOME)));
                ESP_LOGV("${TAG_CORE}", "  Page qrcode: %s",
                                        YESNO(is_blueprint_status_flag_set(BlueprintStatusFlag::QRCODE)));
                ESP_LOGV("${TAG_CORE}", "  Relay settings: %s",
                                        YESNO(is_blueprint_status_flag_set(BlueprintStatusFlag::RELAY_SETTINGS)));
                ESP_LOGV("${TAG_CORE}", "  Version: %s",
                                        YESNO(is_blueprint_status_flag_set(BlueprintStatusFlag::VERSION)));
                ESP_LOGV("${TAG_CORE}", "  HW Buttons settings: %s",
                                        YESNO(is_blueprint_status_flag_set(BlueprintStatusFlag::HW_BUTTONS_SETTINGS)));
            - delay: 1s
      - script.execute:
          id: boot_log
          category: Boot
          log_message: Blueprint is ready
      - script.execute: refresh_wifi_icon

  - id: wait_for_version_blueprint
    mode: single
    then:
      - repeat:
          count: 60  # seconds
          then:
            - if:
                condition:
                  - lambda: return not version_blueprint->state.empty();
                  # - text_sensor.state:  # compare_versions("${version}", version_blueprint->state.c_str());
                  #     id: version_blueprint
                  #     state: ${version}
                then:
                  - script.stop: wait_for_version_blueprint
            - if:
                condition:
                  - lambda: return (iteration % 5 == 1);  // Log every 5 seconds (at iterations 1, 6, 11, etc.)
                then:
                  - script.execute:
                      id: boot_log
                      category: "Boot"
                      log_message: "Waiting for Blueprint version..."
            - delay: 1s

  - id: wait_for_versions
    mode: single
    then:
      - script.execute: wait_for_version_blueprint
      - script.execute: wait_for_version_tft
      - script.wait: wait_for_version_blueprint
      - script.wait: wait_for_version_tft
...
