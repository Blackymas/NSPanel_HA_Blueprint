#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME - Hardware - Buzzer                                                               #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_HW_BUZZER: '4'
  GPIO_BUZZER_OUTPUT_PIN: 21
  TAG_HW_BUZZER: nspanel.hw.buzzer
  # RTTTL format: name:d=duration,o=octave,b=tempo:notes
  # d=32 (32nd note), o=5 (octave 5), b=100 (tempo 100)
  tone_boot: "two short:d=4,o=5,b=100:16e6,16e6"
  tone_volume_change: "scale_up:d=32,o=5,b=100:c,c#,d#,e,f#,g#,a#,b"  # Use "none" to disable sound

api:
  actions:
    - action: rtttl_play  # Plays melodies encoded in RTTTL format, suitable for audio feedback, notifications, or simple tunes.
      variables:
        # The RTTTL string for the melody to be played.
        # It should follow the RTTTL format, including the melody's name,
        # default settings, and a sequence of notes.
        tone: string
      then:
        - lambda: |-
            buzzer->stop();
        - if:
            condition:
              - number.in_range:
                  id: buzzer_gain
                  above: 1.0
            then:
              - lambda: |-
                  ESP_LOGI("${TAG_HW_BUZZER}", "Play tone: '%s'", tone.c_str());
              - rtttl.play: !lambda return tone;

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_HW_BUZZER

number:
  - id: buzzer_gain
    name: Sound - Volume
    platform: template
    max_value: 100
    min_value: 0
    step: 1
    initial_value: 100
    unit_of_measurement: "%"
    internal: false
    disabled_by_default: true
    entity_category: config
    device_class: sound_pressure
    restore_value: true
    optimistic: true
    set_action:
      then:
        - lambda: |-
            buzzer->set_gain((100-(x/10.0f))/100.0f);
            static const std::string tone_volume_change = "${tone_volume_change}";
            // Play sound if tone_volume_change is not "none"
            if (x > 0 and !tone_volume_change.empty() and tone_volume_change != "none")
              buzzer->play(tone_volume_change);
            buzzer->dump_config();

output:
  # Buzzer output
  - id: buzzer_out
    platform: ledc
    pin: ${GPIO_BUZZER_OUTPUT_PIN}

rtttl:  # ENABLE RINGTONE MUSIC SUPPORT
  id: buzzer
  output: buzzer_out

script:
  - id: !extend boot
    then:
      - lambda: |-
          if (isnan(buzzer_gain->state))
            ESP_LOGE("${TAG_HW_BUZZER}", "Buzzer gain not set");
          else
            buzzer->set_gain((100-(buzzer_gain->state/10.0f))/100.0f);

  - id: !extend wait_for_page_boot_exit
    then:
      - if:
          condition:
            - switch.is_on: buzzer_boot_sound
            - number.in_range:
                id: buzzer_gain
                above: 1.0
          then:
            - script.execute:
                id: boot_log
                category: Boot
                log_message: "Play boot sound"
            - rtttl.play: ${tone_boot}

switch:
  - id: buzzer_boot_sound
    platform: template
    name: Sound - Boot
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    internal: false
    icon: mdi:volume-high
    disabled_by_default: false
...
