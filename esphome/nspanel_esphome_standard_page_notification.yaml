#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - PAGE - NOTIFICATION                                                        #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_NOTIFICATION: '21'
  PAGE_ID_NOTIFICATION: '16'
  tone_notification: "two short:d=4,o=5,b=100:16e6,16e6"
  TAG_PAGE_NOTIFICATION: nspanel_ha_blueprint.page.notification

api:
  actions:
    # This action removes any displayed notifications from the screen,
    # helping to keep the user interface clean and focused on its primary functions.
    - action: notification_clear
      then:
        - lambda: |-
            if (current_page_id == ${PAGE_ID_NOTIFICATION})
              id(goto_page_id).execute(${PAGE_ID_HOME}, false);
            id(notification_label).publish_state("");
            id(notification_text).publish_state("");
            id(notification_unread).publish_state(false);
            id(set_component_visibility).execute(${PAGE_ID_HOME}, "bt_notific", false);

    # Displays a notification message on the screen, useful for alerts or informational updates.
    - action: notification_show
      variables:
        # Title or label for the notification, displayed in a prominent format.
        label: string
        # Detailed message or content of the notification. Include `\r` to insert a line break,
        # allowing for custom formatting.
        message: string
      then:
        - script.execute:
            id: notification_show_action
            label: !lambda return label.c_str();
            message: !lambda return message.c_str();

binary_sensor:
  - id: notification_unread
    name: Notification Unread
    platform: template
    internal: false
    icon: mdi:bell-alert-outline
    disabled_by_default: true

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (page_id == ${PAGE_ID_NOTIFICATION}) {  // Page Notification
              switch (component_id) {
                case 7:  // bt_accept
                  id(ha_button).execute(${PAGE_ID_NOTIFICATION}, "bt_accept", touch_event ? "press" : "released");
                  if (!touch_event) {  // Release
                    id(notification_label).publish_state("");
                    id(notification_text).publish_state("");
                    id(notification_unread).publish_state(false);
                    id(goto_page_id).execute(${PAGE_ID_HOME}, false);
                    id(set_component_visibility).execute(${PAGE_ID_HOME}, "bt_notific", false);
                  }
                break;
                case 8:  // bt_clear
                  id(ha_button).execute(${PAGE_ID_NOTIFICATION}, "bt_clear", touch_event ? "press" : "released");
                  if (!touch_event) {  // Release
                    id(notification_unread).publish_state(false);
                    id(goto_page_id).execute(${PAGE_ID_HOME}, false);
                  }
                break;
              }
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_STANDARD_PAGE_NOTIFICATION
  on_boot:
    - priority: 600.21
      then:
        - if:
            condition: &condition_NOT_safe_mode
              - lambda: return not nspanel_ha_blueprint::is_safe_mode;
            then:
              - lambda: |-
                  id(notification_label).publish_state("");
                  id(notification_text).publish_state("");
                  id(notification_unread).publish_state(false);

script:
  - id: !extend boot_package_register
    then:
      - lambda: id(boot_package_register_add).execute(${BOOT_STEP_PAGE_NOTIFICATION}, "PAGE_NOTIFICATION",
                                                    "Page Notification");

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page_id == ${PAGE_ID_NOTIFICATION}) id(page_notification).execute();

  - id: page_notification
    mode: restart
    then:
      - lambda: |-
          id(display_component_update_text).execute(get_component(${PAGE_ID_NOTIFICATION}, "notifi_label"),
                                                  id(notification_label).state.c_str());
          id(display_wrapped_text).execute(${PAGE_ID_NOTIFICATION}, "notifi_text01",
                                        id(notification_text).state.c_str(), id(display_mode) == 2 ? 23 : 32);

  - id: notification_show_action
    mode: restart
    parameters:
      label: string
      message: string
    then:
      - lambda: |-
          id(set_component_visibility).execute(${PAGE_ID_HOME}, "bt_notific", true);
          id(goto_page_id).execute(${PAGE_ID_NOTIFICATION}, true);
          id(notification_label).publish_state(label.c_str());
          id(notification_text).publish_state(message.c_str());
          id(notification_unread).publish_state(true);
          // Only when buzzer is available
          #ifdef NSPANEL_HA_BLUEPRINT_CORE_HW_BUZZER
          id(notification_play_sound).execute();
          #endif

  - id: notification_play_sound
    mode: single
    then:
      - lambda: |-
          // Only when buzzer is available
          #ifdef NSPANEL_HA_BLUEPRINT_CORE_HW_BUZZER
          if (id(notification_sound).state and id(buzzer_gain).state > 0)
            id(buzzer).play("${tone_notification}");
          #endif

  - id: !extend stop_all
    then:
      - lambda: |-
          id(notification_play_sound).stop();
          id(page_notification).stop();

switch:
  - name: Sound - Notification  # Notification sound
    platform: template
    id: notification_sound
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - lambda: |-
            // Only when buzzer is available
            #ifdef NSPANEL_HA_BLUEPRINT_CORE_HW_BUZZER
            if (id(notification_unread).state)
              id(notification_play_sound).execute();
            #endif
    on_turn_off:
      then:
        - lambda: |-
            id(notification_play_sound).stop();
            // Only when buzzer is available
            #ifdef NSPANEL_HA_BLUEPRINT_CORE_HW_BUZZER
            if (id(buzzer).is_playing())
              id(buzzer).stop();
            #endif

text_sensor:
  - id: notification_label
    name: Notification Label
    platform: template
    internal: false
    icon: mdi:bell-outline
    disabled_by_default: true
    on_value:
      then:
        - lambda: |-
            // Send event to Home Assistant
            esphome::api::CustomAPIDevice ha_event;
            ha_event.fire_homeassistant_event("${EVENT_NAME}", {
              {"device_name", id(device_name).state},
              {"esphome_version", "${version}"},
              {"type", "notification_changed"},
              {"component", "notification_label"},
              {"action", "new_value"}
            });

  - id: notification_text
    name: Notification Text
    platform: template
    internal: false
    icon: mdi:message-text-outline
    disabled_by_default: true
    on_value:
      then:
        - lambda: |-
            // Send event to Home Assistant
            esphome::api::CustomAPIDevice ha_event;
            ha_event.fire_homeassistant_event("${EVENT_NAME}", {
              {"device_name", id(device_name).state},
              {"esphome_version", "${version}"},
              {"type", "notification_changed"},
              {"component", "notification_text"},
              {"action", "new_value"}
            });
...
