#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ##############################
  BOOT_STEP_BOOT: '1'
  TAG_BOOT: nspanel.boot

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_BOOT
  on_boot:
    - priority: -1000.${BOOT_STEP_BOOT}  # This should happen after ESPHome completed the startup
      then:
        - script.execute: boot
        - script.wait: boot
        - lambda: set_system_flag(nspanel_ha_blueprint::system_flags, NSPanelFlag::BOOT_COMPLETED);

globals:
  - id: boot_completed
    type: bool
    restore_value: false
    initial_value: 'false'

script:
  - id: boot
    mode: single
    then:  # Other packages will subscribe themselves to this to run after critical components and early routines
      - script.execute: boot_critical_components
      - script.wait: boot_critical_components
      - script.execute: boot_early_routines
      - script.wait: boot_early_routines

  - id: boot_critical_components
    mode: single
    then:  # Critical components should subscribe themselves to this

  - id: boot_early_routines
    mode: single
    then:  # Critical components should subscribe themselves to this

  - id: boot_event
    mode: restart
    parameters:
      init: bool
    then:
      - if:
          condition:
            - lambda: return init;
          then:
            - lambda: |-
                ESP_LOGD("${TAG_BOOT}", "Asking Blueprint to start sending data");
            - homeassistant.event:
                event: ${EVENT_NAME}
                data:
                  device_name: !lambda return device_name->state.c_str();
                  esphome_version: ${version}
                  type: boot
                  step: start
      - while:
          condition:
            - lambda: return not is_system_flag_set(nspanel_ha_blueprint::system_flags, NSPanelFlag::BLUEPRINT_READY);
          then:
            - lambda: |-
                ESP_LOGD("${TAG_BOOT}", "Give some time for the blueprint to respond");
            - delay: 10s
            - if:
                condition:
                  - lambda: return not is_system_flag_set(nspanel_ha_blueprint::system_flags, NSPanelFlag::BLUEPRINT_READY);
                then:
                  - lambda: |-
                      ESP_LOGW("${TAG_BOOT}", "Inform Blueprint that no data was received yet");
                  - homeassistant.event:
                      event: ${EVENT_NAME}
                      data:
                        device_name: !lambda return device_name->state.c_str();
                        esphome_version: ${version}
                        type: boot
                        step: timeout
      - lambda: |-
          ESP_LOGD("${TAG_BOOT}", "Boot event response (from Blueprint) was successful");

  - id: boot_log
    mode: queued
    max_runs: 3
    parameters:
      category: string
      log_message: string
    then:
      - lambda: ESP_LOGD("${TAG_BOOT}", log_message.c_str());
      - if:
          condition:
            - text_sensor.state:
                id: current_page
                state: boot
          then:
            - lambda: |-
                disp1->send_command_printf("log_body.txt+=\"%s: %s\\r\"", category.c_str(), log_message.c_str());

  - id: boot_progress
    mode: restart
    parameters:
      step: uint
    then:
      - if:
          condition:
            - lambda: return (step == 10);
          then:
            - globals.set:
                id: boot_completed
                value: 'true'
            - lambda: |-
                ESP_LOGD("script.boot_progress", "Progress: Completed");
                disp1->set_component_value("boot.progress", 100);
          else:
            - lambda: |-
                step = std::min(100, int(round((blueprint_status->state + (step*10))/2)));
                ESP_LOGD("script.boot_progress", "Progress: %i%%", step);
                disp1->set_component_value("boot.progress", step);
      - if:
          condition:
            - lambda: return (current_page->state == "boot");
            - lambda: return !isnan(display_charset->state);
            - lambda: return !isnan(display_mode->state);
            - lambda: return !version_tft->state.empty();
          then:
            - lambda: disp1->send_command("tm_esphome.en=0");

  - id: !extend stop_all
    then:
      - script.stop: boot
      - script.stop: boot_critical_components
      - script.stop: boot_early_routines
      - script.stop: boot_event
      - script.stop: boot_log
      - script.stop: boot_progress
...
