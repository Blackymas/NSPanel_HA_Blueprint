#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_BOOT: '1'
  TAG_BOOT: nspanel_ha_blueprint.boot

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_BOOT

display:
  - id: !extend disp1
    on_setup:
      lambda: |-
        boot_log->execute("Nextion", "on_setup");

globals:
  - id: boot_completed
    type: bool
    restore_value: false
    initial_value: 'false'

script:
  - id: boot_log
    mode: parallel
    max_runs: 100
    parameters:
      category: string
      log_message: string
    then:
      - lambda: |-
          static const char *const TAG = "script.boot_log";
          ESP_LOGD(TAG, log_message.c_str());
          if (current_page->state == "boot") {
            disp1->send_command_printf("log_body.txt+=\"%s: %s\\r\"", category.c_str(), log_message.c_str());
          }

  - id: boot_event
    mode: restart
    parameters:
      init: bool
    then:
      - lambda: |-
          if (init) {
            esphome::api::CustomAPIDevice ha_event;
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
              {
                {"device_name", device_name->state.c_str()},
                {"esphome_version", "${version}"},
                {"type", "boot"},
                {"step", "start"}
              });
          }
      - while:
          condition:
            - lambda: return (blueprint_status->state < 99);
          then:
            - delay: 10s
            - lambda: |-
                if (blueprint_status->state < 99) {
                  esphome::api::CustomAPIDevice ha_event;
                  ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint",
                    {
                      {"device_name", device_name->state.c_str()},
                      {"esphome_version", "${version}"},
                      {"type", "boot"},
                      {"step", "timeout"}
                    });
                }

  - id: boot_progress
    mode: restart
    parameters:
      step: uint
    then:
      - lambda: |-
          timer_reset_all->execute();
          if (step == 10) {
            id(boot_completed) = true;
            ESP_LOGD("script.boot_progress", "Progress: Completed");
            disp1->set_component_value("boot.progress", 100);
          } else {
            step = std::min(100, int(round((blueprint_status->state + (step*10))/2)));
            ESP_LOGD("script.boot_progress", "Progress: %i%%", step);
            disp1->set_component_value("boot.progress", step);
          }
          if (current_page->state == "boot" and !isnan(display_charset->state) and !isnan(display_mode->state) and !version_tft->state.empty())
            disp1->send_command("tm_esphome.en=0");

  - id: !extend stop_all
    then:
      - script.stop: boot_log
      - script.stop: boot_event
      - script.stop: boot_progress
...
