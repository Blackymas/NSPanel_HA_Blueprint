#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_BOOT: '1'
  TAG_BOOT: nspanel_ha_blueprint.boot

api:
  on_client_connected:
    then:
      - script.execute:
          id: page_boot_log
          category: API
          log_message: Client connected

display:
  - id: !extend disp1
    on_setup:
      then:
        - lambda: |-
            id(disp1).send_command("esphome=0");
            id(disp1).set_backlight_brightness(1);
            id(nextion_init).publish_state(id(disp1).is_setup());

    on_touch:
      then:
        - lambda: |-
            if (page_id == 0) {  // Boot
              switch (component_id) {
                case 24:  // Reboot button
                  if (!touch_event) {  // Release
                    App.safe_reboot();
                  }
                  break;
              }
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_BOOT
  on_boot:
    - priority: 1000.1
      then:
        - if:
            condition: &condition_NOT_safe_mode
              - lambda: return not nspanel_ha_blueprint::is_safe_mode;
            then:
              - script.execute: boot_package_register

    - priority: 900.1
      then:
        - if:
            condition: *condition_NOT_safe_mode
            then:
              - script.execute: boot_initialize

    - priority: 400.1
      then:
        - if:
            condition: *condition_NOT_safe_mode
            then:
              - script.execute: boot_sequence_start

script:
  - id: boot_event
    mode: restart
    then:
      - script.wait: boot_scan_baud_rate
      - delay: 5s
      - while:
          condition:
            - lambda: return not is_boot_complete();
          then:
            - script.execute:
                id: boot_event_ha
                step_name: timeout
            - delay: 120s

  - id: boot_event_ha
    mode: restart
    parameters:
      step_name: string
    then:
      - script.wait: boot_scan_baud_rate
      - lambda: |-
          esphome::api::CustomAPIDevice ha_event;
          std::map<std::string, std::string> event_data;

          // Adding static data to the event
          event_data["device_name"] = id(device_name).state;
          event_data["esphome_version"] = "${version}";
          event_data["type"] = "boot";
          event_data["step"] = step_name.c_str();

          // Add each uncompleted boot step with its key name
          for (size_t i = 0; i < MAX_BOOT_STEPS; ++i) {
            if (boot_steps[i].registered && !boot_steps[i].completed) {
              // Add prefix "BOOT_STEP_" to the key of the boot step
              std::string key = "BOOT_STEP_" + std::string(boot_steps[i].key);
              // Set the value to "true"
              event_data[key] = "true";
            }
          }

          // Fire the Home Assistant event with the generated data
          ha_event.fire_homeassistant_event("${EVENT_NAME}", event_data);

  - id: boot_initialize
    mode: single
    then:
      - script.execute: boot_progress_dump_timer
      # Extended by:
      #   nspanel_esphome_core_hw_display.yaml

  - id: boot_package_register
    mode: restart
    then:
      - lambda: id(boot_package_register_add).execute(${BOOT_STEP_BOOT}, "BOOT", "Boot");

  - id: boot_package_register_add
    mode: queued
    parameters:
      package_id: uint8_t
      package_key: string
      package_name: string
    then:
      - lambda: |-
          const bool package_registered = register_application(package_id, package_key.c_str(), package_name.c_str());
          ESP_LOGV("${TAG_BOOT}", "Pkg '%s' [%d] %s", package_name.c_str(), package_id, package_key.c_str(),
                    package_registered ? "registered" : "FAILED");

  - id: boot_progress
    mode: restart
    parameters:
      step: uint8_t
    then:
      - lambda: |-
          complete_boot_step(step);
          ESP_LOGD("${TAG_BOOT}", "Step done: %s (%d/%d - %d%%)", get_boot_step(step)->name, get_completed_boot_steps(),
                    get_total_registered_boot_steps(), get_boot_progress_percentage());
          if (is_boot_complete())
            ESP_LOGI("${TAG_BOOT}", "Boot completed");

  - id: boot_progress_dump
    mode: queued
    then:
      - lambda: |-
          ESP_LOGI("${TAG_BOOT}", "Boot: %d%% (%d steps)", get_boot_progress_percentage(), get_completed_boot_steps());
          for (size_t i = 0; i < MAX_BOOT_STEPS; ++i) {
            if (boot_steps[i].registered) {
              // Calculate padding based on the actual length of the name
              const int8_t padding = std::max(0, 21 - static_cast<int>(strlen(boot_steps[i].name)));
              ESP_LOGI("${TAG_BOOT}", " - %s:%*s%s", boot_steps[i].name, padding, "",
                        boot_steps[i].completed ? "Done" : "PENDING");
            }
          }

  - id: boot_progress_dump_timer
    mode: restart
    then:
      - wait_until:
          condition:
            - lambda: return nspanel_ha_blueprint::boot_completed;
          timeout: 60s
      - script.execute: boot_progress_dump

  - id: boot_sequence
    mode: restart
    parameters:
      show_boot_page: bool
    then:
      - script.wait: boot_scan_baud_rate
      - lambda: |-
          id(page_boot_log).execute("Boot", "Starting boot sequence");
          if (!show_boot_page)
            reset_boot_steps();
          id(boot_event).execute();
          id(boot_progress_dump).execute();
          if (!id(disp1).is_setup())
            id(page_boot_log).execute("Boot", "Waiting for Nextion");
      - wait_until:
          condition:
            - lambda: return id(disp1).is_setup();
            - lambda: return (id(tf_uart).get_baud_rate() == ${BAUD_RATE});
      - if:
          condition:
            - lambda: return show_boot_page;
          then:
            - delay: 1s
            - lambda: |-
                if (current_page_id != ${PAGE_ID_BOOT}) {
                  id(page_changed).execute(${PAGE_ID_BOOT});
                  id(page_boot_log).execute("Boot", "Waiting for page Boot");
                }
            - wait_until:
                condition:
                  - lambda: return current_page_id == ${PAGE_ID_BOOT};
                timeout: 10s
      - lambda: |-
          if (!id(wifi_component).is_connected())
            id(page_boot_log).execute("Boot", "Waiting for WiFi");
      - wait_until:
          condition:
            - wifi.connected:
          timeout: 10s
      - lambda: |-
          if (!id(api_server).is_connected())
            id(page_boot_log).execute("Boot", "Waiting for API");
      - wait_until:
          condition:
            - api.connected:
          timeout: 10s
      - lambda: |-
          id(page_boot_log).execute("Boot", "Report to Blueprint");
          id(boot_event_ha).execute("ready");
          id(boot_progress).execute(${BOOT_STEP_BOOT});
          id(boot_event).execute();

  - id: boot_sequence_start
    mode: restart
    then:
      - script.wait: boot_scan_baud_rate
      - script.execute:
          id: boot_sequence
          show_boot_page: true

  - id: !extend dump_config
    then:
      - lambda: |-
          if (is_boot_complete())
            ESP_LOGCONFIG("${TAG_BOOT}", "Boot steps: %" PRIu8 "/%" PRIu8 " (100%%)",
                          get_completed_boot_steps(), get_total_registered_boot_steps());
          else {
            ESP_LOGW("${TAG_BOOT}", "Boot steps: %" PRIu8 "/%" PRIu8 " (%" PRIu8 "%% - %" PRIu8 ")",
                      get_completed_boot_steps(), get_total_registered_boot_steps(),
                      get_boot_progress_percentage(), get_completed_boot_steps());
            ESP_LOGW("${TAG_BOOT}", "  State:    %s",
                      ((id(wifi_component).is_connected()) and id(api_server).is_connected()) ?
                      "Pending" : "DISCONNECTED");
            id(boot_progress_dump).execute();
            ESP_LOGD("${TAG_BOOT}", "Requesting boot params from Blueprint");
            id(boot_event).execute();
          }

  - id: !extend set_var_bool
    then:
      - lambda: |-
          if (component == "automation_reloaded") {
            ESP_LOGD("${TAG_BOOT}", "Automation reloaded - Restarting boot sequence");
            id(boot_sequence).execute(false);
          } else if (component == "ha_started") {
            ESP_LOGD("${TAG_BOOT}", "Home Assistant started - Restarting boot sequence");
            id(boot_sequence).execute(false);
          }

  - id: !extend set_var_int
    then:
      - lambda: |-
          if (component == "BOOT_STEP") {
            id(boot_progress).execute(static_cast<uint8_t>(val));
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          id(boot_event).stop();
          id(boot_initialize).stop();
          id(boot_package_register).stop();
          id(boot_progress).stop();
          id(boot_progress_dump_timer).stop();
          id(boot_sequence).stop();
          id(boot_sequence_start).stop();
...
