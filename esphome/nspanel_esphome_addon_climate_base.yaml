#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHome Add-on for Climate control - Shared - This will be called by heat/cool            #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
##### ATTENTION: This will add climate elements to the core system and requires the core part.  #####
#####################################################################################################
---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ##############################
  ### Local thermostat defaults ###
  # https://esphome.io/components/climate/thermostat.html
  heater_relay: "0"  # Select 1 for "Relay 1", 2 for "Relay 2" or "0" to a dummy switch/disabled
  cooler_relay: "0"  # Select 1 for "Relay 1", 2 for "Relay 2" or "0" to a dummy switch/disabled
  min_off_time: "300"
  min_run_time: "300"
  min_idle_time: "30"
  # https://esphome.io/components/climate/index.html#base-climate-configuration
  temp_min: "7"
  temp_max: "35"
  temp_step: "0.5"
  target_low: "18"
  target_high: "24"
  cool_deadband: "0.5"  # Temperature delta before engaging cooling
  cool_overrun: "0.5"   # Temperature delta before disengaging cooling
  heat_deadband: "0.5"  # Temperature delta before engaging heat
  heat_overrun: "0.5"   # Temperature delta before disengaging heat
  TAG_ADDON_CLIMATE: nspanel.addon.climate

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_BASE

climate:
  - platform: thermostat
    name: Thermostat
    id: thermostat_embedded
    sensor: temp_nspanel
    min_idle_time: ${min_idle_time}s
    visual:
      min_temperature: ${temp_min} ${temp_units}
      max_temperature: ${temp_max} ${temp_units}
      temperature_step:
        target_temperature: 0.5  # This is hard coded for now as ESPHome isn't supporting a substitution here. In contact with support.
        current_temperature: 0.1
    default_preset: "Off"
    on_boot_restore_from: memory
    internal: false
    on_state:
      then:
        - lambda: |-
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Climate have a new state");
            if (!is_device_ready_for_tasks()) {
              ESP_LOGW("${TAG_ADDON_CLIMATE}", "Device not ready to work with the new state");
              return;
            }
            if (current_page_id == ${PAGE_CLIMATE_ID} and detailed_entity->state == "embedded_climate") {
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "Update page 'climate'");
              page_climate->execute();
            }
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Update page 'home'");
            page_home->execute();

switch:
  ##### PHYSICAL SWITCH 0 (Dummy) - Used when relay is not set #####
  - name: Relay 0 (dummy)
    platform: template
    id: relay_0
    lambda: !lambda return false;
    internal: true
    optimistic: true

script:
  - id: !extend action_component_text
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "addon_climate_friendly_name") {
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set addon_climate_friendly_name:");
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "  from: %s", addon_climate_friendly_name.c_str());
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "  to: %s", txt.c_str());
              addon_climate_friendly_name = txt;
            }
          }
  - id: !extend change_climate_state
    then:
      - lambda: |-
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Add-on climate code starting");
          if (!embedded) {
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Not showing the embedded climate");
            return;
          }
          auto FahrenheitToCelsius = [](float fahrenheit) -> float {
            return (fahrenheit - 32.0) * 5.0 / 9.0;
          };
          std::string temp_units = "${temp_units}";
          const bool temp_unit_fahrenheit = (temp_units == "째F"
                                          || temp_units == "F"
                                          || temp_units == "째f"
                                          || temp_units == "f");
          auto call = thermostat_embedded->make_call();
          float temperature;

          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Inform display that is showing embedded climate");
          disp1->set_component_value("climate.embedded", 1);
          if (key == "temperature") {
            temperature = stof(value) / 10;
            if (temp_unit_fahrenheit) temperature = FahrenheitToCelsius(temperature);
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set target temperature to %f", temperature);
            call.set_target_temperature(temperature);
          } else if (key == "target_temp_high") {
            temperature = stof(value) / 10;
            if (temp_unit_fahrenheit) temperature = FahrenheitToCelsius(temperature);
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set target temperature high to %f", temperature);
            call.set_target_temperature_high(temperature);
          } else if (key == "target_temp_low") {
            temperature = stof(value) / 10;
            if (temp_unit_fahrenheit) temperature = FahrenheitToCelsius(temperature);
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set target temperature low to %f", temperature);
            call.set_target_temperature_low(temperature);
          } else if (key == "hvac_mode") {
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set 'hvac_mode' to '%s'", value.c_str());
            call.set_mode(value);
          }
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Perform action");
          call.perform();
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Action done");

  - id: !extend dump_config
    then:
      - lambda: |-
          // Check if more than one or none of the climate options are defined
          #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT)
            #error "Invalid settings for add-on Climate. More than one option selected: Cool + Heat."
          #elif defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. More than one option selected: Cool + Dual."
          #elif defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. More than one option selected: Heat + Dual."
          #elif !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) && !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. No option selected between Cool, Heat or Dual."
          #endif
          static const char *const TAG = "nspanel_ha_blueprint";
          const uint cooler_relay = ${cooler_relay};
          const uint heater_relay = ${heater_relay};
          ESP_LOGCONFIG(TAG, "Add-on climate:");
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL
          ESP_LOGCONFIG(TAG, "  Cool:  Enabled");
          ESP_LOGCONFIG(TAG, "  Relay: %u", cooler_relay);
          ESP_LOGE_IF(TAG, (cooler_relay != 1 and cooler_relay != 2), "  Relay: %u", cooler_relay);
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT
          ESP_LOGCONFIG(TAG, "  Heat:  Enabled");
          ESP_LOGCONFIG(TAG, "  Relay: %u", heater_relay);
          ESP_LOGE_IF(TAG, (heater_relay != 1 and heater_relay != 2), "  Relay: %u", heater_relay);
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          ESP_LOGCONFIG(TAG, "  Dual:  Enabled");
          ESP_LOGCONFIG(TAG, "  Relay (cooler): %u", cooler_relay);
          ESP_LOGE_IF(TAG, (cooler_relay != 1 and cooler_relay != 2), "  Relay (cooler): %u", cooler_relay);
          ESP_LOGCONFIG(TAG, "  Relay (heater): %u", heater_relay);
          ESP_LOGE_IF(TAG, (heater_relay != 1 and heater_relay != 2), "  Relay (heater): %u", heater_relay);
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL

  - id: !extend init_hardware_climate
    then:
      - lambda: |-

  - id: !extend page_climate
    then:
      - if:
          condition:
            - lambda: return current_page_id == ${PAGE_CLIMATE_ID};
            - text_sensor.state:
                id: detailed_entity
                state: embedded_climate
          then:
            - lambda: |-
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Construct climate page with embedded climate");
                // Temperature conversion function (constexpr for compile-time optimization)
                auto celsius_to_fahrenheit = [](const float celsius) -> float {
                  return (celsius * 9.0f / 5.0f) + 32.0f;
                };

                static const std::string temp_units = "${temp_units}";
                static const bool temp_unit_fahrenheit = (temp_units == "째F" || temp_units == "F" ||
                                                          temp_units == "째f" || temp_units == "f");
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Temperature in Fahrenheit: %s", YESNO(temp_unit_fahrenheit));

                // Get climate traits
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Get climate traits");
                const ClimateTraits traits = thermostat_embedded->get_traits();

                // Set page label
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set page label");
                disp1->set_component_text("page_label", addon_climate_friendly_name.c_str());

                // Feed watchdog
                delay(${DELAY_DEFAULT});
                App.feed_wdt();

                // Extract temperature values (static since they don't change during runtime)
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Extract temperature values:");
                static const float temp_step = traits.get_visual_target_temperature_step();
                static const float temp_offset = traits.get_visual_min_temperature();
                static const float temp_max = traits.get_visual_max_temperature();
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_step: %f", temp_step);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_offset: %f", temp_offset);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_max: %f", temp_max);

                // Feed watchdog
                delay(${DELAY_DEFAULT});
                App.feed_wdt();

                // Calculate static values
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Calculate static values:");
                static float display_step, display_offset, total_steps;
                if (temp_unit_fahrenheit) {
                  display_step = std::ceil(temp_step * 1.8f);
                  display_offset = celsius_to_fahrenheit(temp_offset);
                  const float temp_max_f = celsius_to_fahrenheit(temp_max);
                  total_steps = (temp_max_f - display_offset) / display_step;
                } else {
                  display_step = temp_step;
                  display_offset = temp_offset;
                  total_steps = (temp_max - temp_offset) / temp_step;
                }
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  display_step: %f", display_step);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  display_offset: %f", display_offset);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  total_steps: %f", total_steps);

                // Feed watchdog
                delay(${DELAY_DEFAULT});
                App.feed_wdt();

                // Get dynamic temperature values
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Get dynamic temperature values:");
                static float temp_target;
                temp_target = thermostat_embedded->target_temperature;
                static float temp_target_high;
                temp_target_high = thermostat_embedded->target_temperature_high;
                static float temp_target_low;
                temp_target_low = thermostat_embedded->target_temperature_low;
                const float temp_current = thermostat_embedded->current_temperature;
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target: %f", temp_target);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_high: %f", temp_target_high);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_low: %f", temp_target_low);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_current: %f", temp_current);

                // Feed watchdog
                delay(${DELAY_DEFAULT});
                App.feed_wdt();

                // Convert dynamic values if using Fahrenheit
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Convert dynamic values if using Fahrenheit:");
                static float display_current;
                display_current = temp_current;
                if (temp_unit_fahrenheit) {
                  display_current = celsius_to_fahrenheit(temp_current);
                  temp_target = celsius_to_fahrenheit(temp_target);
                  temp_target_high = celsius_to_fahrenheit(temp_target_high);
                  temp_target_low = celsius_to_fahrenheit(temp_target_low);
                }
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  display_current: %f", display_current);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target: %f", temp_target);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_high: %f", temp_target_high);
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_low: %f", temp_target_low);

                // Feed watchdog
                delay(${DELAY_DEFAULT});
                App.feed_wdt();

                #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
                static const bool is_addon_climate_dual = true;
                #else
                static const bool is_addon_climate_dual = false;
                #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Is add-on Climate dual: %s", YESNO(is_addon_climate_dual));

                // Set vars for set_climate
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set vars for set_climate");

                set_climate_current_temp = display_current;
                set_climate_supported_features = 0;
                set_climate_target_temp = (is_addon_climate_dual ? -999 : temp_target);
                set_climate_target_temp_high = (is_addon_climate_dual ? temp_target_high : -999);
                set_climate_target_temp_low = (is_addon_climate_dual ? temp_target_low : -999);
                set_climate_temp_step = int(round(display_step*10));
                set_climate_total_steps = int(round(total_steps));
                set_climate_temp_offset = int(round(display_offset*10));
                set_climate_climate_icon = "";
                set_climate_embedded_climate = true;

            # Execute set_climate
            - delay: ${DELAY_DEFAULT}ms
            - lambda: ESP_LOGV("${TAG_ADDON_CLIMATE}", "Call set_climate");
            - script.execute: set_climate

            # Update target temp icon
            - delay: ${DELAY_DEFAULT}ms
            - lambda: ESP_LOGV("${TAG_ADDON_CLIMATE}", "Call update_climate_icon");
            - script.execute:
                id: update_climate_icon
                component: target_icon
                action: int(thermostat_embedded->action)
                mode: int(thermostat_embedded->mode)

            # Update buttons bar
            # Hide not supported hotspots
            - delay: ${DELAY_DEFAULT}ms
            - lambda: |-
                ESP_LOGV("${TAG_ADDON_CLIMATE}", "Update buttons bar");

                disp1->hide_component("button01");
                disp1->set_component_font_color("button01", 6339);

                #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
                disp1->show_component("button02");
                disp1->set_component_font_color("button02", (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT_COOL) ? 65535 : 48631);
                #else
                disp1->hide_component("button02");
                disp1->set_component_font_color("button02", (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT_COOL) ? 65535 : 6339);
                #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL

                #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) || defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
                disp1->show_component("button03");  // Heat
                disp1->set_component_font_color("button03", (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT) ? 64164 : 48631);
                #else
                disp1->hide_component("button03");  // Heat
                disp1->set_component_font_color("button03", (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT) ? 64164 : 6339);
                #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT || NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL

                #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) || defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
                disp1->show_component("button04");  // Cool
                disp1->set_component_font_color("button04", (thermostat_embedded->mode==climate::CLIMATE_MODE_COOL) ? 1055 : 48631);
                #else
                disp1->hide_component("button04");  // Cool
                disp1->set_component_font_color("button04", (thermostat_embedded->mode==climate::CLIMATE_MODE_COOL) ? 1055 : 6339);
                #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL || NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL

                disp1->hide_component("button05");
                disp1->set_component_font_color("button05", 6339);

                disp1->hide_component("button06");
                disp1->set_component_font_color("button06", 6339);

                disp1->show_component("button07");  // Off
                disp1->set_component_font_color("button07", (thermostat_embedded->mode==climate::CLIMATE_MODE_OFF) ? 10597 : 35921);

  - id: !extend page_home
    then:
      - if:
          condition:
            - lambda: return id(is_embedded_thermostat);
          then:
            - script.execute:
                id: update_climate_icon
                component: "home.chip_climate"
                action: int(thermostat_embedded->action)
                mode: int(thermostat_embedded->mode)
...
