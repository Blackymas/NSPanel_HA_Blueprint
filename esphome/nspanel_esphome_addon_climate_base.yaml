#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHome Add-on for Climate control - Shared - This will be called by heat/cool            #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
##### ATTENTION: This will add climate elements to the core system and requires the core part.  #####
#####################################################################################################
---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ##############################
  ### Local thermostat defaults ###
  # https://esphome.io/components/climate/thermostat.html
  heater_relay: "0"  # Select 1 for "Relay 1", 2 for "Relay 2" or "0" to a dummy switch/disabled
  cooler_relay: "0"  # Select 1 for "Relay 1", 2 for "Relay 2" or "0" to a dummy switch/disabled
  min_off_time: "300"
  min_run_time: "300"
  min_idle_time: "30"
  # https://esphome.io/components/climate/index.html#base-climate-configuration
  temp_min: "7"
  temp_max: "35"
  temp_step: "0.5"
  target_low: "18"
  target_high: "24"
  cool_deadband: "0.5"  # Temperature delta before engaging cooling
  cool_overrun: "0.5"   # Temperature delta before disengaging cooling
  heat_deadband: "0.5"  # Temperature delta before engaging heat
  heat_overrun: "0.5"   # Temperature delta before disengaging heat
  TAG_ADDON_CLIMATE: nspanel.addon.climate

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_BASE

climate:
  - platform: thermostat
    name: Thermostat
    id: thermostat_embedded
    sensor: temp_nspanel
    min_idle_time: ${min_idle_time}s
    visual:
      min_temperature: ${temp_min} ${temp_units}
      max_temperature: ${temp_max} ${temp_units}
      temperature_step:
        target_temperature: 0.5  # This is hard coded for now as ESPHome isn't supporting a substitution here. In contact with support.
        current_temperature: 0.1
    default_preset: "Off"
    on_boot_restore_from: memory
    startup_delay: true
    internal: false
    on_state:
      then:
        - lambda: |-
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Climate have a new state");
            if (!is_device_ready_for_tasks()) {
              ESP_LOGW("${TAG_ADDON_CLIMATE}", "Device not ready to work with the new state");
              return;
            }
            if (current_page_id == ${PAGE_CLIMATE_ID} and detailed_entity->state == "embedded_climate") {
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "Update page 'climate'");
              page_climate->execute();
            }
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Update page 'home'");
            page_home->execute();

switch:
  ##### PHYSICAL SWITCH 0 (Dummy) - Used when relay is not set #####
  - name: Relay 0 (dummy)
    platform: template
    id: relay_0
    lambda: !lambda return false;
    internal: true
    optimistic: true

script:
  - id: !extend action_component_text
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "addon_climate_friendly_name") {
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set addon_climate_friendly_name:");
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "  from: %s", addon_climate_friendly_name.c_str());
              ESP_LOGV("${TAG_ADDON_CLIMATE}", "  to: %s", txt.c_str());
              addon_climate_friendly_name = txt;
            }
          }

  - id: !extend change_climate_state
    then:
      - lambda: |-
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Add-on climate code starting");
          if (!embedded) {
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Not showing the embedded climate");
            return;
          }

          auto call = thermostat_embedded->make_call();
          float temperature;

          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Inform display that is showing embedded climate");
          disp1->set_component_value("climate.embedded", 1);

          if (key == "temperature") {
            temperature = stof(value) / 10;
            if (temp_unit_is_fahrenheit) {
              temperature = fahrenheit_to_celsius(temperature);
            }
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set target temperature to %f", temperature);
            call.set_target_temperature(temperature);
          } else if (key == "target_temp_high") {
            temperature = stof(value) / 10;
            if (temp_unit_is_fahrenheit) {
              temperature = fahrenheit_to_celsius(temperature);
            }
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set target temperature high to %f", temperature);
            call.set_target_temperature_high(temperature);
          } else if (key == "target_temp_low") {
            temperature = stof(value) / 10;
            if (temp_unit_is_fahrenheit) {
              temperature = fahrenheit_to_celsius(temperature);
            }
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set target temperature low to %f", temperature);
            call.set_target_temperature_low(temperature);
          } else if (key == "hvac_mode") {
            ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set 'hvac_mode' to '%s'", value.c_str());
            call.set_mode(value);
          }

          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Perform action");
          call.perform();
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Action done");

  - id: !extend dump_config
    then:
      - lambda: |-
          // Check if more than one or none of the climate options are defined
          #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT)
            #error "Invalid settings for add-on Climate. More than one option selected: Cool + Heat."
          #elif defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. More than one option selected: Cool + Dual."
          #elif defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. More than one option selected: Heat + Dual."
          #elif !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) && !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. No option selected between Cool, Heat or Dual."
          #endif
          const uint cooler_relay = ${cooler_relay};
          const uint heater_relay = ${heater_relay};
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "Add-on climate:");
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "  Cool:  Enabled");
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "  Relay: %u", cooler_relay);
          ESP_LOGE_IF("${TAG_ADDON_CLIMATE}", (cooler_relay != 1 and cooler_relay != 2), "  Relay: %u", cooler_relay);
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "  Heat:  Enabled");
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "  Relay: %u", heater_relay);
          ESP_LOGE_IF("${TAG_ADDON_CLIMATE}", (heater_relay != 1 and heater_relay != 2), "  Relay: %u", heater_relay);
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "  Dual:  Enabled");
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "  Relay (cooler): %u", cooler_relay);
          ESP_LOGE_IF("${TAG_ADDON_CLIMATE}", (cooler_relay != 1 and cooler_relay != 2), "  Relay (cooler): %u", cooler_relay);
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE}", "  Relay (heater): %u", heater_relay);
          ESP_LOGE_IF("${TAG_ADDON_CLIMATE}", (heater_relay != 1 and heater_relay != 2), "  Relay (heater): %u", heater_relay);
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL

  - id: !extend page_climate
    then:
      - lambda: |-
          if (current_page_id != ${PAGE_CLIMATE_ID}) {
            return;
          }
          if (not id(is_embedded_thermostat)) {
            return;
          }
          if (detailed_entity->state.empty()) {
            return;
          }
          if (detailed_entity->state != "embedded_climate") {
            return;
          }
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Construct climate page with embedded climate");

          // Get climate traits
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Get climate traits");
          const ClimateTraits traits = thermostat_embedded->get_traits();

          // Set page label
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set page label");
          disp1->set_component_text("page_label", addon_climate_friendly_name.c_str());

          // Feed watchdog
          delay(${DELAY_SHORT});
          App.feed_wdt();

          // Extract temperature values (static since they don't change during runtime)
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Extract temperature values:");
          static const float temp_step = traits.get_visual_target_temperature_step();
          static const float temp_offset = traits.get_visual_min_temperature();
          static const float temp_max = traits.get_visual_max_temperature();
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_step: %f", temp_step);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_offset: %f", temp_offset);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_max: %f", temp_max);

          // Feed watchdog
          delay(${DELAY_SHORT});
          App.feed_wdt();

          // Calculate static values
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Calculate static values:");
          static float display_step, display_offset, total_steps;
          if (temp_unit_is_fahrenheit) {
            display_step = std::ceil(temp_step * 1.8f);
            display_offset = celsius_to_fahrenheit(temp_offset);
            const float temp_max_f = celsius_to_fahrenheit(temp_max);
            total_steps = (temp_max_f - display_offset) / display_step;
          } else {
            display_step = temp_step;
            display_offset = temp_offset;
            total_steps = (temp_max - temp_offset) / temp_step;
          }
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  display_step: %f", display_step);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  display_offset: %f", display_offset);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  total_steps: %f", total_steps);

          // Feed watchdog
          delay(${DELAY_SHORT});
          App.feed_wdt();

          // Get dynamic temperature values
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Get dynamic temperature values:");
          static float temp_target;
          temp_target = thermostat_embedded->target_temperature;
          static float temp_target_high;
          temp_target_high = thermostat_embedded->target_temperature_high;
          static float temp_target_low;
          temp_target_low = thermostat_embedded->target_temperature_low;
          const float temp_current = thermostat_embedded->current_temperature;
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target: %f", temp_target);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_high: %f", temp_target_high);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_low: %f", temp_target_low);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_current: %f", temp_current);
          feed_wdt_delay(${DELAY_SHORT});

          // Convert dynamic values if using Fahrenheit
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Convert dynamic values if using Fahrenheit:");
          static float display_current;
          display_current = temp_current;
          if (temp_unit_is_fahrenheit) {
            display_current = celsius_to_fahrenheit(temp_current);
            temp_target = celsius_to_fahrenheit(temp_target);
            temp_target_high = celsius_to_fahrenheit(temp_target_high);
            temp_target_low = celsius_to_fahrenheit(temp_target_low);
          }
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  display_current: %f", display_current);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target: %f", temp_target);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_high: %f", temp_target_high);
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "  temp_target_low: %f", temp_target_low);
          feed_wdt_delay(${DELAY_SHORT});

          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          static const bool is_addon_climate_dual = true;
          #else
          static const bool is_addon_climate_dual = false;
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Is add-on Climate dual: %s", YESNO(is_addon_climate_dual));

          // Set vars for set_climate
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Set vars for set_climate");

          set_climate_current_temp = display_current;
          set_climate_supported_features = 0;
          set_climate_target_temp = (is_addon_climate_dual ? -999 : temp_target);
          set_climate_target_temp_high = (is_addon_climate_dual ? temp_target_high : -999);
          set_climate_target_temp_low = (is_addon_climate_dual ? temp_target_low : -999);
          set_climate_temp_step = int(round(display_step*10));
          set_climate_total_steps = int(round(total_steps));
          set_climate_temp_offset = int(round(display_offset*10));
          set_climate_climate_icon = "";
          set_climate_embedded_climate = true;
          feed_wdt_delay(${DELAY_SHORT});

          // Execute set_climate
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Call set_climate");
          set_climate->execute();

          // Update target temp icon
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Call update_climate_icon");
          update_climate_icon->execute("target_icon", int(thermostat_embedded->action), int(thermostat_embedded->mode));

          // Update buttons bar
          // Hide not supported hotspots
          ESP_LOGV("${TAG_ADDON_CLIMATE}", "Update buttons bar");

          disp1->hide_component("button01");
          disp1->set_component_font_color("button01", static_cast<uint16_t>(Colors::GRAY_DARK));

          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          disp1->show_component("button02");
          disp1->set_component_font_color("button02", static_cast<uint16_t>(
            (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT_COOL) ? Colors::WHITE : Colors::GRAY_LIGHT));
          #else
          disp1->hide_component("button02");
          disp1->set_component_font_color("button02", static_cast<uint16_t>(
            (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT_COOL) ? Colors::WHITE : Colors::GRAY_DARK));
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          feed_wdt_delay(${DELAY_SHORT});

          #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) || defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
          disp1->show_component("button03");  // Heat
          disp1->set_component_font_color("button03", static_cast<uint16_t>(
            (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT) ? Colors::DEEP_ORANGE : Colors::GRAY_LIGHT));
          #else
          disp1->hide_component("button03");  // Heat
          disp1->set_component_font_color("button03", static_cast<uint16_t>(
            (thermostat_embedded->mode==climate::CLIMATE_MODE_HEAT) ? Colors::DEEP_ORANGE : Colors::GRAY_DARK));
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT || NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          feed_wdt_delay(${DELAY_SHORT});

          #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) || defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
          disp1->show_component("button04");  // Cool
          disp1->set_component_font_color("button04", static_cast<uint16_t>(
            (thermostat_embedded->mode==climate::CLIMATE_MODE_COOL) ? Colors::BLUE : Colors::GRAY_LIGHT));
          #else
          disp1->hide_component("button04");  // Cool
          disp1->set_component_font_color("button04", static_cast<uint16_t>(
            (thermostat_embedded->mode==climate::CLIMATE_MODE_COOL) ? Colors::BLUE : Colors::GRAY_DARK));
          #endif  // NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL || NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          feed_wdt_delay(${DELAY_SHORT});

          disp1->hide_component("button05");
          disp1->set_component_font_color("button05", static_cast<uint16_t>(Colors::GRAY_DARK));
          feed_wdt_delay(${DELAY_SHORT});

          disp1->hide_component("button06");
          disp1->set_component_font_color("button06", static_cast<uint16_t>(Colors::GRAY_DARK));
          feed_wdt_delay(${DELAY_SHORT});

          disp1->show_component("button07");  // Off
          disp1->set_component_font_color("button07", static_cast<uint16_t>(
                                                                  (thermostat_embedded->mode==climate::CLIMATE_MODE_OFF)
                                                                  ? Colors::BLUE_INDIGO : Colors::GREY));

  - id: !extend page_home
    then:
      - lambda: |-
          if (id(is_embedded_thermostat)) {
            update_climate_icon->execute("home.chip_climate", int(thermostat_embedded->action), int(thermostat_embedded->mode));
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          update_climate_icon->stop();

  - id: update_climate_icon
    mode: single
    parameters:
      component: string
      action: uint
      mode: uint
    then:
      - lambda: |-
          ESP_LOGV("${TAG_CORE}", "Update climate icon");
          ESP_LOGV("${TAG_CORE}", "  component: %s", component.c_str());
          ESP_LOGV("${TAG_CORE}", "  action: %d", action);
          ESP_LOGV("${TAG_CORE}", "  mode: %d", mode);

          const char* icon = Icons::NONE;
          uint16_t color = Colors::BLACK;

          if (action == nspanel_ha_blueprint::CLIMATE_ACTION_OFF) {
            // Handle OFF action with different modes
            if (mode <= nspanel_ha_blueprint::CLIMATE_MODE_AUTO) {
              icon = climate_off_mode_icons[mode].icon;
              color = climate_off_mode_icons[mode].color;
            }
          } else if (action >= nspanel_ha_blueprint::CLIMATE_ACTION_COOLING
                  && action <= nspanel_ha_blueprint::CLIMATE_ACTION_FAN) {
            // Handle active action states
            icon = climate_action_icons[action].icon;
            color = climate_action_icons[action].color;
          }

          // Apply the icon and color to the display component
          disp1->set_component_text(component.c_str(), icon);
          disp1->set_component_font_color(component.c_str(), static_cast<uint16_t>(color));
...
