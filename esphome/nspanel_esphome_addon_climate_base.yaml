#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHome Add-on for Climate control - Shared - This will be called by heat/cool            #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
##### ATTENTION: This will add climate elements to the core system and requires the core part.  #####
#####################################################################################################
---
substitutions:
  ### Local thermostat defaults ###
  # https://esphome.io/components/climate/thermostat.html
  heater_relay: "0"  # Select 1 for "Relay 1", 2 for "Relay 2" or "0" to a dummy switch/disabled
  cooler_relay: "0"  # Select 1 for "Relay 1", 2 for "Relay 2" or "0" to a dummy switch/disabled
  min_off_time: "300"
  min_run_time: "300"
  min_idle_time: "30"
  # https://esphome.io/components/climate/index.html#base-climate-configuration
  temp_min: "7"
  temp_max: "35"
  temp_step: "0.5"
  target_low: "18"
  target_high: "24"
  cool_deadband: "0.5"  # Temperature delta before engaging cooling
  cool_overrun: "0.5"   # Temperature delta before disengaging cooling
  heat_deadband: "0.5"  # Temperature delta before engaging heat
  heat_overrun: "0.5"   # Temperature delta before disengaging heat
  BOOT_STEP_ADDON_CLIMATE: '32'
  TAG_ADDON_CLIMATE_BASE: nspanel_ha_blueprint.addon.climate.base

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_BASE

climate:
  - platform: thermostat
    name: Thermostat
    id: thermostat_embedded
    sensor: temp_nspanel
    min_idle_time: ${min_idle_time}s
    visual:
      min_temperature: ${temp_min} ${temp_units}
      max_temperature: ${temp_max} ${temp_units}
      temperature_step:
        # This is hard coded for now as ESPHome isn't supporting a substitution here. In contact with support.
        target_temperature: 0.5
        current_temperature: 0.1
    default_preset: "Off"
    on_boot_restore_from: memory
    internal: false
    on_state:
      then:
        - script.execute: page_climate
        - script.execute: page_home

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (
                  page_id == 1  // Page Home
                  and id(is_climate)
                  and (
                    component_id == 4      // indr_temp
                    or component_id == 27  // indr_temp_icon
                  )
                ) {
              detailed_entity->publish_state((id(is_embedded_thermostat)) ? "embedded_climate" : "");
              set_component_value->execute(${PAGE_ID_CLIMATE}, "embedded", id(is_embedded_thermostat) ? 1 : 0);
            }

globals:
  - id: is_embedded_thermostat  # Is embedded thermostat set as main climate entity?
    type: bool
    restore_value: true
    initial_value: 'false'

switch:
  ##### PHYSICAL SWITCH 0 (Dummy) - Used when relay is not set #####
  - name: Relay 0 (dummy)
    platform: template
    id: relay_0
    lambda: return false;
    internal: true
    optimistic: true

script:
  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_ADDON_CLIMATE}, "ADDON_CLIMATE", "Add-on Climate");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          nspanel_ha_blueprint::chip_climate = get_component(${PAGE_ID_HOME}, "chip_climate");

  - id: !extend change_climate_state
    then:
      - lambda: |-
          if (embedded) {
            set_component_value->execute(${PAGE_ID_CLIMATE}, "embedded", 1);
            nspanel_ha_blueprint::is_addon_climate_visible = true;

            auto call = thermostat_embedded->make_call();
            if (key == "temperature") {
              call.set_target_temperature(id(temperature_is_celsius) ?
                                          (stof(value) / 10) :
                                          (((stof(value) / 10) - 32.0) * 5.0 / 9.0));
            } else if (key == "target_temp_high") {
              call.set_target_temperature_high(id(temperature_is_celsius) ?
                                              (stof(value) / 10) :
                                              (((stof(value) / 10) - 32.0) * 5.0 / 9.0));
            } else if (key == "target_temp_low") {
              call.set_target_temperature_low(id(temperature_is_celsius) ?
                                              (stof(value) / 10) :
                                              (((stof(value) / 10) - 32.0) * 5.0 / 9.0));
            } else if (key == "hvac_mode") {
              call.set_mode(value);
            }
            call.perform();
          }

  - id: !extend dump_config
    then:
      - lambda: |-
          // Check for requirements
          #if !defined(NSPANEL_HA_BLUEPRINT_STANDARD_HW_RELAYS)
            #error "The package nspanel_esphome_standard_hw_relays.yaml is required."
          #endif
          #if !defined(NSPANEL_HA_BLUEPRINT_STANDARD_HW_TEMPERATURE)
            #error "The package nspanel_esphome_standard_hw_temperature.yaml is required."
          #endif
          #if !defined(NSPANEL_HA_BLUEPRINT_STANDARD_PAGE_CLIMATE)
            #error "The package nspanel_esphome_standard_page_climate.yaml is required."
          #endif
          // Check if more than one or none of the climate options are defined
          #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT)
            #error "Invalid settings for add-on Climate. More than one option selected: Cool + Heat."
          #elif defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. More than one option selected: Cool + Dual."
          #elif defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) && defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. More than one option selected: Heat + Dual."
          #elif !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL) && \
                !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT) && \
                !defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            #error "Invalid settings for add-on Climate. No option selected between Cool, Heat or Dual."
          #endif
          const uint cooler_relay = ${cooler_relay};
          const uint heater_relay = ${heater_relay};
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "Add-on climate:");
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  Cool:  enabled");
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  Relay: %u", cooler_relay);
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  Heat:  enabled");
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  Relay: %u", heater_relay);
          #endif
          #ifdef NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  Dual:  enabled");
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  Cooler relay: %u", cooler_relay);
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  Heater relay: %u", heater_relay);
          if (cooler_relay == heater_relay)
            ESP_LOGE("${TAG_ADDON_CLIMATE_BASE}", "  Relay conflict");
          #endif

  - id: !extend dump_config_packages  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          ESP_LOGCONFIG("${TAG_ADDON_CLIMATE_BASE}", "  - Add-on - Climate - Base");

  - id: !extend page_climate
    then:
      - lambda: |-
          nspanel_ha_blueprint::is_addon_climate_visible = (current_page_id == ${PAGE_ID_CLIMATE}
                                          and detailed_entity->state == "embedded_climate");
          if (nspanel_ha_blueprint::is_addon_climate_visible) {
            display_component_update_text->execute(get_component(${PAGE_ID_CLIMATE}, "page_label"),
                                                    nspanel_ha_blueprint::addon_climate_friendly_name.c_str());
            ClimateTraits traits = thermostat_embedded->get_traits();

            float temp_step = traits.get_visual_target_temperature_step();
            float temp_offset = traits.get_visual_min_temperature();
            float temp_max = traits.get_visual_max_temperature();
            float temp_target = thermostat_embedded->target_temperature;
            float temp_target_high = thermostat_embedded->target_temperature_high;
            float temp_target_low = thermostat_embedded->target_temperature_low;
            float temp_current = thermostat_embedded->current_temperature;
            if (!id(temperature_is_celsius)) {
              //temp_step = (temp_step * 9 / 5) + 32;
              temp_step = std::ceil(temp_step * 1.8);
              temp_offset = (temp_offset * 9 / 5) + 32;
              temp_max = (temp_max * 9 / 5) + 32;
              temp_target = (temp_target * 9 / 5) + 32;
              temp_target_high = (temp_target_high * 9 / 5) + 32;
              temp_target_low = (temp_target_low * 9 / 5) + 32;
              temp_current = (temp_current * 9 / 5) + 32;
            }
            float total_steps = (temp_max-temp_offset)/temp_step;
            set_climate->execute (
              temp_current,                // current_temp
              0,                           // supported_features
            #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
              -999,                        // target_temp
              temp_target_high,            // target_temp_high
              temp_target_low,             // target_temp_low
            #else
              temp_target,                 // target_temp
              -999,                        // target_temp_high
              -999,                        // target_temp_low
            #endif
              int(round(temp_step*10)),    // temp_step
              int(round(total_steps)),     // total_steps
              int(round(temp_offset*10)),  // temp_offset
              "",                          // climate_icon
              true                         // embedded_climate
            );

            update_climate_icon->execute(get_component(${PAGE_ID_CLIMATE}, "target_icon"),
                                                  int(thermostat_embedded->action),
                                                  int(thermostat_embedded->mode));
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button01", false);
            #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL)
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button02", true);
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button02",
                                              thermostat_embedded->mode == climate::CLIMATE_MODE_HEAT_COOL ?
                                              65535 : 48631);
            #else
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button02", false);
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button02",
                                              thermostat_embedded->mode == climate::CLIMATE_MODE_HEAT_COOL ?
                                              65535 : 6339);
            #endif
            #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL) or defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_HEAT)
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button03", true);  // Heat
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button03",
                                              thermostat_embedded->mode == climate::CLIMATE_MODE_HEAT ?
                                              64164 : 48631);
            #else
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button03", false);  // Heat
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button03",
                                              thermostat_embedded->mode == climate::CLIMATE_MODE_HEAT ?
                                              64164 : 6339);
            #endif
            #if defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_DUAL) or defined(NSPANEL_HA_BLUEPRINT_ADDON_CLIMATE_COOL)
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button04", true);  // Cool
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button04",
                                              thermostat_embedded->mode == climate::CLIMATE_MODE_COOL ?
                                              1055 : 48631);
            #else
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button04", false);  // Cool
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button04",
                                              thermostat_embedded->mode == climate::CLIMATE_MODE_COOL ?
                                              1055 : 6339);
            #endif
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button05", false);
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button06", false);
            set_component_visibility->execute(${PAGE_ID_CLIMATE}, "button07", true);  // Off
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button01", 6339);
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button05", 6339);
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button06", 6339);
            set_component_font_color->execute(${PAGE_ID_CLIMATE}, "button07",
                                              thermostat_embedded->mode == climate::CLIMATE_MODE_OFF ?
                                              10597 : 35921);
          }

  - id: !extend page_home
    then:
      - lambda: |-
          if (id(is_embedded_thermostat))
            update_climate_icon->execute(get_component(${PAGE_ID_HOME}, "chip_climate"),
                                          int(thermostat_embedded->action),
                                          int(thermostat_embedded->mode));

  - id: !extend set_climate
    then:
      - lambda: |-
          if (current_page_id == ${PAGE_ID_CLIMATE})
            nspanel_ha_blueprint::is_addon_climate_visible = embedded_climate;

  - id: !extend set_var_bool
    then:
      - lambda: |-
          if (component == "is_embedded_thermostat")
            id(is_embedded_thermostat) = val;

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "embedded_climate_friendly_name")  // Friendly name for the climate control feature
            nspanel_ha_blueprint::addon_climate_friendly_name = val;

  - id: !extend stop_all
    then:
      - script.stop: update_climate_icon

  - id: update_climate_icon
    mode: restart
    parameters:
      target_icon: DisplayComponent*
      action: uint
      mode: uint
    then:
      - lambda: |-
          std::string icon;
          int16_t icon_color = -1;
          switch (action) {
            case 0: //CLIMATE_ACTION_OFF
              icon_color = 35921; // grey (off)
              switch (mode) {
                case 0: //CLIMATE_MODE_OFF
                  icon = "\uFFFF";  // (E424) Don't show icon when off
                  break;
                case 1: //CLIMATE_MODE_HEAT_COOL
                  icon = "\uE069";  // mdi:autorenew
                  break;
                case 2: //CLIMATE_MODE_COOL
                  icon = "\uE716";  // mdi:snowflake
                  break;
                case 3: //CLIMATE_MODE_HEAT
                  icon = "\uE237";  // mdi:fire
                  break;
                case 4: //CLIMATE_MODE_FAN_ONLY
                  icon = "\uE20F";  // mdi:fan
                  break;
                case 5: //CLIMATE_MODE_DRY
                  icon = "\uE58D";  // mdi:water-percent
                  break;
                case 6: //CLIMATE_MODE_AUTO
                  icon = "\uF8F1";  // mdi:refresh-auto
                  break;
              }
              break;
            case 2: //CLIMATE_ACTION_COOLING
              icon = "\uE716";  // mdi:snowflake
              icon_color = 1055; // blue
              break;
            case 3: //CLIMATE_ACTION_HEATING
              icon = "\uE237";  // mdi:fire
              icon_color = 64164; // deep-orange
              break;
            case 4: //CLIMATE_ACTION_IDLE
              icon = "\uE50E";  // mdi:thermometer
              icon_color = 35921; // grey (off)
              break;
            case 5: //CLIMATE_ACTION_DRYING
              icon = "\uE58D";  // mdi:water-percent
              icon_color = 64704; // orange
              break;
            case 6: //CLIMATE_ACTION_FAN
              icon = "\uE20F";  // mdi:fan
              icon_color = 1530; // cyan
              break;
            }
          if (!icon.empty() and target_icon->text != icon) {
            copyStringToCharArray(target_icon->text, icon);
            if (current_page_id == target_icon->page_id)
              display_component_send_text->execute(target_icon);
          }
          if (icon_color>=0 and target_icon->color != icon_color) {
            target_icon->color = static_cast<uint16_t>(icon_color);
            if (current_page_id == target_icon->page_id)
              display_component_send_color->execute(target_icon);
          }
...
