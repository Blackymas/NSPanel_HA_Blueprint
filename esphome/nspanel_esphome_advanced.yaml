#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME ADVANCED                                                                          #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
##### ATTENTION: This will add advanced elements to the core system and requires the core part. #####
#####################################################################################################
---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ap_password: ${wifi_password}
  web_password: ${wifi_password}
  ##############################
  TAG_ADVANCED: nspanel_ha_blueprint.advanced

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_ADVANCED

button:
  - name: Exit reparse
    platform: template
    icon: mdi:file-sync
    id: tft_reparse_off
    entity_category: config
    internal: false
    disabled_by_default: true
    on_press:
      then:
        - logger.log: "Button pressed: Exit reparse"
        - script.execute: exit_reparse

  ###### Power cycle Nextion Display ######
  - id: screen_power_cycle
    name: Nextion display - Power cycle
    platform: template
    internal: false
    disabled_by_default: true
    icon: mdi:power-cycle
    entity_category: diagnostic
    on_press:
      then:
        - switch.turn_off: screen_power
        - delay: 1s
        - switch.turn_on: screen_power

captive_portal:
  id: ap_captive_portal

script:
  - id: !extend dump_config_packages  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          ESP_LOGI("${TAG_ADVANCED}", "  - Advanced");

  - id: exit_reparse
    mode: restart
    then:
      - lambda: |-
          ESP_LOGI("${TAG_ADVANCED}", "Exit reparse");
      - uart.write:
          id: tf_uart
          data: "DRAKJHSUYDGBNCJHGJKSHBDN"
      - uart.write:
          id: tf_uart
          data: [0xFF, 0xFF, 0xFF]

  - id: !extend stop_all
    then:
      - script.stop: exit_reparse

sensor:
  ##### Uptime Sensors #####
  - name: Uptime seconds
    id: uptime_sec
    platform: uptime
    internal: true

  - name: API uptime
    id: api_timestamp
    platform: template
    lambda: 'return id(time_provider).now().timestamp;'
    internal: false
    device_class: timestamp
    entity_category: diagnostic
    accuracy_decimals: 0
    update_interval: never

  - name: Device uptime
    id: device_timestamp
    platform: template
    lambda: 'return (id(time_provider).now().timestamp - id(uptime_sec).state);'
    internal: false
    device_class: timestamp
    entity_category: diagnostic
    accuracy_decimals: 0
    update_interval: never

text_sensor:
  ##### ESPhome version used to compile the app #####
  - name: ESPhome Compiler
    platform: version
    disabled_by_default: true
    internal: false
    icon: mdi:tag-text-outline

  - platform: wifi_info
    ip_address:
      name: IP
      disabled_by_default: true
      id: ip_address
    ssid:
      name: SSID
      disabled_by_default: true
    bssid:
      name: BSSID
      disabled_by_default: true

time:
  - id: !extend time_provider
    on_time_sync:
      then:
        - component.update: api_timestamp
        - component.update: device_timestamp

web_server:
  id: web_server_std
  port: 80
  auth:
    username: admin
    password: ${web_password}

wifi:
  ap:
    ssid: "${name}"
    password: ${ap_password}
...
