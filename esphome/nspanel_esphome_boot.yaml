#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - BOOT                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ##############################
  BOOT_STEP_BOOT: 1
  TAG_BOOT: nspanel.boot

display:
  - id: !extend disp1
    on_setup:
      then:
        - script.execute: watchdog_round

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_BOOT

script:
  - id: boot
    mode: single
    then:  # Other packages will subscribe themselves to this to run after critical components and early routines
      - lambda: |-
          ESP_LOGI("TAG_BOOT", "Starting boot sequence");
          blueprint_status_flags.reset();
          wait_to_be_ready->execute();
          boot_preparation->execute();
          boot_critical_components->execute();
      - script.wait: boot_critical_components
      - lambda: boot_early_routines->execute();
      - script.wait: boot_early_routines

      - delay: 1s
      # This should be moved somewhere else
      - lambda: |-
          boot_log->execute("Boot", "Starting sequence");
          boot_progress->execute(0);
          boot_log->execute("Boot", "Waiting for Wi-Fi");
          wait_for_wifi->execute();
      - script.wait: wait_for_wifi

      - delay: ${DELAY_DEFAULT}ms
      - if:
          condition:
            - lambda: |-
                return !system_flags.wifi_ready;
          then:
            - lambda: |-
                boot_log->execute("Boot", "Wi-Fi not available");
          else:  # Wi-Fi connected
            - lambda: |-
                boot_log->execute("Boot", "Wi-Fi connected");
                boot_progress->execute(3);
                page_boot_show_ip->execute();

      - lambda: wait_for_api->execute();
      - script.wait: wait_for_api
      - lambda: |-
          boot_progress->execute(4);
          if (system_flags.api_ready) {
            boot_log->execute("Boot", "API connected");
          } else {
            boot_log->execute("Boot", "API not available");
          }

          // Display settings
          boot_log->execute("Boot", "Sending display settings");
          disp1->send_command_printf("brightness=%i", int(display_brightness->state));
          disp1->set_component_value("settings.brightslider", int(display_brightness->state));
          feed_wdt_delay(${DELAY_DEFAULT});
          disp1->send_command_printf("brightness_dim=%i", int(display_dim_brightness->state));
          disp1->set_component_value("settings.dimslider", int(display_dim_brightness->state));
          feed_wdt_delay(${DELAY_DEFAULT});
          disp1->send_command_printf("brightness_sleep=%i", int(display_sleep_brightness->state));
          disp1->send_command_printf("wakeup_page_id=%" PRIu8, get_page_id(wakeup_page_name->state.c_str()));
          boot_progress->execute(5);
          feed_wdt_delay(${DELAY_DEFAULT});

          // Publish Nextion state
          boot_log->execute("Boot", "Publish Nextion state");
          nextion_init->publish_state(disp1->is_setup());
          feed_wdt_delay(${DELAY_DEFAULT});
          boot_progress->execute(6);

      # Wait for a response from the blueprint
      - delay: ${DELAY_DEFAULT}ms
      - if:
          condition:
            - lambda: return not system_flags.blueprint_ready;
          then:
            - lambda: |-
                boot_request_blueprint_settings->execute("start");
                wait_for_blueprint->execute();
            - script.wait: wait_for_blueprint
      - lambda: |-
          if (not system_flags.blueprint_ready) {
            boot_log->execute("Boot", "Blueprint not available");
          }
          boot_progress->execute(7);
          feed_wdt_delay(${DELAY_DEFAULT});

          // Setup Home page
          boot_log->execute("Boot", "Set Home page elements");

          // Refresh relay chips with correct state-based colors after blueprint settings are received
          refresh_relays->execute(3);
          feed_wdt_delay(${DELAY_DEFAULT});

          // Chips icon size
          for (uint8_t i = 1; i <= 7; ++i) {
            disp1->send_command_printf("home.chip%02d.font=%i", i, id(home_chip_font_id));
            feed_wdt_delay(${DELAY_SHORT});
          }
          feed_wdt_delay(${DELAY_DEFAULT});

          // Custom buttons icon size
          for (uint8_t i = 1; i <= 7; ++i) {
            disp1->send_command_printf("home.button%02d.font=%i", i, id(home_custom_buttons_font_id));
            feed_wdt_delay(${DELAY_SHORT});
          }
          feed_wdt_delay(${DELAY_DEFAULT});

          // Other components icons size and color
          disp1->set_component_font("home.bt_notific", id(home_custom_buttons_font_id));
          disp1->set_component_font("home.bt_qrcode", id(home_custom_buttons_font_id));
          disp1->set_component_font("home.bt_entities", id(home_custom_buttons_font_id));
          disp1->set_component_font("home.wifi_icon", id(home_chip_font_id));
          feed_wdt_delay(${DELAY_DEFAULT});

          // Set relay chips to invisible initially (will be updated by refresh_relays when home page loads)
          disp1->set_component_font_color("home.chip_relay1", Colors::BLACK);
          disp1->set_component_font_color("home.chip_relay2", Colors::BLACK);
          feed_wdt_delay(${DELAY_DEFAULT});

          // Bluetooth icon
          #ifdef USE_BLUETOOTH
          disp1->set_component_text("home.bt_icon", "\uE0AE");
          #else
          disp1->set_component_text("home.bt_icon", "");
          #endif
          feed_wdt_delay(${DELAY_DEFAULT});

          // Wrap-up
          boot_progress->execute(8);
          feed_wdt_delay(${DELAY_DEFAULT});
          boot_log->execute("Boot", "Wait to finish");
          feed_wdt_delay(${DELAY_DEFAULT});
          wait_for_wifi->execute();
          feed_wdt_delay(${DELAY_DEFAULT});
          wait_for_api->execute();
          feed_wdt_delay(${DELAY_DEFAULT});
          wait_for_blueprint->execute();
          feed_wdt_delay(${DELAY_DEFAULT});
      - script.wait: wait_for_wifi
      - script.wait: wait_for_api
      - script.wait: wait_for_blueprint
      - script.wait: wait_for_version_tft

      - lambda: |-
          boot_progress->execute(10);
          feed_wdt_delay(${DELAY_DEFAULT});
          set_brightness->execute(display_brightness->state);
          boot_log->execute("Boot", "Jump to wake-up page");
          feed_wdt_delay(${DELAY_DEFAULT});
          wakeup->execute(true);

  - id: boot_critical_components
    mode: single
    then:  # Critical components should subscribe themselves to this
      - lambda: |-
          ESP_LOGI("${TAG_BOOT}", "Starting boot critical components sequence");

  - id: boot_early_routines
    mode: single
    then:  # Critical components should subscribe themselves to this
      - lambda: |-
          ESP_LOGI("${TAG_BOOT}", "Starting boot early routines sequence");

  - id: boot_log
    mode: queued
    max_runs: 3
    parameters:
      category: string
      log_message: string
    then:
      - lambda: |-
          ESP_LOGD("${TAG_BOOT}", "%s: %s", category.c_str(), log_message.c_str());
      # Extended by:
      # - page_boot

  - id: boot_preparation
    mode: single
    then:
      - lambda: |-
          ESP_LOGI("${TAG_BOOT}", "Starting boot preparation sequence");

  - id: boot_progress
    mode: restart
    parameters:
      step: uint
    then:
      - lambda: |-
          if (step >= 10) {
            ESP_LOGD("${TAG_BOOT}", "Progress: Completed");
            disp1->set_component_value("boot.progress", 100);
            system_flags.boot_completed = true;
          } else {
            ESP_LOGD("${TAG_BOOT}", "Progress: %.1f%%", blueprint_status_flags.get_completion_percentage());
            disp1->set_component_value("boot.progress", step*10);
          }

  - id: boot_request_blueprint_settings
    mode: single
    parameters:
      step: string
    then:
      - lambda: |-
          if (not system_flags.blueprint_ready) {
            ESP_LOGD("${TAG_BOOT}", "Request blueprint settings");
            fire_ha_event("boot", {{"step", step.c_str()}});
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          boot->stop();
          boot_critical_components->stop();
          boot_early_routines->stop();
          boot_log->stop();
          boot_preparation->stop();
          boot_progress->stop();
          boot_request_blueprint_settings->stop();
          wait_for_boot_completed->stop();

  - id: wait_for_boot_completed
    mode: single
    then:
      - repeat:
          count: 300  # seconds
          then:
            - lambda: |-
                if (system_flags.wifi_ready) wait_for_wifi->stop();
                if (iteration % 5 == 1) boot_log->execute("Boot", "Waiting for Wi-Fi...");
            - delay: 1s

  - id: !extend watchdog_round
    then:
      - lambda: |-
          boot_request_blueprint_settings->execute("timeout");
          if (not system_flags.boot_completed and not boot->is_running()) {
            boot->execute();
          }
...
