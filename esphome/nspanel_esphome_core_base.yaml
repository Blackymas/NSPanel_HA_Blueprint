#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - Base                                                                       #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  ota_password: ${wifi_password}
  project_tag: nspanel_ha_blueprint
  ##############################
  BOOT_STEP_BASE: '0'
  TAG_CORE_BASE: core_base

button:
  - id: nspanel_factory_reset  # Factory Reset button - Used to clean values from flash
    name: Factory reset
    platform: factory_reset
    internal: false
    disabled_by_default: true
    icon: mdi:restart-alert

  - id: restart_nspanel  # Reboot ESP32
    name: Restart
    platform: restart

esp32:
  board: esp32dev
  flash_size: 4MB
  framework:
    type: esp-idf

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: NSPanel HA Blueprint
  project:
    name: Blackymas.NSPanel_HA_Blueprint
    version: ${version}
  platformio_options:
    build_flags:
      - -Wno-missing-field-initializers
      - -D NSPANEL_HA_BLUEPRINT_CORE_BASE
  min_version: 2025.5.0

external_components:
  - source:
      type: git
      url: https://github.com/Blackymas/NSPanel_HA_Blueprint
      ref: v${version}
    components:
      - nspanel_ha_blueprint
  - source:  # Remove this when PR esphome/esphome#8988 is merged
      type: git
      url: https://github.com/esphome/esphome
      ref: 2025.4.2
    components:
      - logger

globals:
  - id: is_safe_mode
    type: bool
    restore_value: false
    initial_value: 'false'

logger:
  id: logger_std
  baud_rate: 0  # Disable serial logger to save some memory and CPU
  level: DEBUG
  logs:
    esp32.preferences: INFO
    esp-idf: INFO
    binary_sensor: INFO
    nspanel_ha_blueprint: INFO
    script: INFO
    sensor: INFO
    switch: INFO
    text_sensor: INFO

nspanel_ha_blueprint:  # Adds custom library for NSPanel HA Blueprint project

ota:
  - id: ota_std
    platform: esphome
    password: ${ota_password}
    on_state_change:
      then:
        - lambda: |-
            if (state == ota::OTA_STARTED) {
              goto_page_id->execute(${PAGE_ID_BOOT}, true);
              current_page_id = ${PAGE_ID_BOOT};
              disp1->set_component_text("initializing", "Flashing");
              set_component_value->execute(${PAGE_ID_BOOT}, "progress", 0);
              page_boot_log->execute("OTA", "Started");
            } else if (state == ota::OTA_IN_PROGRESS) {
              disp1->send_command("progress.val+=10");
              page_boot_log->execute("OTA", "In progress");
            } else if (state == ota::OTA_COMPLETED) {
              set_component_value->execute(${PAGE_ID_BOOT}, "progress", 100);
              page_boot_log->execute("OTA", "Completed");
            } else if (state == ota::OTA_ERROR)
              page_boot_log->execute("OTA", "Error");

safe_mode:
  boot_is_good_after: 5min
  num_attempts: 5

script:
  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_BASE}, "BASE", "Base");

  - id: !extend boot_sequence
    then:
      - lambda: |-
          boot_progress->execute(${BOOT_STEP_BASE});

  - id: dump_config
    mode: restart
    then:
      - delay: 90s
      - script.execute: dump_config_packages

  - id: dump_config_packages
    mode: restart
    then:
      - lambda: |-
          ESP_LOGI("${TAG_CORE_BASE}", "Packages:");
          ESP_LOGI("${TAG_CORE_BASE}", "  - Core");
          #if defined(USE_ESP32_BLE_SERVER) || \
              defined(USE_ESP32_BLE_CLIENT) || \
              defined(USE_BLUETOOTH_PROXY) || \
              defined(USE_CAPTIVE_PORTAL) || \
              defined(USE_IMPROV) || \
              defined(USE_WEBSERVER)
          ESP_LOGI("${TAG_CORE_BASE}", "ESPHome components:");
          #ifdef USE_ESP32_BLE_SERVER
          ESP_LOGI("${TAG_CORE_BASE}", "  - BLE server");
          #endif
          #ifdef USE_ESP32_BLE_CLIENT
          ESP_LOGI("${TAG_CORE_BASE}", "  - BLE tracker");
          #endif
          #ifdef USE_BLUETOOTH_PROXY
          ESP_LOGI("${TAG_CORE_BASE}", "  - Bluetooth proxy");
          #endif
          #ifdef USE_CAPTIVE_PORTAL
          ESP_LOGI("${TAG_CORE_BASE}", "  - Captive portal");
          #endif
          #ifdef USE_IMPROV
          ESP_LOGI("${TAG_CORE_BASE}", "  - Improv (BLE)");
          #endif
          #ifdef USE_WEBSERVER
          ESP_LOGI("${TAG_CORE_BASE}", "  - Web server");
          #endif
          #endif
      # Extended by:
      #   - nspanel_esphome_advanced.yaml
      #   - nspanel_esphome_addon_bluetooth_proxy.yaml
      #   - nspanel_esphome_addon_climate_base.yaml
      #   - nspanel_esphome_addon_climate_cool.yaml
      #   - nspanel_esphome_addon_climate_dual.yaml
      #   - nspanel_esphome_addon_climate_heat.yaml
      #   - nspanel_esphome_addon_cover.yaml
      #   - nspanel_esphome_addon_upload_tft.yaml
      #   - nspanel_esphome_prebuild.yaml
      #   - wall_display.yaml

  - id: stop_all
    mode: restart
    then:
      - lambda: |-
          dump_config->stop();
          time_watchdog->stop();

  - id: time_watchdog  # The name `watchdog` is reserved
    mode: restart
    then:
      - lambda: |-
          if (!api_server->is_connected() and !is_page_in_group(NON_API_ID_PAGE_MASK)) {
            ESP_LOGW("${TAG_CORE_BASE}", "API disconnected - Fall back to Home");
            goto_page_id->execute(${PAGE_ID_HOME}, false);
            reset_boot_steps();
          }
      # Extended by:
      #   - nspanel_esphome_core_hw_display_timers.yaml
      #   - nspanel_esphome_core_hw_wifi.yaml

text_sensor:
  - id: detailed_entity  # Entity Id of the entity displayed on the detailed pages
    name: Detailed Entity
    platform: template
    icon: mdi:tablet-dashboard
    internal: false
    disabled_by_default: false
    on_value:
      then:
        - if:
            condition:
              - lambda: return not x.empty();
            then:
              - lambda: |-
                  ESP_LOGI("${TAG_CORE_BASE}", "Entity: %s", x.c_str());

time:
  - id: !extend time_provider
    on_time:
      - seconds: 30  # Watchdog - Every minute, at second 30
        then:
          - script.execute: time_watchdog

      - minutes: /10
        seconds: 5
        then:
          - script.execute: dump_config
...
