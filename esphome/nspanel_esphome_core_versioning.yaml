#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - VERSIONING                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  ##### DON'T CHANGE THIS ######
  version: 4.4.0.dev10
  ##############################
  BOOT_STEP_VERSIONING: '26'
  TAG_VERSIONING: nspanel_ha_blueprint.versioning

esphome:
  project:
    version: "${version}"
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_VERSIONING

script:
  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_VERSIONING}, "VERSIONING", "Versioning");

  - id: check_versions
    mode: restart
    then:
      - wait_until:
          condition:
            - lambda: return compare_versions(version_tft->state.c_str(), "${version}");
            - lambda: return compare_versions(version_blueprint->state.c_str(), "${version}");
          timeout: 120s
      - lambda: |-
          page_boot_log->execute("Versions", "Reporting");
          ESP_LOGI("${TAG_VERSIONING}", "Versions:");
          ESP_LOGI("${TAG_VERSIONING}", "  TFT:       %s", version_tft->state.c_str());
          ESP_LOGI("${TAG_VERSIONING}", "  ESPHome:   ${version}");
          if (not compare_versions(version_tft->state.c_str(), "${version}"))
            ESP_LOGE("${TAG_VERSIONING}", "TFT version mismatch!");
          ESP_LOGI("${TAG_VERSIONING}", "  Blueprint: %s", version_blueprint->state.c_str());
          if (not compare_versions(version_blueprint->state.c_str(), "${version}"))
            ESP_LOGE("${TAG_VERSIONING}", "Blueprint version mismatch!");
      - homeassistant.event:
          event: esphome.nspanel_ha_blueprint
          data:
            device_name: !lambda return nspanel_ha_blueprint::get_device_name();
            esphome_version: ${version}
            type: version
            tft: !lambda return version_tft->state.c_str();
            esphome: ${version}
            blueprint: !lambda return version_blueprint->state.c_str();

  - id: !extend dump_config
    then:
      - lambda: |-
          // Report blueprint version
          ESP_LOGCONFIG("${TAG_VERSIONING}", "Blueprint: %s", version_blueprint->state.empty()
                                                              ? "UNKNOWN"
                                                              : version_blueprint->state.c_str());

  - id: !extend event_from_display  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (version_tft->state.empty()) {
            const std::string event = json["event"];
            if (event == "params") {
              ESP_LOGV("${TAG_VERSIONING}", "Nextion event");
              version_tft->publish_state(json["version"].as<std::string>());
              check_versions->execute();
            }
          }

  - id: !extend page_boot
    then:
      - script.execute: page_boot_versions

  - id: page_boot_versions
    mode: restart
    then:
      - lambda: |-
          page_boot_log->execute("Boot", "Firmware v${version}");
          set_component_text->execute(${PAGE_ID_BOOT}, "ver_firmware", "Firmware: ${version}");
          if (version_blueprint->state.empty())
            page_boot_log->execute("Boot", "Waiting Blueprint");
      - wait_until:
          condition:
            - lambda: return not version_blueprint->state.empty();
          timeout: 20s

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "version_blueprint") {
            version_blueprint->publish_state(val.c_str());
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          check_versions->stop();
          page_boot_versions->stop();

text_sensor:
  - id: version_blueprint
    name: Version Blueprint
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    on_value:
      - lambda: |-
            set_component_text->execute(${PAGE_ID_BOOT}, "ver_blueprint",
                                        ("Blueprint: " + version_blueprint->state).c_str());
            check_versions->execute();

  - id: version_esphome
    name: Version ESPHome
    platform: template
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    lambda: |-
      return {"${version}"};

  - id: version_tft
    name: Version TFT
    platform: nextion
    component_name: boot.version
    entity_category: diagnostic
    icon: mdi:tag-text-outline
    internal: false
    update_interval: never
    on_value:
      - lambda: |-
          check_versions->execute();
...
