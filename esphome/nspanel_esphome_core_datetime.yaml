#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - DATE & TIME                                                                #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_DATETIME: '2'
  TAG_DATETIME: nspanel_ha_blueprint.datetime

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_DATETIME

  on_boot:
    - priority: 600.${BOOT_STEP_DATETIME}  # This is where most sensors are set up.
      then:
        - lambda: |-
            boot_log->execute("on_boot", "Set time zone");
            set_timezone->execute(id(mui_timezone).c_str());

globals:
  - id: mui_timezone
    type: std::string
    restore_value: true
    initial_value: ""

script:
  - id: refresh_datetime
    mode: restart
    then:
      - lambda: |-
          std::string time_format_str = id(mui_time_format);
          if (time_format_str.find("%-H") != std::string::npos) {
            time_format_str = time_format_str.replace(time_format_str.find("%-H"), sizeof("%-H")-1,
                                                      to_string((int)(id(time_provider).now().hour)));
          }
          if (time_format_str.find("%-I") != std::string::npos) {
            if (id(time_provider).now().hour>12) {
              time_format_str = time_format_str.replace(time_format_str.find("%-I"), sizeof("%-I")-1,
                                                        to_string((int)(id(time_provider).now().hour-12)));
            } else if (id(time_provider).now().hour==0) {
              time_format_str = time_format_str.replace(time_format_str.find("%-I"), sizeof("%-I")-1, "12");
            } else {
              time_format_str = time_format_str.replace(time_format_str.find("%-I"), sizeof("%-I")-1,
                                                        to_string((int)(id(time_provider).now().hour)));
            }
          }
          std::string meridiem_text = (id(time_provider).now().hour<12) ? id(mui_meridiem)[0] : id(mui_meridiem)[1];
          if (current_page->state == "screensaver" and id(screensaver_display_time)) {
              std::string time_format_str_sleep = time_format_str;
              if (time_format_str_sleep.find("%p") != std::string::npos)
                time_format_str_sleep.replace(time_format_str_sleep.find("%p"), sizeof("%p")-1, meridiem_text.c_str());
              disp1->set_component_text("text", id(time_provider).now().strftime(time_format_str_sleep).c_str());
          }
          disp1->set_component_text("home.meridiem", (time_format_str.find("%p") != std::string::npos) ? meridiem_text.c_str() : " ");
          disp1->set_component_text("home.time", id(time_provider).now().strftime(time_format_str).c_str());

  - id: set_timezone
    mode: restart
    parameters:
      timezone: string
    then:
      - lambda: |-
          ESP_LOGI("script.set_timezone", "Setting timezone: %s", timezone.c_str());
          if (timezone != id(mui_timezone)) {
            id(mui_timezone) = timezone;
            size_t start = id(mui_timezone).find('<');
            size_t end = id(mui_timezone).find('>');
            if (start != std::string::npos && end != std::string::npos && end > start)
              id(mui_timezone).replace(start, (end - start) + 1, "UTC");
            time_provider->set_timezone(id(mui_timezone).c_str());
            time_provider->call_setup();
          }
          time_provider->dump_config();
          refresh_datetime->execute();

  - id: !extend stop_all
    then:
      - script.stop: refresh_datetime
      - script.stop: set_timezone

time:  # Keeps time display updated
  - id: time_provider
    platform: homeassistant
    on_time:
      - seconds: 0
        then:
          - lambda: |-
              refresh_datetime->execute();
              refresh_relays->execute(3);
              refresh_hardware_buttons_bars->execute(3);
              refresh_wifi_icon->execute();
      - seconds: 30  # Watchdog
        then:
          - lambda: |-
              if (not wifi_component->is_connected()) {
                ESP_LOGW("watchdog", "Retrying Wi-Fi connection");
                wifi_component->retry_connect();
              }
              if (not api_server->is_connected() and
                  current_page->state != "blank" and
                  current_page->state != "boot" and
                  current_page->state != "confirm" and
                  current_page->state != "home" and
                  current_page->state != "qrcode" and
                  current_page->state != "screensaver" and
                  current_page->state != "settings") {
                ESP_LOGW("watchdog", "API disconnected. Falling back to Home page.");
                goto_page->execute("home");
                blueprint_status->publish_state(0);
              }
              refresh_wifi_icon->execute();

      - minutes: /10
        seconds: 5
        then:
          - script.execute: dump_config

    on_time_sync:
      then:
        - lambda: |-
            ESP_LOGD("time.on_time_sync", "System clock synchronized");
            ESP_LOGD("time.on_time_sync", "Timezone: %s", time_provider->get_timezone().c_str());
            refresh_datetime->execute();
...
