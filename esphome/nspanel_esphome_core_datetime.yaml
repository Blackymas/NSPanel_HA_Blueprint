#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - DATE & TIME                                                                #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_DATETIME: '2'
  TAG_DATETIME: nspanel_ha_blueprint.datetime

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_DATETIME
  on_boot:
    - priority: 600.2
      then:
        - if:
            condition: &condition_NOT_safe_mode
              - lambda: return not nspanel_ha_blueprint::is_safe_mode;
            then:
              - lambda: |-
                  if (not id(mui_timezone).empty())
                    set_timezone->execute(id(mui_timezone).c_str());

globals:
  - id: mui_timezone
    type: std::string
    restore_value: true
    initial_value: '""'

script:
  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_DATETIME}, "DATETIME", "Date & Time");

  - id: refresh_datetime
    mode: restart
    then:
    # Extended by:
    #   - nspanel_esphome_core_page_home.yaml
    #   - nspanel_esphome_core_page_screensaver.yaml

  - id: !extend set_component_font_color  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (page_id == ${PAGE_ID_HOME}) {
            if (component == "date") id(home_date_color) = color;
            else if (component == "time") id(home_time_color) = color;
          }

  - id: set_timezone
    mode: restart
    parameters:
      timezone: string
    then:
      - lambda: |-
          ESP_LOGD("${TAG_DATETIME}", "Set timezone: '%s'->'%s'", id(mui_timezone).c_str(), timezone.c_str());
          if (timezone != id(mui_timezone)) {
            id(mui_timezone) = timezone == "\"\"" ? "" : timezone;
            if (id(mui_timezone).empty()) {
              set_timezone_restart_esp->execute();
            } else {
              size_t start = id(mui_timezone).find('<');
              size_t end = id(mui_timezone).find('>');
              if (start != std::string::npos && end != std::string::npos && end > start)
                id(mui_timezone).replace(start, (end - start) + 1, "UTC");
              time_provider->set_timezone(id(mui_timezone).c_str());
              time_provider->call_setup();
            }
          }
          if (id(time_provider).now().is_valid()) {
              auto time = id(time_provider).now();
              ESP_LOGD("${TAG_DATETIME}", "Time: %02d:%02d:%02d (%s)", time.hour, time.minute, time.second,
                        id(time_provider).get_timezone().c_str());
          } else {
              ESP_LOGW("${TAG_DATETIME}", "Time unavailable");
          }
          time_provider->dump_config();
          refresh_datetime->execute();

  - id: set_timezone_restart_esp
    mode: restart
    then:
      - logger.log:
          format: Panel set to restart in 10s
          level: WARN
          tag: nspanel.core.datetime
      - delay: 10s
      - lambda: App.safe_reboot();  // Restart when timezone is set to blank so it uses the one from ESPHome compiller

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "timezone") set_timezone->execute(val.c_str());
          else if (component == "mui_meridiem_am") id(mui_meridiem_am) = val;
          else if (component == "mui_meridiem_pm") id(mui_meridiem_pm) = val;
          else if (component == "time_format") id(mui_time_format) = val;

  - id: !extend stop_all
    then:
      - lambda: |-
          refresh_datetime->stop();
          set_timezone->stop();
          set_timezone_restart_esp->stop();

##### Keeps time display updated #####
time:
  - id: time_provider
    platform: homeassistant
    on_time:
      - seconds: 0  # Every minute, at second 0
        then:
          - script.execute: refresh_datetime
          - script.execute: refresh_wifi_icon

    on_time_sync:
      then:
        - lambda: |-
            refresh_datetime->execute();
...
