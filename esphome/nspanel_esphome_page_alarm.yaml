#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME - Page alarm                                                                      #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  PAGE_ALARM_DELAY_DEFAULT: ${DELAY_DEFAULT}
  PAGE_ALARM_DELAY_LONG: ${DELAY_LONG}
  PAGE_ALARM_DELAY_SHORT: ${DELAY_SHORT}

  BOOT_STEP_PAGE_ALARM: 10
  PAGE_ALARM_ID: 23
  TAG_PAGE_ALARM: nspanel.page.alarm

api:
  actions:
    # Updates the alarm settings page with current state and configuration, integrating with the panel's interface.
    - action: page_alarm
      variables:
        page_title: string       # Title for the alarm settings page, displayed prominently at the top.
        state: string            # Current state of the alarm system (e.g., "armed_home", "disarmed").
        supported_features: int  # Bitmask representing the alarm system's supported features, determining available controls on the page.
        code_format: string      # Format required for the alarm code (numeric, alphanumeric).
        code_arm_required: bool  # Indicates if a code is needed to arm the system.
        entity: string           # Entity ID for the alarm system, enabling state updates and control.
        mui_alarm: string[]      # Localized text for alarm control buttons (e.g., Arm, Disarm), allowing for a multilingual interface.
      then:
        # To do: This page constructor should be moved to Blueprint
        - lambda: |-
            if (current_page_id != ${PAGE_ALARM_ID}) return;

            // Set detailed entity sensor
            ESP_LOGV("${TAG_PAGE_ALARM}", "Set detailed entity sensor");
            detailed_entity->publish_state(entity.c_str());
            feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});

            // Page header - Icon
            ESP_LOGV("${TAG_PAGE_ALARM}", "Page header - Icon");
            update_alarm_icon->execute("icon_state", state.c_str());

            // Page header - Title
            ESP_LOGV("${TAG_PAGE_ALARM}", "Page header - Title");
            if (page_title.find("\\r") != std::string::npos) {
              page_title = page_title.replace(page_title.find("\\r"), 2, " ");
            }
            disp1->set_component_text("page_label", page_title.c_str());

            // Page - Params
            ESP_LOGV("${TAG_PAGE_ALARM}", "Page - Params");
            disp1->set_component_text("code_format", code_format.c_str());
            disp1->set_component_text("code_arm_req", code_arm_required ? "1" : "0");
            feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});

            //Buttons - Text
            ESP_LOGV("${TAG_PAGE_ALARM}", "Buttons - Text");
            disp1->set_component_text("bt_away_text", wrapText(mui_alarm[1].c_str(), 10, id(mui_bytes_per_char)).c_str());
            disp1->set_component_text("bt_night_text", wrapText(mui_alarm[2].c_str(), 10, id(mui_bytes_per_char)).c_str());
            disp1->set_component_text("bt_vacat_text", wrapText(mui_alarm[3].c_str(), 10, id(mui_bytes_per_char)).c_str());
            disp1->set_component_text("bt_bypass_text", wrapText(mui_alarm[4].c_str(), 10, id(mui_bytes_per_char)).c_str());
            disp1->set_component_text("bt_disarm_text", wrapText(mui_alarm[5].c_str(), 10, id(mui_bytes_per_char)).c_str());
            feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});


            // Button - Home
            if ((supported_features & 1) or (state == "armed_home")) {
              ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Home");
              const bool is_current_state = (state == "armed_home");
              disp1->set_component_pic("bt_home_pic", is_current_state ? 43 : 42);
              disp1->set_component_background_color("bt_home_text", is_current_state ? 19818 : 52857);
              disp1->set_component_background_color("bt_home_icon", is_current_state ? 19818 : 52857);
              disp1->set_component_font_color("bt_home_text", is_current_state ? 65535 : 0);
              disp1->set_component_font_color("bt_home_icon", is_current_state ? 65535 : 0);
              disp1->send_command_printf("vis bt_home,%i", is_current_state ? 0 : 1);
              feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});
            }

            // Button - Away
            if ((supported_features & 2) or (state == "armed_away")) {
              ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Away");
              const bool is_current_state = (state == "armed_away");
              disp1->set_component_pic("bt_away_pic", is_current_state ? 43 : 42);
              disp1->set_component_background_color("bt_away_text", is_current_state ? 19818 : 52857);
              disp1->set_component_background_color("bt_away_icon", is_current_state ? 19818 : 52857);
              disp1->set_component_font_color("bt_away_text", is_current_state ? 65535 : 0);
              disp1->set_component_font_color("bt_away_icon", is_current_state ? 65535 : 0);
              disp1->send_command_printf("vis bt_away,%i", is_current_state ? 0 : 1);
              feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});
            }

            // Button - Night
            if ((supported_features & 4) or (state == "armed_night")) {
              ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Night");
              const bool is_current_state = (state == "armed_night");
              disp1->set_component_pic("bt_night_pic", is_current_state ? 43 : 42);
              disp1->set_component_background_color("bt_night_text", is_current_state ? 19818 : 52857);
              disp1->set_component_background_color("bt_night_icon", is_current_state ? 19818 : 52857);
              disp1->set_component_font_color("bt_night_text", is_current_state ? 65535 : 0);
              disp1->set_component_font_color("bt_night_icon", is_current_state ? 65535 : 0);
              disp1->send_command_printf("vis bt_night,%i", is_current_state ? 0 : 1);
              feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});
            }

            // Button - Vacation
            if ((supported_features & 32) or (state == "armed_vacation")) {
              ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Vacation");
              const bool is_current_state = (state == "armed_vacation");
              disp1->set_component_pic("bt_vacat_pic", is_current_state ? 43 : 42);
              disp1->set_component_background_color("bt_vacat_text", is_current_state ? 19818 : 52857);
              disp1->set_component_background_color("bt_vacat_icon", is_current_state ? 19818 : 52857);
              disp1->set_component_font_color("bt_vacat_text", is_current_state ? 65535 : 0);
              disp1->set_component_font_color("bt_vacat_icon", is_current_state ? 65535 : 0);
              disp1->send_command_printf("vis bt_vacat,%i", is_current_state ? 0 : 1);
              feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});
            }

            // Button - Custom bypass
            if ((supported_features & 16) or (state == "armed_bypass")) {
              ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Custom bypass");
              const bool is_current_state = (state == "armed_bypass");
              disp1->set_component_pic("bt_bypass_pic", is_current_state ? 43 : 42);
              disp1->set_component_background_color("bt_bypass_text", is_current_state ? 19818 : 52857);
              disp1->set_component_background_color("bt_bypass_icon", is_current_state ? 19818 : 52857);
              disp1->set_component_font_color("bt_bypass_text", is_current_state ? 65535 : 0);
              disp1->set_component_font_color("bt_bypass_icon", is_current_state ? 65535 : 0);
              disp1->send_command_printf("vis bt_bypass,%i", is_current_state ? 0 : 1);
              feed_wdt_delay(${PAGE_ALARM_DELAY_SHORT});
            }

            // Button - Disarm
            ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Disarm");
            const bool is_current_state = (state == "disarmed");
            disp1->set_component_pic("bt_disarm_pic", is_current_state ? 43 : 42);
            disp1->set_component_background_color("bt_disarm_text", is_current_state ? 19818 : 52857);
            disp1->set_component_background_color("bt_disarm_icon", is_current_state ? 19818 : 52857);
            disp1->set_component_font_color("bt_disarm_text", is_current_state ? 65535 : 0);
            disp1->set_component_font_color("bt_disarm_icon", is_current_state ? 65535 : 0);
            disp1->send_command_printf("vis bt_disarm,%i", is_current_state ? 0 : 1);
            ESP_LOGV("${TAG_PAGE_ALARM}", "Done!");

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_ALARM

script:
  - id: !extend event_from_display  # Defined by hw_display
    then:
      - lambda: |-
          if (params[0] == "alarm") {
            // CSV Format: alarm,key,code_format,code_arm_req
            // params[0]=page, params[1]=key, params[2]=code_format, params[3]=code_arm_req, params[4]=mui

            if (params_count != 5) {
              ESP_LOGW("${TAG_PAGE_ALARM}", "Bad params");
              return;
            }

            const std::string& key = params[1];
            const std::string& code_format = params[2];
            const std::string& code_arm_req = params[3];
            const std::string& mui = params[4];
            ESP_LOGV("${TAG_PAGE_ALARM}", "key=%s, format=%s, arm_req=%s, mui=%s",
                      key.c_str(), code_format.c_str(), code_arm_req.c_str(), mui.c_str());

            if (code_format == "number" && (key == "disarm" || code_arm_req == "1")) {
              ESP_LOGV("${TAG_PAGE_ALARM}", "Open keypad");
              goto_page->execute(${PAGE_KEYB_NUM_ID});

              disp1->set_component_value("page_id", ${PAGE_ALARM_ID});
              disp1->set_component_text("domain", "alarm");
              disp1->set_component_text("key", key.c_str());
              disp1->set_component_text("value", "click");
              disp1->set_component_text("entity", detailed_entity->state.c_str());
              disp1->set_component_text("title", mui.c_str());
            } else {
              ESP_LOGV("${TAG_PAGE_ALARM}", "Executing direct alarm action: key=%s, format=%s",
                        key.c_str(), code_format.c_str());
              alarm_control_panel_action->execute(detailed_entity->state.c_str(), key.c_str(),
                                                  code_format.c_str(), "");
            }  // endif numeric keypad required
          }

  - id: alarm_control_panel_action
    mode: single
    parameters:
      entity: string
      key: string
      code_format: string
      pin: string
    then:
      - lambda: |-
          ESP_LOGV("${TAG_PAGE_ALARM}", "Alarm control panel action call:");
          ESP_LOGV("${TAG_PAGE_ALARM}", "  entity_id: %s", entity.c_str());
          ESP_LOGV("${TAG_PAGE_ALARM}", "  pin: %s", YESNO(not pin.empty()));

          // Build action: alarm_control_panel.alarm_<suffix>
          // For bypass: arm_custom_bypass, others: arm_<key> or disarm
          std::string action = "alarm_control_panel.alarm_";
          if (key != "disarm") action += "arm_";
          if (key == "bypass") action += "custom_";
          action += key;
          ESP_LOGV("${TAG_PAGE_ALARM}", "  action: %s", action.c_str());

          #if ESPHOME_VERSION_CODE < VERSION_CODE(2025, 10, 0)  // Code for ESPHome earlier than v2025.10.0
          esphome::api::HomeassistantServiceResponse action_request;
          action_request.set_service(StringRef(action));

          // Add entity_id parameter
          esphome::api::HomeassistantServiceMap kv_entity;
          kv_entity.set_key(StringRef("entity_id"));
          kv_entity.value = entity;
          action_request.data.push_back(kv_entity);

          // Add code parameter if pin is provided
          if (!pin.empty()) {
            esphome::api::HomeassistantServiceMap kv_code;
            kv_code.set_key(StringRef("code"));
            kv_code.value = pin;
            action_request.data.push_back(kv_code);
          }

          global_api_server->send_homeassistant_service_call(action_request);
          #else  // Code for ESPHome v2025.10.0 or newer
          esphome::api::HomeassistantActionRequest action_request;
          action_request.set_service(StringRef(action));

          // Add entity_id parameter
          action_request.data.emplace_back();
          auto &kv_entity = action_request.data.back();
          kv_entity.set_key(StringRef("entity_id"));
          kv_entity.value = entity;

          // Add code parameter if pin is provided
          if (!pin.empty()) {
            action_request.data.emplace_back();
            auto &kv_code = action_request.data.back();
            kv_code.set_key(StringRef("code"));
            kv_code.value = pin;
          }

          api_server->send_homeassistant_action(action_request);
          #endif  // ESPHome version based code

          ESP_LOGVV("${TAG_PAGE_ALARM}", "Alarm control panel action called");

  - id: !extend dump_config  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          // Check for requirements
          #if !defined(NSPANEL_HA_BLUEPRINT_PAGE_KEYB_NUM)
            #error "The package nspanel_esphome_standard_page_keyb_num.yaml is required."
          #endif

  - id: page_alarm
    mode: single
    then:  # There's nothing here so far

  - id: !extend page_change
    then:
      - lambda: |-
          if (new_page_id == ${PAGE_ALARM_ID})
            page_alarm->execute();

  - id: !extend stop_all
    then:
      - lambda: |-
          alarm_control_panel_action->stop();
          update_alarm_icon->stop();

  - id: !extend stop_page_constructors
    then:
      - lambda: page_alarm->stop();

  - id: update_alarm_icon
    mode: single
    parameters:
      component: string
      state: string
    then:
      - lambda: |-
          const char* icon = Icons::SHIELD_ALERT_OUTLINE;
          uint16_t color = Colors::WHITE;

          // Optimized state checking using first character for fast branching
          if (state[0] == 'd') {  // "disarmed" or "disarming"
            icon = Icons::SHIELD_OFF_OUTLINE;
            color = (state == "disarming") ? Colors::YELLOW : Colors::WHITE;
          } else if (state[0] == 'a') {  // "armed_*" or "arming"
            if (state == "arming") {
              icon = Icons::SHIELD_OUTLINE;
              color = Colors::YELLOW;
            } else {
              color = Colors::GREEN;
              if (state == "armed_home") {
                icon = Icons::SHIELD_HOME_OUTLINE;
              } else if (state == "armed_away") {
                icon = Icons::SHIELD_LOCK_OUTLINE;
              } else if (state == "armed_night") {
                icon = Icons::SHIELD_MOON_OUTLINE;
              } else if (state == "armed_vacation") {
                icon = Icons::SHIELD_AIRPLANE_OUTLINE;
              } else if (state == "armed_custom_bypass") {
                icon = Icons::SHIELD_HALF_FULL;
              }
            }
          } else if (state == "pending") {
            icon = Icons::SHIELD_OUTLINE;
            color = Colors::YELLOW;
          } else if (state == "triggered") {
            icon = Icons::SHIELD_ALERT_OUTLINE;
            color = Colors::RED;
          }

          // Apply the icon and color to the display component
          disp1->set_component_text(component.c_str(), icon);
          disp1->set_component_font_color(component.c_str(), static_cast<uint16_t>(color));
...
