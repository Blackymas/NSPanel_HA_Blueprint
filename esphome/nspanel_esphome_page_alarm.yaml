#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME - Page alarm                                                                      #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  PAGE_ALARM_DELAY_DEFAULT: ${DELAY_DEFAULT}
  PAGE_ALARM_DELAY_LONG: ${DELAY_LONG}
  PAGE_ALARM_DELAY_SHORT: ${DELAY_SHORT}

  BOOT_STEP_PAGE_ALARM: 10
  PAGE_ALARM_ID: 23
  TAG_PAGE_ALARM: nspanel.page.alarm

api:
  actions:
    # Updates the alarm settings page with current state and configuration, integrating with the panel's interface.
    - action: page_alarm
      variables:
        page_title: string       # Title for the alarm settings page, displayed prominently at the top.
        state: string            # Current state of the alarm system (e.g., "armed_home", "disarmed").
        supported_features: int  # Bitmask representing the alarm system's supported features, determining available controls on the page.
        code_format: string      # Format required for the alarm code (numeric, alphanumeric).
        code_arm_required: bool  # Indicates if a code is needed to arm the system.
        entity: string           # Entity ID for the alarm system, enabling state updates and control.
        mui_alarm: string[]      # Localized text for alarm control buttons (e.g., Arm, Disarm), allowing for a multilingual interface.
      then:
        # To do: This page constructor should be moved to Blueprint
        - if:
            condition:
              - lambda: return (current_page_id == ${PAGE_ALARM_ID});
            then:  # Update alarm page
              # Set detailed entity sensor
              - lambda: ESP_LOGV("${TAG_PAGE_ALARM}", "Set detailed entity sensor");
              - text_sensor.template.publish:
                  id: detailed_entity
                  state: !lambda return entity;
              - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Page header - Icon
              - lambda: ESP_LOGV("${TAG_PAGE_ALARM}", "Page header - Icon");
              - script.execute:
                  id: update_alarm_icon
                  component: "icon_state"
                  state: !lambda return state;
              - delay: ${PAGE_ALARM_DELAY_SHORT}ms
              # Page header - Title
              - lambda: |-
                  ESP_LOGV("${TAG_PAGE_ALARM}", "Page header - Title");
                  if (page_title.find("\\r") != std::string::npos) {
                    page_title = page_title.replace(page_title.find("\\r"), 2, " ");
                  }
                  disp1->set_component_text("page_label", page_title.c_str());
              - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Page - Params
              - lambda: |-
                  ESP_LOGV("${TAG_PAGE_ALARM}", "Page - Params");
                  disp1->set_component_text("code_format", code_format.c_str());
                  disp1->set_component_text("code_arm_req", code_arm_required ? "1" : "0");
              - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Buttons - Text
              - lambda: |-
                  ESP_LOGV("${TAG_PAGE_ALARM}", "Buttons - Text");
                  disp1->set_component_text("bt_away_text",
                                            wrapText(mui_alarm[1].c_str(), 10, id(mui_bytes_per_char)).c_str());
                  disp1->set_component_text("bt_night_text",
                                            wrapText(mui_alarm[2].c_str(), 10, id(mui_bytes_per_char)).c_str());
                  disp1->set_component_text("bt_vacat_text",
                                            wrapText(mui_alarm[3].c_str(), 10, id(mui_bytes_per_char)).c_str());
                  disp1->set_component_text("bt_bypass_text",
                                            wrapText(mui_alarm[4].c_str(), 10, id(mui_bytes_per_char)).c_str());
                  disp1->set_component_text("bt_disarm_text",
                                            wrapText(mui_alarm[5].c_str(), 10, id(mui_bytes_per_char)).c_str());
              - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Button - Home
              - if:
                  condition:
                    - or:
                        - lambda: return (supported_features & 1);
                        - lambda: return (state == "armed_home");
                  then:
                    - lambda: |-
                        ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Home");
                        const bool is_current_state = (state == "armed_home");
                        disp1->set_component_pic("bt_home_pic", is_current_state ? 43 : 42);
                        disp1->set_component_background_color("bt_home_text", is_current_state ? 19818 : 52857);
                        disp1->set_component_background_color("bt_home_icon", is_current_state ? 19818 : 52857);
                        disp1->set_component_font_color("bt_home_text", is_current_state ? 65535 : 0);
                        disp1->set_component_font_color("bt_home_icon", is_current_state ? 65535 : 0);
                        disp1->send_command_printf("vis bt_home,%i", is_current_state ? 0 : 1);
                    - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Button - Away
              - if:
                  condition:
                    - or:
                        - lambda: return (supported_features & 2);
                        - lambda: return (state == "armed_away");
                  then:
                    - lambda: |-
                        ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Away");
                        const bool is_current_state = (state == "armed_away");
                        disp1->set_component_pic("bt_away_pic", is_current_state ? 43 : 42);
                        disp1->set_component_background_color("bt_away_text", is_current_state ? 19818 : 52857);
                        disp1->set_component_background_color("bt_away_icon", is_current_state ? 19818 : 52857);
                        disp1->set_component_font_color("bt_away_text", is_current_state ? 65535 : 0);
                        disp1->set_component_font_color("bt_away_icon", is_current_state ? 65535 : 0);
                        disp1->send_command_printf("vis bt_away,%i", is_current_state ? 0 : 1);
                    - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Button - Night
              - if:
                  condition:
                    - or:
                        - lambda: return (supported_features & 4);
                        - lambda: return (state == "armed_night");
                  then:
                    - lambda: |-
                        ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Night");
                        const bool is_current_state = (state == "armed_night");
                        disp1->set_component_pic("bt_night_pic", is_current_state ? 43 : 42);
                        disp1->set_component_background_color("bt_night_text", is_current_state ? 19818 : 52857);
                        disp1->set_component_background_color("bt_night_icon", is_current_state ? 19818 : 52857);
                        disp1->set_component_font_color("bt_night_text", is_current_state ? 65535 : 0);
                        disp1->set_component_font_color("bt_night_icon", is_current_state ? 65535 : 0);
                        disp1->send_command_printf("vis bt_night,%i", is_current_state ? 0 : 1);
                    - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Button - Vacation
              - if:
                  condition:
                    - or:
                        - lambda: return (supported_features & 32);
                        - lambda: return (state == "armed_vacation");
                  then:
                    - lambda: |-
                        ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Vacation");
                        const bool is_current_state = (state == "armed_vacation");
                        disp1->set_component_pic("bt_vacat_pic", is_current_state ? 43 : 42);
                        disp1->set_component_background_color("bt_vacat_text", is_current_state ? 19818 : 52857);
                        disp1->set_component_background_color("bt_vacat_icon", is_current_state ? 19818 : 52857);
                        disp1->set_component_font_color("bt_vacat_text", is_current_state ? 65535 : 0);
                        disp1->set_component_font_color("bt_vacat_icon", is_current_state ? 65535 : 0);
                        disp1->send_command_printf("vis bt_vacat,%i", is_current_state ? 0 : 1);
                    - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Button - Custom bypass
              - if:
                  condition:
                    - or:
                        - lambda: return (supported_features & 16);
                        - lambda: return (state == "armed_bypass");
                  then:
                    - lambda: |-
                        ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Custom bypass");
                        const bool is_current_state = (state == "armed_bypass");
                        disp1->set_component_pic("bt_bypass_pic", is_current_state ? 43 : 42);
                        disp1->set_component_background_color("bt_bypass_text", is_current_state ? 19818 : 52857);
                        disp1->set_component_background_color("bt_bypass_icon", is_current_state ? 19818 : 52857);
                        disp1->set_component_font_color("bt_bypass_text", is_current_state ? 65535 : 0);
                        disp1->set_component_font_color("bt_bypass_icon", is_current_state ? 65535 : 0);
                        disp1->send_command_printf("vis bt_bypass,%i", is_current_state ? 0 : 1);
                    - delay: ${PAGE_ALARM_DELAY_SHORT}ms

              # Button - Disarm
              - lambda: |-
                  ESP_LOGV("${TAG_PAGE_ALARM}", "Button - Disarm");
                  const bool is_current_state = (state == "disarmed");
                  disp1->set_component_pic("bt_disarm_pic", is_current_state ? 43 : 42);
                  disp1->set_component_background_color("bt_disarm_text", is_current_state ? 19818 : 52857);
                  disp1->set_component_background_color("bt_disarm_icon", is_current_state ? 19818 : 52857);
                  disp1->set_component_font_color("bt_disarm_text", is_current_state ? 65535 : 0);
                  disp1->set_component_font_color("bt_disarm_icon", is_current_state ? 65535 : 0);
                  disp1->send_command_printf("vis bt_disarm,%i", is_current_state ? 0 : 1);
              - lambda: ESP_LOGV("${TAG_PAGE_ALARM}", "Done!");

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_ALARM

script:
  - id: !extend event_from_display
    then:
      - if:
          condition:
            - lambda: return page == "alarm";
          then:
            - lambda: |-
                if (json["key"].isNull() || json["code_format"].isNull() || json["code_arm_req"].isNull()) {
                  ESP_LOGV("${TAG_PAGE_ALARM}", "Missing alarm fields (key/code_format/code_arm_req)");
                  return;
                }  // endif missing alarm fields

                const std::string key = json["key"].as<std::string>();
                const std::string code_format = json["code_format"].as<std::string>();
                const std::string code_arm_req = json["code_arm_req"].as<std::string>();

                ESP_LOGV("${TAG_PAGE_ALARM}", "Alarm control: key=%s, format=%s, arm_req=%s",
                          key.c_str(), code_format.c_str(), code_arm_req.c_str());

                if (code_format == "number" && (key == "disarm" || code_arm_req == "1")) {
                  ESP_LOGV("${TAG_PAGE_ALARM}", "Navigating to numeric keypad for alarm");
                  goto_page->execute(${PAGE_KEYB_NUM_ID});

                  if (json["value"].isNull() || json["mui"].isNull()) {
                    ESP_LOGV("${TAG_PAGE_ALARM}", "Missing alarm keypad fields (value/mui)");
                    return;
                  }  // endif missing keypad fields

                  const std::string value = json["value"].as<std::string>();
                  const std::string mui = json["mui"].as<std::string>();

                  ESP_LOGV("${TAG_PAGE_ALARM}", "Setting keypad parameters: value=%s, title=%s",
                            value.c_str(), mui.c_str());
                  disp1->set_component_value("page_id", ${PAGE_ALARM_ID});
                  disp1->set_component_text("domain", page.c_str());
                  disp1->set_component_text("key", key.c_str());
                  disp1->set_component_text("value", value.c_str());
                  disp1->set_component_text("entity", detailed_entity->state.c_str());
                  disp1->set_component_text("title", mui.c_str());
                } else {
                  ESP_LOGV("${TAG_PAGE_ALARM}", "Executing direct alarm action: key=%s, format=%s",
                            key.c_str(), code_format.c_str());
                  alarm_control_panel_action->execute(detailed_entity->state.c_str(), key.c_str(),
                                                      code_format.c_str(), "");
                }  // endif numeric keypad required

  - id: alarm_control_panel_action
    mode: single
    parameters:
      entity: string
      key: string
      code_format: string
      pin: string
    then:
      - lambda: |-
          ESP_LOGV("${TAG_PAGE_ALARM}", "Alarm control panel action call:");
          ESP_LOGV("${TAG_PAGE_ALARM}", "  entity_id: %s", entity.c_str());
          ESP_LOGV("${TAG_PAGE_ALARM}", "  pin: %s", YESNO(not pin.empty()));

          // Build action: alarm_control_panel.alarm_<suffix>
          // For bypass: arm_custom_bypass, others: arm_<key> or disarm
          std::string action = "alarm_control_panel.alarm_";
          if (key != "disarm") action += "arm_";
          if (key == "bypass") action += "custom_";
          action += key;
          ESP_LOGV("${TAG_PAGE_ALARM}", "  action: %s", action.c_str());

          #if ESPHOME_VERSION_CODE < VERSION_CODE(2025, 10, 0)  // Code for ESPHome earlier than v2025.10.0
          esphome::api::HomeassistantServiceResponse action_request;
          action_request.set_service(StringRef(action));

          // Add entity_id parameter
          esphome::api::HomeassistantServiceMap kv_entity;
          kv_entity.set_key(StringRef("entity_id"));
          kv_entity.value = entity;
          action_request.data.push_back(kv_entity);

          // Add code parameter if pin is provided
          if (!pin.empty()) {
            esphome::api::HomeassistantServiceMap kv_code;
            kv_code.set_key(StringRef("code"));
            kv_code.value = pin;
            action_request.data.push_back(kv_code);
          }

          global_api_server->send_homeassistant_service_call(action_request);
          #else  // Code for ESPHome v2025.10.0 or newer
          esphome::api::HomeassistantActionRequest action_request;
          action_request.set_service(StringRef(action));

          // Add entity_id parameter
          action_request.data.emplace_back();
          auto &kv_entity = action_request.data.back();
          kv_entity.set_key(StringRef("entity_id"));
          kv_entity.value = entity;

          // Add code parameter if pin is provided
          if (!pin.empty()) {
            action_request.data.emplace_back();
            auto &kv_code = action_request.data.back();
            kv_code.set_key(StringRef("code"));
            kv_code.value = pin;
          }

          api_server->send_homeassistant_action(action_request);
          #endif  // ESPHome version based code

          ESP_LOGVV("${TAG_PAGE_ALARM}", "Alarm control panel action called");

  - id: !extend dump_config  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          // Check for requirements
          #if !defined(NSPANEL_HA_BLUEPRINT_PAGE_KEYB_NUM)
            #error "The package nspanel_esphome_standard_page_keyb_num.yaml is required."
          #endif

  - id: page_alarm
    mode: single
    then:  # There's nothing here so far

  - id: !extend page_change
    then:
      - if:
          condition:
            - lambda: return new_page_id == ${PAGE_ALARM_ID};
          then:
            - script.execute: page_alarm

  - id: !extend stop_all
    then:
      - script.stop: alarm_control_panel_action
      - script.stop: update_alarm_icon

  - id: !extend stop_page_constructors
    then:
      - script.stop: page_alarm

  - id: update_alarm_icon  # To do: Move to blueprint
    mode: single
    parameters:
      component: string
      state: string
    then:
      - lambda: |-
          static std::string alarm_icon = "\uEECC"; //mdi:shield-alert-outline
          static uint16_t alarm_color = 65535;
          if (state == "disarmed")
            {
              alarm_icon = "\uE99B"; //mdi:shield-off-outline
              alarm_color = 65535;
            }
          else if (state == "armed_home")
            {
              alarm_icon = "\uECCA"; //mdi:shield-home-outline
              alarm_color = 19818;
            }
          else if (state == "armed_away")
            {
              alarm_icon = "\uECCB"; //mdi:shield-lock-outline
              alarm_color = 19818;
            }
          else if (state == "armed_night")
            {
              alarm_icon = "\uF828"; //mdi:shield-moon-outline
              alarm_color = 19818;
            }
          else if (state == "armed_vacation")
            {
              alarm_icon = "\uECC6"; //mdi:shield-airplane-outline
              alarm_color = 19818;
            }
          else if (state == "armed_custom_bypass")
            {
              alarm_icon = "\uE77F"; //mdi:shield-half-full
              alarm_color = 19818;
            }
          else if (state == "pending" or state == "arming")
            {
              alarm_icon = "\uE498"; //mdi:shield-outline
              alarm_color = 65024;
            }
          else if (state == "disarming")
            {
              alarm_icon = "\uE99B"; //mdi:shield-off-outline
              alarm_color = 65024;
            }
          else if (state == "triggered")
            {
              alarm_icon = "\uEECC"; //mdi:shield-alert-outline
              alarm_color = 63488;
            }
          disp1->set_component_text(component.c_str(), alarm_icon.c_str());
          disp1->set_component_font_color(component.c_str(), alarm_color);
...
