#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - MEDIA PLAYER                                                               #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_MEDIA_PLAYER: '20'
  PAGE_ID_MEDIA_PLAYER: '25'
  PAGE_NAME_MEDIA_PLAYER: "media_player"
  COMPONENT_ID_MEDIA_PLAYER_BT_VOL_DOWN: '6'
  COMPONENT_ID_MEDIA_PLAYER_BT_VOL_UP: '7'
  MEDIA_PLAYER_FEATURE_PAUSE: '1'
  MEDIA_PLAYER_FEATURE_SEEK: '2'
  MEDIA_PLAYER_FEATURE_VOLUME_SET: '4'
  MEDIA_PLAYER_FEATURE_VOLUME_MUTE: '8'
  MEDIA_PLAYER_FEATURE_PREVIOUS_TRACK: '16'
  MEDIA_PLAYER_FEATURE_NEXT_TRACK: '32'
  MEDIA_PLAYER_FEATURE_TURN_ON: '128'
  MEDIA_PLAYER_FEATURE_TURN_OFF: '256'
  MEDIA_PLAYER_FEATURE_PLAY_MEDIA: '512'
  MEDIA_PLAYER_FEATURE_VOLUME_STEP: '1024'
  MEDIA_PLAYER_FEATURE_SELECT_SOURCE: '2048'
  MEDIA_PLAYER_FEATURE_STOP: '4096'
  MEDIA_PLAYER_FEATURE_CLEAR_PLAYLIST: '8192'
  MEDIA_PLAYER_FEATURE_PLAY: '16384'
  MEDIA_PLAYER_FEATURE_SHUFFLE_SET: '32768'
  MEDIA_PLAYER_FEATURE_SELECT_SOUND_MODE: '65536'
  MEDIA_PLAYER_FEATURE_BROWSE_MEDIA: '131072'
  MEDIA_PLAYER_FEATURE_REPEAT_SET: '262144'
  MEDIA_PLAYER_FEATURE_GROUPING: '524288'
  MEDIA_PLAYER_FEATURE_MEDIA_ANNOUNCE: '1048576'
  MEDIA_PLAYER_FEATURE_MEDIA_ENQUEUE: '2097152'
  MDI_ICON_PLAY: "\uE409"                # mdi:play
  MDI_ICON_PAUSE: "\uE3E3"               # mdi:pause
  MDI_ICON_VOLUME_VARIANT_OFF: "\uEE07"  # mdi:volume-variant-off
  MDI_ICON_VOLUME_LOW: "\uE57E"          # mdi:volume-low
  TAG_PAGE_MEDIA_PLAYER: nspanel_ha_blueprint.page.media_player

api:
  actions:
    # Dynamically updates the media player page with current state and media information.
    - action: page_media_player
      variables:
        entity: string               # Entity ID of the media player, used for state updates and control.
        state: string                # Current state of the media player (e.g., "playing", "paused", "stopped").
        is_volume_muted: bool        # Indicates if the media volume is currently muted.
        friendly_name: string        # Display name of the media player, shown as the page title.
        volume_level: int            # Current volume level, typically expressed as a percentage.
        media_title: string          # Title of the currently playing media.
        media_artist: string         # Artist of the currently playing media.
        media_duration: float        # Total duration of the current media in seconds.
        media_position: float        # Current playback position in the media in seconds.
        media_position_delta: float  # Time elapsed since the last media position update in seconds.
        supported_features: int      # Bitmask indicating thesupported features (e.g., play, pause, volume control).
      then:
        - lambda: |-
            static DisplayComponent* media_player_bt_on_off = get_component(${PAGE_ID_MEDIA_PLAYER}, "bt_on_off");
            static DisplayComponent* media_player_bt_mute = get_component(${PAGE_ID_MEDIA_PLAYER}, "bt_mute");
            static DisplayComponent* media_player_bt_next = get_component(${PAGE_ID_MEDIA_PLAYER}, "bt_next");
            static DisplayComponent* media_player_bt_play_pause =
                get_component(${PAGE_ID_MEDIA_PLAYER}, "bt_play_pause");
            static DisplayComponent* media_player_bt_prev = get_component(${PAGE_ID_MEDIA_PLAYER}, "bt_prev");
            static DisplayComponent* media_player_bt_vol_down = get_component(${PAGE_ID_MEDIA_PLAYER}, "bt_vol_down");
            static DisplayComponent* media_player_bt_vol_up = get_component(${PAGE_ID_MEDIA_PLAYER}, "bt_vol_up");
            static DisplayComponent* media_player_page_label = get_component(${PAGE_ID_MEDIA_PLAYER}, "page_label");
            static DisplayComponent* media_player_time_current = get_component(${PAGE_ID_MEDIA_PLAYER}, "time_current");
            static DisplayComponent* media_player_time_total = get_component(${PAGE_ID_MEDIA_PLAYER}, "time_total");
            static DisplayComponent* media_player_time_progress =
                get_component(${PAGE_ID_MEDIA_PLAYER}, "time_progress");
            static DisplayComponent* media_player_vol_slider = get_component(${PAGE_ID_MEDIA_PLAYER}, "vol_slider");
            static DisplayComponent* media_player_vol_text = get_component(${PAGE_ID_MEDIA_PLAYER}, "vol_text");
            if (current_page_id == ${PAGE_ID_MEDIA_PLAYER}) {
              detailed_entity->publish_state(entity);
              display_component_update_text->execute(media_player_page_label, friendly_name.c_str());
              display_wrapped_text->execute(${PAGE_ID_MEDIA_PLAYER}, "track", media_title.c_str(),
                                            id(display_mode) == 2 ? 16 : 27);
              display_wrapped_text->execute(${PAGE_ID_MEDIA_PLAYER}, "artist", media_artist.c_str(),
                                            id(display_mode) == 2 ? 26 : 40);

              // on/off button
              display_component_update_visibility->execute(media_player_bt_on_off,
                                                (supported_features & ${MEDIA_PLAYER_FEATURE_TURN_ON})
                                                or (supported_features & ${MEDIA_PLAYER_FEATURE_TURN_OFF}));
              if (media_player_bt_on_off->visible)
                display_component_update_color->execute(media_player_bt_on_off, (state == "off") ? 65535 : 10597);

              // play/pause button
              const bool bt_play_pause_visible = (supported_features & ${MEDIA_PLAYER_FEATURE_PLAY_MEDIA})
                                              or (supported_features & ${MEDIA_PLAYER_FEATURE_PLAY});
              display_component_update_visibility->execute(media_player_bt_play_pause, bt_play_pause_visible);
              if (media_player_bt_on_off->visible)
                display_component_update_text->execute(media_player_bt_play_pause,
                                            (state != "playing" and state != "off") ?
                                            "${MDI_ICON_PLAY}" : "${MDI_ICON_PAUSE}");

              // bt_prev button - PREVIOUS_TRACK
              display_component_update_visibility->execute(media_player_bt_prev,
                                                (supported_features & ${MEDIA_PLAYER_FEATURE_PREVIOUS_TRACK}
                                                and state != "off"));
              // bt_next button - NEXT_TRACK
              display_component_update_visibility->execute(media_player_bt_next,
                                                (supported_features & ${MEDIA_PLAYER_FEATURE_NEXT_TRACK}
                                                and state != "off"));

              // Stop button - STOP
              //display_component_update_visibility->execute(${PAGE_ID_MEDIA_PLAYER}, "bt_stop",
              //                                  (supported_features & ${MEDIA_PLAYER_FEATURE_STOP} and
              //                                  (state == "playing" or state == "paused")));

              // mute/unmute button - VOLUME_MUTE
              set_component_value->execute(${PAGE_ID_MEDIA_PLAYER}, "is_muted", is_volume_muted ? 1 : 0);
              display_component_update_visibility->execute(media_player_bt_mute,
                            (supported_features & ${MEDIA_PLAYER_FEATURE_VOLUME_MUTE}));
              if (media_player_bt_mute->visible)
                display_component_update_text->execute(media_player_bt_mute, is_volume_muted ?
                                                                            "${MDI_ICON_VOLUME_VARIANT_OFF}" :
                                                                            "${MDI_ICON_VOLUME_LOW}");

              // Volume +/- buttons
              display_component_update_visibility->execute(media_player_bt_vol_down,
                                                          (supported_features & ${MEDIA_PLAYER_FEATURE_VOLUME_SET})
                                                        or (supported_features & ${MEDIA_PLAYER_FEATURE_VOLUME_STEP}));
              display_component_update_visibility->execute(media_player_bt_vol_up, media_player_bt_vol_down->visible);

              // Volume slider
              const bool vol_slider_visible = (supported_features & ${MEDIA_PLAYER_FEATURE_VOLUME_SET});
              display_component_update_visibility->execute(media_player_vol_slider, vol_slider_visible);
              display_component_update_visibility->execute(media_player_vol_text, vol_slider_visible);
              if (vol_slider_visible and volume_level != id(media_player_last_volume_level)) {
                id(media_player_last_volume_level) = volume_level;
                disp1->set_component_text_printf("vol_text", "%" PRIu32 "%%", volume_level);
                set_component_value->execute(${PAGE_ID_MEDIA_PLAYER}, "vol_slider", volume_level);
              }

              if (media_duration > 0) {
                if (media_duration != id(media_player_last_media_duration) or
                    media_position != id(media_player_last_media_position)) {
                  id(media_player_last_media_duration) = media_duration;
                  id(media_player_last_media_position) = media_position;
                  set_component_value->execute(${PAGE_ID_MEDIA_PLAYER}, "prg_current",
                                                int(round(min(media_position + media_position_delta, media_duration))));
                }
                set_component_value->execute(${PAGE_ID_MEDIA_PLAYER}, "prg_total", int(round(media_duration)));
                disp1->send_command_printf("prg_timer.en=%i", (state == "playing") ? 1 : 0);
                display_component_update_visibility->execute(media_player_time_current, true);
                display_component_update_visibility->execute(media_player_time_total, true);
                display_component_update_visibility->execute(media_player_time_progress, true);
              } else {
                disp1->send_command("prg_timer.en=0");
                display_component_update_visibility->execute(media_player_time_current, false);
                display_component_update_visibility->execute(media_player_time_total, false);
                display_component_update_visibility->execute(media_player_time_progress, false);
              }
              id(media_player_supported_features) = supported_features;
            }

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (page_id == ${PAGE_ID_MEDIA_PLAYER}) {
              switch (component_id) {
                case ${COMPONENT_ID_MEDIA_PLAYER_BT_VOL_DOWN}:
                  if (touch_event and not (id(media_player_supported_features) & ${MEDIA_PLAYER_FEATURE_VOLUME_SET}))
                    ha_call_action->execute("media_player.volume_down", "", "", detailed_entity->state.c_str());
                  break;
                case ${COMPONENT_ID_MEDIA_PLAYER_BT_VOL_UP}:
                  if (touch_event and not (id(media_player_supported_features) & ${MEDIA_PLAYER_FEATURE_VOLUME_SET}))
                    ha_call_action->execute("media_player.volume_up", "", "", detailed_entity->state.c_str());
                  break;
              }
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_STANDARD_PAGE_MEDIA_PLAYER

globals:
  - id: media_player_last_volume_level  # Last volume level from Home Assistant
    type: uint8_t
    restore_value: false
    initial_value: '0'
  - id: media_player_last_media_duration  # Last duration from Home Assistant
    type: uint
    restore_value: false
    initial_value: '0'
  - id: media_player_last_media_position  # Last duration from Home Assistant
    type: uint
    restore_value: false
    initial_value: '0'
  - id: media_player_supported_features
    type: uint8_t
    restore_value: false
    initial_value: '0'

script:
  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_PAGE_MEDIA_PLAYER}, "PAGE_MEDIA_PLAYER",
                                                    "Page Media Player");

  - id: !extend event_from_display
    then:
      - lambda: |-
          if (page == "${PAGE_NAME_MEDIA_PLAYER}") {
            const std::string key = json["key"];
            if (key == "volume_mute") {
              const std::string value = json["value"];
              ha_call_action->execute("media_player.volume_mute", "is_volume_muted",
                                      value.c_str(), detailed_entity->state.c_str());
            } else if (key == "volume_set") {
              const float value_float = json["value"].as<float>();
              ha_call_action->execute("media_player.volume_set", "volume_level",
                                      to_string(value_float / 100.0f), detailed_entity->state.c_str());
            } else if (!key.empty())
              ha_call_action->execute((std::string("media_player.") + key.c_str()),
                                      "", "", detailed_entity->state.c_str());
          }

  - id: !extend page_changed
    then:
      - lambda: |-
          if (current_page_id == ${PAGE_ID_MEDIA_PLAYER})
            page_media_player->execute();
          else {
            id(media_player_last_volume_level) = 0;
            id(media_player_last_media_duration) = 0;
            id(media_player_last_media_position) = 0;
            id(media_player_supported_features) = 0;
          }

  - id: page_media_player
    mode: restart
    then:  # There's nothing here so far

  - id: !extend stop_all
    then:
      - script.stop: page_media_player
...
