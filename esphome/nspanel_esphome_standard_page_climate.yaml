#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - ALARM PAGE                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
substitutions:
  BOOT_STEP_PAGE_CLIMATE: '12'
  PAGE_ID_CLIMATE: '7'
  TAG_PAGE_CLIMATE: nspanel_ha_blueprint.page.climate

api:
  actions:
    # Dynamically updates the climate page with the latest climate control settings and status.
    - action: page_climate
      variables:
        current_temp: float      # Current temperature reading.
        supported_features: int  # Bitmask indicating the supported features of the climate device.
        target_temp: float       # Desired target temperature setting.
        target_temp_high: float  # Upper limit of the target temperature range for devices supporting ranges.
        target_temp_low: float   # Lower limit of the target temperature range.
        temp_step: int           # Temperature adjustment step size (multiplied by 10 for precision).
        total_steps: int         # Total adjustment steps available, derived from the temperature range and step size.
        temp_offset: int         # Calibration offset applied to the temperature (multiplied by 10 for precision).
        climate_icon: string     # Codepoint representing climate status, from HASwitchPlate Material Design Icons.
        embedded_climate: bool   # Indicates if climate control is integrated into the interface.
        entity: string           # Entity ID of the climate device, allowing for direct control and status updates.
      then:
        - script.stop: set_climate
        - if:
            condition:
              - text_sensor.state:
                  id: current_page
                  state: climate
            then:
              - text_sensor.template.publish:
                  id: detailed_entity
                  state: !lambda return entity;
        - script.execute:
            id: set_climate
            current_temp: !lambda return current_temp;
            supported_features: !lambda return supported_features;
            target_temp: !lambda return target_temp;
            target_temp_high: !lambda return target_temp_high;
            target_temp_low: !lambda return target_temp_low;
            temp_step: !lambda return temp_step;
            total_steps: !lambda return total_steps;
            temp_offset: !lambda return temp_offset;
            climate_icon: !lambda return climate_icon;
            embedded_climate: !lambda return embedded_climate;

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (
                  page_id == ${PAGE_ID_HOME}
                  and id(is_climate)
                  and (
                    component_id == 4      // indr_temp
                    or component_id == 27  // indr_temp_icon
                  )
                ) {
              goto_page_id->execute(${PAGE_ID_CLIMATE}, false);
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_STANDARD_PAGE_CLIMATE

globals:
  - id: is_climate
    type: bool
    restore_value: true
    initial_value: 'true'

  - id: mui_unavailable
    type: std::string
    restore_value: true
    initial_value: '"Unavailable"'
    max_restore_data_length: 25

script:
  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_PAGE_CLIMATE}, "PAGE_CLIMATE", "Page Climate");

  - id: change_climate_state
    mode: restart
    parameters:
      embedded: bool
      key: string
      value: string
    then:
      - lambda: |-
          if (not embedded) {
            if (key == "temperature" or key == "target_temp_high" or key == "target_temp_low")
              ha_call_action->execute("climate.set_temperature",
                                      key.c_str(), to_string(stof(value) / 10),
                                      detailed_entity->state.c_str());
            else if (key == "hvac_mode")
              ha_call_action->execute("climate.set_hvac_mode", key.c_str(), value.c_str(),
                                      detailed_entity->state.c_str());
          }

  - id: !extend entity_details_show_action  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (next_page_id == ${PAGE_ID_CLIMATE})
            set_component_value->execute(${PAGE_ID_CLIMATE}, "embedded", entity_id == "embedded_climate" ? 1 : 0);

  - id: !extend event_from_display  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - if:
          condition:
            - lambda: return page == "climate";
          then:
            - lambda: |-
                const std::string key = json["key"];
                const uint8_t embedded = json["embedded"];
                const std::string value = json["value"];
                change_climate_state->execute(embedded == 1, key.c_str(), value.c_str());

  - id: page_climate
    mode: restart
    then:  # There's nothing here so far

  - id: !extend page_changed
    then:
      - if:
          condition:
            - text_sensor.state:
                id: current_page
                state: climate
          then:
            - script.execute: page_climate

  - id: set_climate
    mode: restart
    parameters:
      current_temp: float
      supported_features: int
      target_temp: float
      target_temp_high: float
      target_temp_low: float
      temp_step: uint
      total_steps: uint
      temp_offset: int
      climate_icon: string
      embedded_climate: bool
    then:
      - lambda: |-
          static DisplayComponent* climate_slider = get_component(${PAGE_ID_CLIMATE}, "climate_slider");
          static DisplayComponent* climate_current_temp = get_component(${PAGE_ID_CLIMATE}, "current_temp");
          static DisplayComponent* climate_dec_separator = get_component(${PAGE_ID_CLIMATE}, "dec_separator");
          static DisplayComponent* climate_decrease_temp = get_component(${PAGE_ID_CLIMATE}, "decrease_temp");
          static DisplayComponent* climate_increase_temp = get_component(${PAGE_ID_CLIMATE}, "increase_temp");
          static DisplayComponent* climate_slider_high = get_component(${PAGE_ID_CLIMATE}, "slider_high");
          static DisplayComponent* climate_slider_low = get_component(${PAGE_ID_CLIMATE}, "slider_low");
          static DisplayComponent* climate_target_high = get_component(${PAGE_ID_CLIMATE}, "target_high");
          static DisplayComponent* climate_target_icon = get_component(${PAGE_ID_CLIMATE}, "target_icon");
          static DisplayComponent* climate_target_low = get_component(${PAGE_ID_CLIMATE}, "target_low");
          static DisplayComponent* climate_temp_offset = get_component(${PAGE_ID_CLIMATE}, "temp_offset");
          if (current_page_id == ${PAGE_ID_CLIMATE}) {
            bool useDecimal = (temp_step % 10 != 0);
            char buffer[15];
            disp1->send_command_printf("climateslider.maxval=%i", total_steps);
            disp1->send_command_printf("slider_high.maxval=%i", total_steps);
            disp1->send_command_printf("slider_low.maxval=%i", total_steps);
            set_component_value->execute(${PAGE_ID_CLIMATE}, "temp_offset", temp_offset);
            set_component_value->execute(${PAGE_ID_CLIMATE}, "temp_step", temp_step);
            char dec_separator_str[2] = {id(mui_decimal_separator), '\0'};
            display_component_update_text->execute(climate_dec_separator, dec_separator_str);
            display_component_update_visibility->execute(climate_current_temp, true);
            if (current_temp > -999) {
              snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", current_temp);
              display_component_update_text->execute(climate_current_temp,
                            adjustDecimalSeparator(buffer, id(mui_decimal_separator)).c_str());
            }
            else
              display_component_update_text->execute(climate_current_temp, id(mui_unavailable).c_str());

            if (target_temp > -999) {  // Target temp enabled
              set_component_value->execute(${PAGE_ID_CLIMATE}, "active_slider", 0);
              snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", target_temp);
              display_component_update_text->execute(climate_target_high,
                                          adjustDecimalSeparator(buffer, id(mui_decimal_separator)).c_str());
              set_component_value->execute(${PAGE_ID_CLIMATE}, "climateslider",
                                            round(((10*target_temp) - temp_offset) / temp_step));
              display_component_update_visibility->execute(climate_slider_high, false);
              display_component_update_visibility->execute(climate_slider_low, false);
              display_component_update_visibility->execute(climate_target_low, false);
              display_component_update_visibility->execute(climate_target_high, true);
              display_component_update_visibility->execute(climate_slider, true);
            } else {
              display_component_update_visibility->execute(climate_slider_high, false);
              if (target_temp_low > -999) {  // Target temp low enabled
                set_component_value->execute(${PAGE_ID_CLIMATE}, "active_slider", 2);
                snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", target_temp_low);
                display_component_update_text->execute(climate_target_low,
                                            adjustDecimalSeparator(buffer, id(mui_decimal_separator)).c_str());
                set_component_value->execute(${PAGE_ID_CLIMATE}, "slider_low",
                                              round(((10*target_temp_low) - temp_offset) / temp_step));
                display_component_update_visibility->execute(climate_target_low, true);
                display_component_update_visibility->execute(climate_slider_low, true);
              } else {
                display_component_update_visibility->execute(climate_target_low, false);
                display_component_update_visibility->execute(climate_slider_low, false);
              }
              if (target_temp_high > -999) {  // Target temp high enabled
                set_component_value->execute(${PAGE_ID_CLIMATE}, "active_slider", 1);
                snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", target_temp_high);
                display_component_update_text->execute(climate_target_high,
                                            adjustDecimalSeparator(buffer, id(mui_decimal_separator)).c_str());
                set_component_value->execute(${PAGE_ID_CLIMATE}, "slider_high",
                                            round(((10*target_temp_high) - temp_offset) / temp_step));
                display_component_update_visibility->execute(climate_target_high, true);
                display_component_update_visibility->execute(climate_slider_high, true);
              } else {
                display_component_update_visibility->execute(climate_target_high, false);
                display_component_update_visibility->execute(climate_slider_high, false);
              }
            }
            if (target_temp > -999 or target_temp_high > -999 or target_temp_low > -999) {
              display_component_update_text->execute(climate_target_icon, climate_icon.c_str());
              display_component_update_visibility->execute(climate_target_icon, true);
              display_component_update_visibility->execute(climate_decrease_temp, true);
              display_component_update_visibility->execute(climate_increase_temp, true);
            } else {
              display_component_update_visibility->execute(climate_target_icon, false);
              display_component_update_visibility->execute(climate_decrease_temp, false);
              display_component_update_visibility->execute(climate_increase_temp, false);
            }
            set_component_value->execute(${PAGE_ID_CLIMATE}, "embedded", (embedded_climate) ? 1 : 0);
          }

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "mui_unavailable")
            id(mui_unavailable) = val;

  - id: !extend stop_all
    then:
      - script.stop: change_climate_state
      - script.stop: page_climate
      - script.stop: set_climate

  - id: !extend set_var_bool
    then:
      - lambda: |-
          if (component == "is_climate")
            id(is_climate) = val;
...
