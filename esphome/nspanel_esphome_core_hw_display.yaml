#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - HARDWARE - Display                                                         #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_HW_DISPLAY: '5'
  DISPLAY_CHARSET_INTERNATIONAL: '1'
  DISPLAY_CHARSET_CJK: '2'
  GPIO_DISPLAY_POWER_PIN: '4'
  GPIO_DISPLAY_POWER_INVERTED: 'true'

packages:
  # yamllint disable rule:colons
  hw_display_timers: !include nspanel_esphome_core_hw_display_timers.yaml
  hw_display_uart:   !include nspanel_esphome_core_hw_display_uart.yaml
  # yamllint enable rule:colons

api:
  actions:
    # Sends custom commands directly to the display for dynamic interactions and updates.
    - action: command
      # Command string to be sent.
      # Refer to the Nextion Instruction Set for supported commands: https://nextion.tech/instruction-set/
      variables:
        cmd: string
      then:
        - lambda: |-
            disp1->send_command(cmd.c_str());

    # Component action
    - action: component
      variables:
        page: string       # Page name
        component: string  # Identifier of the component. See "Screen components" in the documentation.
        txt: string        # The text to display
        color: int[]       # RGB color array for the text, e.g., [0, 255, 0] for green.
        font: int          # font size for text
        visible: bool      # Set to `true` for visible or `false` for hidden.
      then:
        - lambda: |-
            ESP_LOGD("api", "New value for component '%s' on page '%s'",
                      component.c_str(), page.c_str());
            if (not page.empty() and not component.empty())
              display_component_action->execute(get_page_id(page.c_str()), component.c_str(),
                                                txt.c_str(), color, font, visible);

    # Updates the value of a specified component on the display.
    - action: component_val
      variables:
        page: string       # Page where the component is located
        component: string  # Identifier of the component to update. Must match the component's ID in the display layout.
        val: int           # New integer value to set for the component.
      then:
        - lambda: |-
            if (!page.empty() and !component.empty())
              set_component_value->execute(get_page_id(page.c_str()), component.c_str(), val);

    # Displays detailed information for a specific entity.
    - action: entity_details_show
      variables:
        entity_id: string  # The ID of the entity for which details are shown ("embedded_climate" for built-in climate).
        back_page: string  # Specifies the page to return to. Accepts "home" or "buttonpage01" to "buttonpage04".
      then:
        - lambda: |-
            if (not entity_id.empty() and not back_page.empty())
              entity_details_show_action->execute(entity_id.c_str(), get_page_id(back_page.c_str()));

binary_sensor:
  ## Delays initial info from HA to the display #####
  - name: Nextion display
    id: nextion_init
    platform: template
    device_class: connectivity
    publish_initial_state: true
    entity_category: diagnostic
    icon: mdi:tablet-dashboard
    lambda: return disp1->is_setup();

display:
  - id: disp1
    platform: nextion
    command_spacing: 1ms

    on_buffer_overflow:
      then:
        - script.execute: display_command_spacing_increment

    on_page:
      then:
        - lambda: |-
            if (x != current_page_id)
              page_changed->execute(x);

    on_setup:
      then:  # There's nothing here so far
    # Extended by:
    # - nspanel_esphome_core_boot.yaml
    # - nspanel_esphome_core_hw_display_uart.yaml
    # - nspanel_esphome_core_page_boot.yaml

    on_touch:
      then:
      # Extended by
      # - nspanel_esphome_core_display_timers.yaml
      # - nspanel_esphome_core_page_climate.yaml
      # - nspanel_esphome_core_page_fan.yaml
      # - nspanel_esphome_core_page_light.yaml
      # - nspanel_esphome_core_page_notification.yaml
      # - nspanel_esphome_core_page_settings.yaml
      # - nspanel_esphome_core_page_weather.yaml
      # - nspanel_esphome_core_version.yaml

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_HW_DISPLAY
  on_boot:
    - priority: 700.${BOOT_STEP_HW_DISPLAY}
      then:
        - wait_until:
            condition:
              - lambda: return (display_command_spacing->state >= 0 and display_command_spacing->state <= UINT8_MAX);
        - lambda: disp1->set_command_spacing(static_cast<uint8_t>(display_command_spacing->state));

  on_shutdown:
    - priority: 600.${BOOT_STEP_HW_DISPLAY}
      then:
        - switch.turn_off: screen_power
    - priority: 0.5
      then:
        - binary_sensor.template.publish:  # Make it unavailable to blueprint calls
            id: nextion_init
            state: false

# To-do: Remove this when both PR#7948 and PR#7961 are merged and released (v2025.1.0?)
external_components:
  - source:
      type: git
      url: https://github.com/edwardtfn/esphome
      ref: nextion-47
    refresh: 1d
    components:
      - nextion

globals:
  - id: display_charset
    type: uint8_t
    restore_value: false
    initial_value: '0'  # Charset (1 = International (original), 2 = CJK languages)

  - id: display_mode
    type: uint8_t
    restore_value: false
    initial_value: '0'  # 1 = EU, 2 = US, 3 = US landscape, 4 = blank, 5 = US landscape (inverted)

  - id: mui_bytes_per_char
    type: uint8_t
    restore_value: true
    initial_value: '1'

  - id: mui_decimal_separator
    type: char
    restore_value: true
    initial_value: "'.'"

json:  # Can be replaced by web_server

logger:
  logs:
    nextion_textsensor: INFO

number:
  - id: display_brightness  # SCREEN BRIGHTNESS
    name: Brightness - Normal
    platform: template
    entity_category: config
    unit_of_measurement: '%'
    min_value: 1
    max_value: 100
    initial_value: 100
    step: 1
    restore_value: true
    optimistic: true
    internal: false
    device_class: illuminance
    icon: mdi:brightness-6
    on_value:
      then:
        - lambda: |-
            set_variable_value->execute("brightness", static_cast<uint8_t>(x));
      # Extended by:
      #   - nspanel_esphome_core_hw_display_timers.yaml

  - id: display_dim_brightness  # SCREEN BRIGHTNESS DIMMED DOWN
    name: Brightness - Dimmed
    platform: template
    entity_category: config
    unit_of_measurement: '%'
    min_value: 1
    max_value: 100
    initial_value: 25
    step: 1
    restore_value: true
    optimistic: true
    internal: false
    device_class: illuminance
    icon: mdi:brightness-3
    on_value:
      then:
        - lambda: |-
            set_variable_value->execute("brightness_dim", static_cast<uint8_t>(x));
            if (current_page_id != ${PAGE_ID_SCREENSAVER})
              disp1->set_backlight_brightness(x / 100.0f);

  - id: display_sleep_brightness  # SCREEN BRIGHTNESS SLEEP
    name: Brightness - Sleep
    platform: template
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    restore_value: true
    optimistic: true
    internal: false
    device_class: illuminance
    icon: mdi:weather-night
    on_value:
      then:
        - script.execute:
            id: set_variable_value
            variable: brightness_sleep
            val: !lambda return static_cast<uint8_t>(x);
        - script.execute: page_screensaver

  - id: display_command_spacing
    name: Display Command Spacing
    platform: template
    entity_category: config
    min_value: 0
    max_value: 255
    initial_value: 0
    step: 1
    unit_of_measurement: msec
    restore_value: true
    optimistic: true
    internal: false
    icon: mdi:gauge-empty
    disabled_by_default: true
    on_value:
      then:
        - lambda: disp1->set_command_spacing(static_cast<uint8_t>(x));

script:
  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_HW_DISPLAY}, "HW_DISPLAY", "HW Display");

  - id: !extend boot_initialize
    then:
      - lambda: |-
          setup_components();

  - id: !extend boot_sequence
    then:
      - script.wait: scan_baud_rate
      - wait_until:
          condition:
            - lambda: return not isnan(display_sleep_brightness->state);
            - lambda: return not isnan(display_dim_brightness->state);
            - lambda: return not isnan(display_brightness->state);
          timeout: 180s
      - lambda: |-
          page_boot_log->execute("Boot", "Display settings");
          if (not isnan(display_sleep_brightness->state))
            set_variable_value->execute("brightness_sleep", static_cast<uint8_t>(display_sleep_brightness->state));
          if (not isnan(display_dim_brightness->state))
            set_variable_value->execute("brightness_dim", static_cast<uint8_t>(display_dim_brightness->state));
          if (not isnan(display_brightness->state)) {
            set_variable_value->execute("brightness", static_cast<uint8_t>(display_brightness->state));
            disp1->set_backlight_brightness(((current_page_id == ${PAGE_ID_SCREENSAVER}) ?
                                            display_sleep_brightness->state :
                                            display_brightness->state) / 100.0f);
          }
          page_boot_log->execute("Boot", "Display settings completed");

  - id: display_component_action
    mode: parallel
    parameters:
      page_id: uint8_t   # Page id
      component: string  # Identifier of the component. See "Screen components" in the documentation.
      txt: string        # Text to display.
      color: int32_t[]   # RGB color array for the text, e.g., [0, 255, 0] for green.
      font: int          # font size for text
      visible: bool      # Set to `true` for visible or `false` for hidden.
    then:
      # Extended by:
      #   nspanel_esphome_core_hw_relays.yaml
      #   nspanel_esphome_core_page_home.yaml
      #   nspanel_esphome_core_page_screensaver.yaml
      - lambda: |-
          DisplayComponent* display_component = get_component(page_id, component.c_str());

          // Text
          if (!txt.empty())
            display_component_update_text->execute(display_component, txt);

          // Text color
          if (color.size() == 3 and
              color[0] >= 0 and color[0] <= UINT8_MAX and
              color[1] >= 0 and color[1] <= UINT8_MAX and
              color[2] >= 0 and color[2] <= UINT8_MAX)
            display_component_update_color->execute(display_component, color565(color));

          // Text font
          if (font >= 0 and font <= UINT8_MAX)
            display_component_update_font->execute(display_component, font);

          // Text visibility
          display_component_update_visibility->execute(display_component, visible);

  - id: display_component_initialize
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      global: bool
    then:
      - lambda: |-
          DisplayComponent* component_to_initialize = get_component(page_id, component.c_str());
          component_to_initialize->global = global;

  - id: display_component_send
    mode: queued
    parameters:
      display_component: DisplayComponent*
    then:
      - wait_until:
          condition:
            - lambda: return (display_component->page_id == current_page_id);
          timeout: 2s
      - lambda: |-
          if (display_component->page_id == current_page_id or display_component->global) {
            ESP_LOGD("script", "Rendering page %s, component %s",
                      page_names[display_component->page_id], display_component->component);
            if (not display_component->global) {
              display_component_send_text->execute(display_component);
              display_component_send_color->execute(display_component);
              display_component_send_font->execute(display_component);
            }
            if (display_component->page_id == current_page_id)
              display_component_send_visibility->execute(display_component);
          }

  - id: display_component_send_color
    mode: queued
    parameters:
      display_component: DisplayComponent*
    then:
      - if:
          condition:
            - lambda: return (display_component->page_id == current_page_id or display_component->global);
            - lambda: return not display_component->color_is_updated;
          then:
            - lambda: |-
                if ((display_component->global or display_component->page_id == current_page_id) and
                    !display_component->color_is_updated) {
                  disp1->set_component_font_color(
                      (display_component->page_id == current_page_id) ? display_component->component :
                      get_page_and_component(page_names[display_component->page_id],
                                              display_component->component).c_str(),
                      display_component->color);
                  display_component->color_is_updated = true;
                }

  - id: display_component_send_font
    mode: queued
    parameters:
      display_component: DisplayComponent*
    then:
      - if:
          condition:
            - lambda: return (display_component->page_id == current_page_id or display_component->global);
            - lambda: return display_component->font != UINT8_MAX;
            - lambda: return not display_component->font_is_updated;
          then:
            - lambda: |-
                if ((display_component->global or display_component->page_id == current_page_id) and
                    !display_component->font_is_updated) {
                  disp1->set_component_font(
                      (display_component->page_id == current_page_id) ? display_component->component :
                      get_page_and_component(page_names[display_component->page_id],
                                              display_component->component).c_str(),
                      display_component->font);
                  display_component->font_is_updated = true;
                }

  - id: display_component_send_text
    mode: queued
    parameters:
      display_component: DisplayComponent*
    then:
      - if:
          condition:
            - lambda: return (display_component->page_id == current_page_id or display_component->global);
            - lambda: return not display_component->text_is_updated;
          then:
            - lambda: |-
                if ((display_component->global or display_component->page_id == current_page_id) and
                    !display_component->text_is_updated) {
                  disp1->set_component_text(
                      (display_component->page_id == current_page_id) ? display_component->component :
                      get_page_and_component(page_names[display_component->page_id],
                                              display_component->component).c_str(),
                      display_component->text);
                  display_component->text_is_updated = true;
                }

  - id: display_component_send_visibility
    mode: queued
    parameters:
      display_component: DisplayComponent*
    then:
      - if:
          condition:
            - lambda: return display_component->page_id == current_page_id;
            - lambda: return not display_component->visible_is_updated;
          then:
            - lambda: |-
                if (display_component->page_id == current_page_id and !display_component->visible_is_updated) {
                  disp1->send_command_printf("vis %s,%i", display_component->component,
                                              display_component->visible ? 1 : 0);
                  display_component->visible_is_updated = true;
                }

  - id: display_component_update_color
    mode: parallel
    parameters:
      display_component: DisplayComponent*
      new_color: uint16_t
    then:
      - lambda: |-
          if (new_color != display_component->color) {
            display_component->color = new_color;
            display_component->color_is_updated = false;
          }
          if (!display_component->color_is_updated)
            display_component_send_color->execute(display_component);

  - id: display_component_update_font
    mode: parallel
    parameters:
      display_component: DisplayComponent*
      new_font: uint8_t
    then:
      - lambda: |-
          if (new_font != display_component->font) {
            display_component->font = new_font;
            display_component->font_is_updated = false;
          }
          if (!display_component->font_is_updated)
            display_component_send_font->execute(display_component);

  - id: display_component_update_text
    mode: parallel
    parameters:
      display_component: DisplayComponent*
      new_text: string
    then:
      - lambda: |-
          if (new_text != display_component->text) {
            copyStringToCharArray(display_component->text, new_text);
            display_component->text_is_updated = false;
          }
          if (!display_component->text_is_updated)
            display_component_send_text->execute(display_component);

  - id: display_component_update_visibility
    mode: parallel
    parameters:
      display_component: DisplayComponent*
      new_visibility: bool
    then:
      - lambda: |-
          if (new_visibility != display_component->visible) {
            display_component->visible = new_visibility;
            display_component->visible_is_updated = false;
          }
          if (!display_component->visible_is_updated)
            display_component_send_visibility->execute(display_component);

  - id: display_command_spacing_increment
    mode: restart
    then:
      - lambda: |-
          screen_power->turn_off();
          ESP_LOGE("script", "Nextion reported a buffer overflow");
          ESP_LOGE("script", "Increasing the display command spacing...");
      - number.increment:
          id: display_command_spacing
          cycle: false
      - if:
          condition:
            - lambda: return global_preferences->sync();
          then:
            - lambda: |-
                ESP_LOGE("script", "Restarting ESP in 15s to avoid getting out of sync with Nextion");
            - delay: 15s
            - lambda: |-
                ESP_LOGE("script", "Restarting ESP now");
                arch_restart();

  - id: display_wrapped_text
    mode: queued
    max_runs: 15
    parameters:
      page_id: uint8_t
      component: string
      text_to_display: string
      line_length_limit: uint
    then:
      - lambda: |-
          int startPos = 0;
          int endPos = 0;
          std::string wrappedText = "";
          if (text_to_display.find("\\r") != std::string::npos) {
            wrappedText = text_to_display;
          } else {
            while (startPos < text_to_display.length()) {
              while (text_to_display[startPos] == ' ' and startPos < text_to_display.length()) { startPos++; }
              int endPos = startPos + (line_length_limit * id(mui_bytes_per_char));
              if (endPos >= text_to_display.length()) endPos = text_to_display.length();
              else
                {
                  while (endPos > startPos && text_to_display[endPos] != ' ') { endPos--; }
                  if (endPos == startPos)
                    endPos = startPos + (line_length_limit * id(mui_bytes_per_char)); // Handle case of long word
                }
              wrappedText += text_to_display.substr(startPos, endPos-startPos);
              if (endPos < text_to_display.length())
                {
                  while (text_to_display[endPos] == ' ') { endPos--; }
                  if (endPos >= startPos) wrappedText += "\\r";
                }
              startPos = endPos + 1; // Skip the space
              while (text_to_display[startPos] == ' ' and startPos < text_to_display.length()) { startPos++; }
            }
          }
          set_component_text->execute(page_id, component.c_str(), wrappedText.c_str());

  - id: !extend dump_config
    then:
      - lambda: |-
          // Report Nextion status
          nextion_init->publish_state(nextion_init->state and disp1->is_setup());
          ESP_LOGI("${project_tag}", "Nextion:");
          ESP_LOGI("${project_tag}", "  Command spacing: %" PRIu8,
                    static_cast<uint8_t>(display_command_spacing->state));
          ESP_LOGI("${project_tag}", "  Queue size:      %d", disp1->queue_size());
          if (disp1->is_setup())
            ESP_LOGI("${project_tag}", "  Is setup:        True");
          else {
            ESP_LOGW("${project_tag}", "  Is setup:        False");
            ESP_LOGW("${project_tag}", "  Is detected:     %s", YESNO(disp1->is_detected()));
            //exit_reparse->execute();
          }
          if (nextion_init->state) {
            ESP_LOGI("${project_tag}", "  Init:            True");
          } else
            ESP_LOGW("${project_tag}", "  Init:            False");
          if (id(version_tft).empty())
            ESP_LOGW("${project_tag}", "  TFT:             UNKNOWN");
          else
            ESP_LOGI("${project_tag}", "  TFT:             %s", id(version_tft).c_str());

  - id: entity_details_show_action
    mode: restart
    parameters:
      entity_id: string      # ID of the entity for which details are shown ("embedded_climate" for add-on climate).
      back_page_id: uint8_t  # Specifies the page to return to. Accepts "home" or "buttonpage01" to "buttonpage04".
    then:
      - lambda: |-
          size_t dotPos = entity_id.find(".");
          std::string domain;  // The domain part of the entity, like "light" or "switch".
          std::string id;
          if (dotPos != std::string::npos) {
            // Extract domain and id from the entity_id string
            domain = entity_id.substr(0, dotPos);
            id = entity_id.substr(dotPos + 1);
          } else {
            // No dot found, the entire entity_id is considered as id.
            domain = "invalid";
            id = entity_id;
          }
          if (entity_id == "embedded_climate" or domain != "invalid") {
            detailed_entity->publish_state(entity_id.c_str());
            std::string new_page = (entity_id == "embedded_climate" ? "climate" :
                                    (domain == "alarm_control_panel" ? "alarm" : domain));
            goto_page_id->execute(get_page_id(new_page.c_str()), true);
            set_variable_value->execute("back_page_id", back_page_id);
          }

  - id: event_from_display
    mode: parallel
    parameters:
      json: DynamicJsonDocument
      page: string
    then:
      # Extended by:
      #   - nspanel_esphome_core_page_alarm.yaml
      #   - nspanel_esphome_core_page_climate.yaml
      #   - nspanel_esphome_core_page_cover.yaml
      #   - nspanel_esphome_core_page_fan.yaml
      #   - nspanel_esphome_core_page_keyb_num.yaml
      #   - nspanel_esphome_core_page_light.yaml
      #   - nspanel_esphome_core_page_media_player.yaml
      #   - nspanel_esphome_core_versioning.yaml
      - lambda: |-
          if (page.empty()) {
            ESP_LOGW("script", "Received empty page parameter");
            return;
          }

          // Extract required fields with validation
          if (!json.containsKey("event")) {
            ESP_LOGW("script", "Missing required 'event' field in JSON");
            return;
          }
          const std::string event = json["event"].as<std::string>();
          const std::string component = json.containsKey("component") ?
            json["component"].as<std::string>() : "";
          const std::string value = json.containsKey("value") ?
            json["value"].as<std::string>() : "";

          ESP_LOGV("script", "Processing display event: page=%s, event=%s, component=%s",
            page.c_str(), event.c_str(), component.c_str());

          // Handle special events
          if (event == "params") {
            if (!json.containsKey("display_mode") || !json.containsKey("charset")) {
              ESP_LOGW("script", "Missing required display parameters");
              return;
            }

            // Parse display parameters
            id(display_mode) = json["display_mode"].as<uint8_t>();
            id(display_charset) = json["charset"].as<uint8_t>();

            ESP_LOGI("script", "Display parameters received:");
            ESP_LOGI("script", "  Display mode:    %" PRIu8, id(display_mode));
            ESP_LOGI("script", "  Display charset: %" PRIu8, id(display_charset));

            disp1->send_command("tm_esphome.en=0");
            return;
          }

          // Send event to Home Assistant
          esphome::api::CustomAPIDevice ha_event;

          if (event == "short_click" || event == "long_click") {
            if (component.empty()) {
              ESP_LOGW("script", "Missing component for button click event");
              return;
            }

            // Button click event
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint", {
              {"device_name", id(device_name).c_str()},
              {"esphome_version", "${version}"},
              {"type", "button_click"},
              {"page", page.c_str()},
              {"component", component.c_str()},
              {"command", event.c_str()}
            });
          } else {
            // Generic event
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint", {
              {"device_name", id(device_name).c_str()},
              {"esphome_version", "${version}"},
              {"type", "button_click"},
              {"page", page.c_str()},
              {"component", component.c_str()},
              {"event", event.c_str()},
              {"value", value.c_str()},
              {"entity", detailed_entity->state.c_str()}
            });
          }

          ESP_LOGV("script", "Event sent to Home Assistant successfully");

  - id: goto_page_id
    mode: restart
    parameters:
      page_id: uint8_t
      reset_timers: bool
    then:
      - lambda: |-
          next_page_id = page_id;
          disp1->goto_page(page_id);
      # Extended by:
      #   - nspanel_esphome_core_hw_display_timers.yaml

  - id: page_changed
    parameters:
      new_page_id: uint8_t
    mode: restart
    then:
      # This is extended by most of the page's yaml files.
      - lambda: |-
            const bool is_new_page = (new_page_id != current_page_id);
            if (is_new_page) {
              reset_updates_by_page(new_page_id);
              previous_page_id = current_page_id;
              current_page_id = new_page_id;
              current_page->publish_state(page_names[current_page_id]);
              next_page_id = UINT8_MAX;
            }
            if (is_new_page or new_page_id == ${PAGE_ID_BOOT}) {
              // Report new page to logs
              ESP_LOGI("display", "Page changed from \"%s\" to \"%s\"", page_names[previous_page_id],
                        page_names[new_page_id]);

              // Reset entity_id when it does not apply
              if (not is_page_in_group(ENTITY_ID_PAGE_MASK, new_page_id)) {
                detailed_entity->publish_state("");
                set_variable_value->execute("back_page_id", ${PAGE_ID_HOME});
              }

              // Inform Home Assistant about the page change
              esphome::api::CustomAPIDevice ha_event;
              ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint", {
                {"device_name", id(device_name).c_str()},
                {"esphome_version", "${version}"},
                {"type", "page_changed"},
                {"page", page_names[new_page_id]},
                {"from", page_names[previous_page_id]},
                {"entity", detailed_entity->state.c_str()}
              });
            }
            page_changed_rendering_components->execute();

  - id: page_changed_rendering_components
    mode: restart
    then:
      # Extended by:
      #   - nspanel_esphome_core_page_home.yaml
      - lambda: |-
          // Plot page's icons
          std::vector<DisplayComponent*> display_components = list_components_by_page(current_page_id);
          for (DisplayComponent* display_component : display_components) {
            display_component_send->execute(display_component);
          }

  - id: set_component_font
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      font: uint8_t
    then:
      - lambda: |-
          if (page_id == current_page_id)
            disp1->set_component_font(component.c_str(), font);

  - id: set_component_font_color
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      color: uint16_t
    then:
      - lambda: |-
          if (page_id == current_page_id)
            disp1->set_component_font_color(component.c_str(), color);

  - id: set_component_picc
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      picc: uint8_t
    then:
      - lambda: |-
          if (page_id == current_page_id)
            disp1->set_component_picc(component.c_str(), picc);

  - id: set_component_foreground_color
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      color: int
    then:
      - lambda: set_component_font_color->execute(page_id, component.c_str(), color);

  - id: set_component_pic
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      pic: uint8_t
    then:
      - lambda: |-
          if (page_id == current_page_id)
            disp1->set_component_pic(component.c_str(), pic);

  - id: set_component_text
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      text: string
    then:
      - lambda: |-
          if (page_id == current_page_id)
            disp1->set_component_text(component.c_str(), text.c_str());

  - id: set_component_value
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      val: int
    then:
      - lambda: |-
          if (page_id == current_page_id)
            disp1->set_component_value(component.c_str(), val);

  - id: set_component_visibility
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      show: bool
    then:
      - lambda: |-
          if (page_id == current_page_id)
            disp1->send_command_printf("vis %s,%i", component.c_str(), show ? 1 : 0);

  - id: !extend set_var_int
    then:
      - lambda: |-
          if (component == "bytes_per_char")
            id(mui_bytes_per_char) = static_cast<uint8_t>(val);

  - id: !extend set_var_string
    then:
      - lambda: |-
          if (component == "decimal_separator" and !(val.empty()))
            id(mui_decimal_separator) = val[0];

  - id: set_variable_value
    mode: queued
    parameters:
      variable: string
      val: int
    then:
      - lambda: |-
          disp1->send_command_printf("%s=%i", variable.c_str(), val);

  - id: !extend stop_all
    then:
      - lambda: |-
          display_component_action->stop();
          display_component_send->stop();
          display_component_send_color->stop();
          display_component_send_font->stop();
          display_component_send_text->stop();
          display_component_send_visibility->stop();
          display_wrapped_text->stop();
          entity_details_show_action->stop();
          event_from_display->stop();
          goto_page_id->stop();
          page_changed->stop();
          set_component_font_color->stop();
          set_component_pic->stop();
          set_component_picc->stop();
          set_component_text->stop();
          set_component_visibility->stop();

sensor:
  - id: brightslider  # Display Brightness GET VALUE FROM NSPanel SLIDER
    name: brightness Slider
    platform: nextion
    variable_name: brightslider
    internal: true

  - id: dimslider  # Display DIM Brightness GET VALUE FROM NSPanel SLIDER
    name: dim brightness slider
    platform: nextion
    variable_name: dimslider
    internal: true

switch:
  - name: Nextion display - Power  # DISPLAY ALWAYS ON
    platform: gpio
    id: screen_power
    entity_category: diagnostic
    pin:
      number: ${GPIO_DISPLAY_POWER_PIN}
      inverted: ${GPIO_DISPLAY_POWER_INVERTED}
    restore_mode: ALWAYS_ON
    internal: true
    disabled_by_default: false
    on_turn_off:
      then:
        - binary_sensor.template.publish:
            id: nextion_init
            state: false

text_sensor:
  - id: current_page  # Current page name - Used by Blueprint
    name: Current Page
    platform: template
    icon: mdi:tablet-dashboard
    internal: false
    disabled_by_default: false
    filters:
      - lambda: return {page_names[current_page_id]};

  - id: disp1_local_event  # NSPanel event - Execute actions from ESPHome - NO directly push to HA
    name: NSPanel local event
    platform: nextion
    nextion_id: disp1
    component_name: localevent
    internal: true
    on_value:
      then:
        - lambda: |-
            DynamicJsonDocument json(1024);
            DeserializationError error = deserializeJson(json, x.c_str());
            if (error) {
              ESP_LOGE("text_sensor", "Error parsing json: %s", x.c_str());
              ESP_LOGE("text_sensor", "Error: %s", error.c_str());
            } else {
              const std::string page = json["page"];
              event_from_display->execute(json, page.c_str());
            }
...
