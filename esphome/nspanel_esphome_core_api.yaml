#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - API                                                                        #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  device_name: nspanel
  name: ${device_name}
  ##############################
  BOOT_STEP_API: '30'
  TAG_API: nspanel_ha_blueprint.api
  EVENT_NAME: esphome.nspanel_ha_blueprint

api:
  id: api_server
  reboot_timeout: 60min

  on_client_connected:
    then:
      - lambda: |-
          id(page_boot_log).execute("API", (client_info + " connected (" + client_address + ")").c_str());
          if (client_info.find("Home Assistant ") == 0)
            id(api_is_updated) = true;
          else
            id(dump_config).execute();

  actions:
    - action: set_bool
      variables:
        component: string
        val: bool
      then:
        - lambda: |-
            ESP_LOGV("${TAG_API}", "%s: %s", component.c_str(), YESNO(val));
            id(set_var_bool).execute(component.c_str(), val);

    - action: set_int
      variables:
        component: string
        val: int
      then:
        - lambda: |-
            ESP_LOGV("${TAG_API}", "%s: %" PRIi32, component.c_str(), val);
            id(set_var_int).execute(component.c_str(), val);

    - action: set_string
      variables:
        component: string
        val: string
      then:
        - lambda: |-
            ESP_LOGV("${TAG_API}", "%s: %s", component.c_str(), val.c_str());
            id(set_var_string).execute(component.c_str(), val.c_str());

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_API

globals:
  - id: api_is_updated
    type: bool
    restore_value: false
    initial_value: 'false'

script:
  - id: api_reset
    mode: restart
    then:
      - lambda: id(api_is_updated) = false;
      - wait_until:
          condition:
            - lambda: return id(api_is_updated);
          timeout: 10s
      - if:
          condition:
            - lambda: return not id(api_is_updated);
          then:
            - logger.log: API reset
            - delay: 2s
            - lambda: id(api_server).on_shutdown();

  - id: !extend boot_package_register
    then:
      - lambda: id(boot_package_register_add).execute(${BOOT_STEP_API}, "API", "API");

  - id: ha_button
    mode: parallel
    parameters:
      page_id: uint8_t
      component: string
      command: string
    then:
      - lambda: |-
          // Send event to Home Assistant
          esphome::api::CustomAPIDevice ha_event;
          ha_event.fire_homeassistant_event("${EVENT_NAME}", {
            {"device_name", id(device_name).state},
            {"esphome_version", "${version}"},
            {"type", "button_click"},
            {"page", page_names[page_id]},
            {"component", component},
            {"command", command},
            {"tag", "${TAG_API}"}
          });

  - id: ha_call_action
    mode: parallel
    parameters:
      action: string
      key: string
      value: string
      entity: string
    then:
      - lambda: |-
          // Send event to Home Assistant
          esphome::api::CustomAPIDevice ha_event;
          ha_event.fire_homeassistant_event("${EVENT_NAME}", {
            {"device_name", id(device_name).state},
            {"esphome_version", "${version}"},
            {"type", "action_call"},
            {"action", action},
            {"key", key},
            {"value", value},
            {"entity", entity},
            {"tag", "${TAG_API}"}
          });

  - id: set_var_bool
    mode: single
    parameters:
      component: string
      val: bool
    then:  # There's nothing here so far
      - lambda: |-
          ESP_LOGV("${TAG_API}", "%s: %s", component.c_str(), YESNO(val));

  - id: set_var_int
    mode: single
    parameters:
      component: string
      val: int
    then:  # There's nothing here so far
      - lambda: |-
          ESP_LOGV("${TAG_API}", "%s: %i", component.c_str(), val);

  - id: set_var_string
    mode: single
    parameters:
      component: string
      val: string
    then:  # There's nothing here so far
      - lambda: |-
          ESP_LOGV("${TAG_API}", "%s: '%s'", component.c_str(), val.c_str());

  - id: stop_all
    mode: restart
    then:
      - lambda: |-
          id(api_reset).stop();
          id(ha_button).stop();
          id(ha_call_action).stop();
...
