#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME Page Home                                                                         #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_HOME: 17
  PAGE_HOME_ID: 1
  TAG_PAGE_HOME: nspanel.page.home

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_HOME

globals:
  - id: is_climate
    type: bool
    restore_value: true
    initial_value: 'true'

  ##### Date/time formats #####
  - id: home_date_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'
  - id: mui_time_format
    type: std::string
    restore_value: true
    max_restore_data_length: 15
    initial_value: '"%H:%M"'
  - id: home_time_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'
  - id: mui_meridiem_am
    type: std::string
    restore_value: true
    max_restore_data_length: 5
    initial_value: '"AM"'
  - id: mui_meridiem_pm
    type: std::string
    restore_value: true
    max_restore_data_length: 5
    initial_value: '"PM"'

  ##### Chips #####
  - id: home_chip_font_id
    type: uint8_t
    restore_value: true
    initial_value: '7'

  #### Custom buttons ####
  - id: home_custom_buttons_font_id
    type: uint8_t
    restore_value: true
    initial_value: '8'

script:
  - id: !extend action_component_color
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "date_color") {
              id(home_date_color) = color;
              disp1->set_component_font_color(hmi::home::DATE.name, color);
              return;
            } else if (component == "time_color") {
              id(home_time_color) = color;
              disp1->set_component_font_color(hmi::home::TIME.name, color);
              return;
            } else if (component == "utilities_icon_color") {  // Utilities button color
              disp1->set_component_font_color(hmi::home::BT_UTILITIES.name, color);
              return;
            }
          }

  - id: !extend action_component_text
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "") {  // Utilities button
              disp1->set_component_text(hmi::home::BT_UTILITIES.name, txt.c_str());
            }
          }

  - id: !extend action_component_val
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "utilities_enabled") {  // Utilities button enabled
              disp1->send_command_printf("is_utilities=%i", val);
              if (current_page_id == hmi::home::PAGE.id)
                disp1->send_command_printf("vis bt_utilities,%i", val);
              return;
            } else if (component == "is_climate") {
              id(is_climate) = (val != 0);
              return;
            } else if (component == "chip_font") {
              // Chips icon size
              disp1->set_component_font(hmi::home::CHIP_RELAY1.name, val);
              disp1->set_component_font(hmi::home::CHIP_RELAY2.name, val);
              disp1->set_component_font(hmi::home::CHIP_CLIMATE.name, val);
              feed_wdt_delay(${DELAY_DEFAULT});
              for (int i = 1; i <= 7; ++i) {
                disp1->send_command_printf("home.chip%02d.font=%" PRIi32, i, val);
                feed_wdt_delay(${DELAY_SHORT});
              }
              feed_wdt_delay(${DELAY_DEFAULT});
              disp1->set_component_font(hmi::home::WIFI_ICON.name, val);
              disp1->set_component_font(hmi::home::BT_ICON.name, val);
              id(home_chip_font_id) = val;
              return;
            } else if (component == "custom_buttons_font") {
              // Custom buttons icon size
              id(home_custom_buttons_font_id) = val;
              for (int i = 1; i <= 7; ++i) {
                disp1->send_command_printf("home.button%02d.font=%" PRIu8, i, val);
                feed_wdt_delay(${DELAY_SHORT});
              }
              feed_wdt_delay(${DELAY_DEFAULT});
              disp1->set_component_font(hmi::home::BT_NOTIFIC.name, val);
              disp1->set_component_font(hmi::home::BT_QRCODE.name, val);
              disp1->set_component_font(hmi::home::BT_ENTITIES.name, val);
              blueprint_status_flags.page_home = true;
              return;
            } else if (component == "outdoor_temp_font") {  // Outdoor temperature font size
              disp1->set_component_font(hmi::home::OUTDOOR_TEMP.name, val);
              return;
            }
          }

  - id: !extend boot_nextion
    then:
      - lambda: |-
          // Setup Home page
          boot_log->execute("Boot", "Set Home page elements");

          // Bluetooth icon
          #if defined(USE_ESP32_BLE_SERVER) || defined(USE_ESP32_BLE_CLIENT) || defined(USE_BLUETOOTH_PROXY)
          disp1->set_component_font_color(hmi::home::BT_ICON.name, Colors::BLUE_BLUETOOTH);
          feed_wdt_delay(${DELAY_SHORT});
          #endif
          // Refresh relay chips with correct state-based colors after blueprint settings are received
          refresh_relays->execute(3);
          feed_wdt_delay(${DELAY_DEFAULT});

          // Chips icon size
          for (uint8_t i = 1; i <= 7; ++i) {
            disp1->send_command_printf("home.chip%02d.font=%i", i, id(home_chip_font_id));
            feed_wdt_delay(${DELAY_SHORT});
          }
          feed_wdt_delay(${DELAY_DEFAULT});

          // Custom buttons icon size
          for (uint8_t i = 1; i <= 7; ++i) {
            disp1->send_command_printf("home.button%02d.font=%i", i, id(home_custom_buttons_font_id));
            feed_wdt_delay(${DELAY_SHORT});
          }
          feed_wdt_delay(${DELAY_DEFAULT});

          // Other components icons size and color
          disp1->set_component_font(hmi::home::BT_ENTITIES.name, id(home_custom_buttons_font_id));
          disp1->set_component_font(hmi::home::WIFI_ICON.name, id(home_chip_font_id));
          feed_wdt_delay(${DELAY_DEFAULT});

          // Set relay chips to invisible initially (will be updated by refresh_relays when home page loads)
          disp1->set_component_font_color(hmi::home::CHIP_RELAY1.name, Colors::BLACK);
          disp1->set_component_font_color(hmi::home::CHIP_RELAY2.name, Colors::BLACK);
          feed_wdt_delay(${DELAY_DEFAULT});

  - id: !extend event_from_display
    then:
      - lambda: |-
          if (params[0] == "home" and (params[1] == "short_click" or params[1] == "long_click")) {
            // CSV Format: home,<event>,<component>
            // params[0]=page, params[1]=event, params[2]=component

            if (params_count != 3) {
              ESP_LOGW("${TAG_PAGE_HOME}", "Bad params");
              return;
            }

            const std::string& component = params[2];

            if (api_server->is_connected() and component == "weather") {
              goto_page->execute(${PAGE_WEATHER01_ID});
            } else if (id(is_climate) and (component == "indr_temp" or component == "indr_temp_icon")) {
              detailed_entity->publish_state((id(is_embedded_thermostat)) ? "embedded_climate" : "");
              disp1->set_component_value("climate.embedded", id(is_embedded_thermostat) ? 1 : 0);
              goto_page->execute(${PAGE_CLIMATE_ID});
            }
          }

  - id: !extend page_change
    then:
      - lambda: if (new_page_id == hmi::home::PAGE.id) page_home->execute();

  - id: page_home
    mode: single
    then:
      - script.execute:
          id: refresh_relays
          relay_mask: 3

  - id: !extend stop_all
    then:
      - lambda: page_home->stop();  // Page home is an exception to the stop_page_constructor, as it can be constructed in the background
...
