#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME Page Home                                                                         #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_HOME: 17
  PAGE_HOME_ID: 1
  TAG_PAGE_HOME: nspanel.page.home

api:
  actions:
    # Sets up the "Home" page in ESPHome with customized settings and UI elements as defined in the project blueprint.
    - action: init_page_home
      variables:
        date_color: int[]                      # RGB color array for the date display.
        time_format: string                    # Time display format string, utilizing standard formatting symbols.
        time_color: int[]                      # RGB color array for the time display.
        meridiem: string[]                     # Optional array for AM/PM labels if included in time format.
        chip_font: int                         # Font Id for chip icons displayed on the "Home" page.
        custom_buttons_font: int               # Font Id for icons on custom buttons.
        qrcode: bool                           # Enable/disable flag for QR code button display.
        qrcode_icon: string                    # Icon codepoint for QR code button, sourced from HASwitchPlate Material Design Icons.
        qrcode_icon_color: int[]               # RGB color array for QR code button icon.
        entities_pages_icon: string            # Icon codepoint for entities page button, sourced from HASwitchPlate Material Design Icons.
        entities_pages_icon_color: int[]       # RGB color array for entities page button icon.
        utilities: bool                        # Enable/disable flag for utilities page button display.
        utilities_icon: string                 # Icon codepoint for utilities page button, sourced from HASwitchPlate Material Design Icons.
        utilities_icon_color: int[]            # RGB color array for utilities page button icon.
        outdoor_temp_font: int                 # Font Id for outdoor temperature indication on the "Home" page.
      then:
        - lambda: |-
            boot_log->execute("Service", "init_page_home");

            // Time format
            id(mui_time_format) = time_format;
            if (meridiem.size() == 2) {
              id(mui_meridiem_am) = meridiem[0];
              id(mui_meridiem_pm) = meridiem[1];
            }

            // Date & Time colors
            id(home_date_color) = rgbTo565(date_color);
            id(home_time_color) = rgbTo565(time_color);
            disp1->set_component_font_color("home.date", id(home_date_color));
            disp1->set_component_font_color("home.time", id(home_time_color));
            feed_wdt_delay(${DELAY_SHORT});

            // Chips icon size
            disp1->set_component_font("home.chip_relay1", chip_font);
            disp1->set_component_font("home.chip_relay2", chip_font);
            disp1->set_component_font("home.chip_climate", chip_font);
            for (int i = 1; i <= 7; ++i) {
              disp1->send_command_printf("home.chip%02d.font=%" PRIi32, i, chip_font);
              feed_wdt_delay(${DELAY_SHORT});
            }
            disp1->set_component_font("home.wifi_icon", chip_font);
            id(home_chip_font_id) = chip_font;

            // Custom buttons icon size
            id(home_custom_buttons_font_id) = custom_buttons_font;
            for (int i = 1; i <= 7; ++i) {
              disp1->send_command_printf("home.button%02d.font=%" PRIu8, i, id(home_custom_buttons_font_id));
              feed_wdt_delay(${DELAY_SHORT});
            }
            disp1->set_component_font("home.bt_notific", id(home_custom_buttons_font_id));
            disp1->set_component_font("home.bt_qrcode", id(home_custom_buttons_font_id));
            disp1->set_component_font("home.bt_entities", id(home_custom_buttons_font_id));
            feed_wdt_delay(${DELAY_SHORT});

            // Outdoor temperature font size
            disp1->set_component_font("home.outdoor_temp", outdoor_temp_font);

            // QRCode button
            disp1->set_component_text("home.bt_qrcode", qrcode_icon.c_str());
            disp1->set_component_font_color("home.bt_qrcode", rgbTo565(qrcode_icon_color));
            if (current_page_id == ${PAGE_HOME_ID}) disp1->send_command_printf("vis bt_qrcode,%i", qrcode ? 1 : 0);
            feed_wdt_delay(${DELAY_SHORT});

            // Entities pages button
            disp1->set_component_text("home.bt_entities", entities_pages_icon.c_str());
            disp1->set_component_font_color("home.bt_entities", rgbTo565(entities_pages_icon_color));
            if (current_page_id == ${PAGE_HOME_ID}) {
              disp1->send_command("is_entitypages=is_entitypage01|is_entitypage02|is_entitypage03|is_entitypage04");
              disp1->send_command("vis bt_entities,is_entitypages");
            }
            feed_wdt_delay(${DELAY_SHORT});

            // Utilities button
            disp1->send_command_printf("is_utilities=%i", utilities ? 1 : 0);
            disp1->set_component_text("home.bt_utilities", utilities_icon.c_str());
            disp1->set_component_font_color("home.bt_utilities", rgbTo565(utilities_icon_color));
            if (current_page_id == ${PAGE_HOME_ID}) disp1->send_command("vis bt_utilities,is_utilities");

            // Update blueprint status
            blueprint_status_flags.page_home = true;

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_HOME

globals:
  - id: is_climate
    type: bool
    restore_value: true
    initial_value: 'true'

  ##### Date/time formats #####
  - id: home_date_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'
  - id: mui_time_format
    type: std::string
    restore_value: true
    max_restore_data_length: 15
    initial_value: '"%H:%M"'
  - id: home_time_color
    type: uint16_t
    restore_value: true
    initial_value: '65535'
  - id: mui_meridiem_am
    type: std::string
    restore_value: true
    max_restore_data_length: 5
    initial_value: '"AM"'
  - id: mui_meridiem_pm
    type: std::string
    restore_value: true
    max_restore_data_length: 5
    initial_value: '"PM"'

  ##### Chips #####
  - id: home_chip_font_id
    type: uint8_t
    restore_value: true
    initial_value: '7'

  #### Custom buttons ####
  - id: home_custom_buttons_font_id
    type: uint8_t
    restore_value: true
    initial_value: '8'

script:
  - id: !extend action_component_val
    then:
      - lambda: |-
          if (page == "mem" and component == "is_climate")
            id(is_climate) = (val != 0);

  - id: !extend event_from_display
    then:
      - lambda: |-
          if (params[0] == "home" and (params[1] == "short_click" or params[1] == "long_click")) {
            // CSV Format: home,<event>,<component>
            // params[0]=page, params[1]=event, params[2]=component

            if (params_count != 3) {
              ESP_LOGW("${TAG_PAGE_HOME}", "Bad params");
              return;
            }

            const std::string& component = params[2];

            if (api_server->is_connected() and component == "weather") {
              goto_page->execute(${PAGE_WEATHER01_ID});
            } else if (id(is_climate) and (component == "indr_temp" or component == "indr_temp_icon")) {
              detailed_entity->publish_state((id(is_embedded_thermostat)) ? "embedded_climate" : "");
              disp1->set_component_value("climate.embedded", id(is_embedded_thermostat) ? 1 : 0);
              goto_page->execute(${PAGE_CLIMATE_ID});
            }
          }

  - id: !extend page_change
    then:
      - lambda: if (new_page_id == ${PAGE_HOME_ID}) page_home->execute();

  - id: page_home
    mode: single
    then:
      - script.execute:
          id: refresh_relays
          relay_mask: 3

  - id: !extend stop_all
    then:
      - lambda: page_home->stop();  // Page home is an exception to the stop_page_constructor, as it can be constructed in the background
...
