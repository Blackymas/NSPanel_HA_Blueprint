#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - PAGE - QRCODE                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  qrcode_initial_value: ''
  qrcode_title_initial_value: ''
  qrcode_icon_color_initial_value: 'Colors::GRAY_LIGHT'
  qrcode_restore_value: false
  qrcode_size: 222
  qrcode_background_color: 65535
  qrcode_foreground_color: 0
  qrcode_border_size: 8
  PAGE_QRCODE_ID: 17
  TAG_PAGE_QRCODE: nspanel.page.qrcode

api:
  actions:
    # Dynamically displays QR codes on the ESPHome UI for sharing information such as WiFi passwords or website links.
    - action: qrcode
      variables:
        title: string   # Heading or title for the QR code, offering context or instructions.
        qrcode: string  # Data or URL to be encoded into the QR code.
        show: bool      # Flag to immediately display the QR code page upon service invocation.
      then:
        - lambda: |-
            ESP_LOGV("${TAG_PAGE_QRCODE}", "Action: qrcode");
            ESP_LOGV("${TAG_PAGE_QRCODE}", "  title: %s", title.c_str());
            ESP_LOGV("${TAG_PAGE_QRCODE}", "  qrcode: %s", qrcode.c_str());
            ESP_LOGV("${TAG_PAGE_QRCODE}", "  show: %s", YESNO(show));
            // Validate QR code length (Nextion limit: 77 characters)
            if (qrcode.length() > 77) {
              ESP_LOGE("${TAG_PAGE_QRCODE}", "QR code exceeds Nextion limit: %zu chars (max 77)", qrcode.length());
              return;
            }  // if (qrcode.length() > 77)

            id(qrcode_title) = title;
            id(qrcode_string) = qrcode;
            if (show) {
              goto_page->execute(hmi::qrcode::PAGE.id);
            } else {
              page_qrcode->execute();
            }
            page_home_icon_visibility->execute(hmi::home::BT_QRCODE.name,
                                                id(qrcode_icon_color),
                                                (not id(qrcode_string).empty()));

            // Update blueprint status
            blueprint_status_flags.qrcode = true;

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (touch_event) return;  // Ignore the touch, so only the release will be used
            if (page_id == hmi::home::PAGE.id and            // Page `home`
                component_id == hmi::home::BT_QRCODE.id and  // QRcode button
                !id(qrcode_string).empty()) {                // QRcode string is not empty
              goto_page->execute(hmi::qrcode::PAGE.id);
              return;
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_QRCODE

globals:
  - id: qrcode_icon_color
    type: uint16_t
    restore_value: ${qrcode_restore_value}
    initial_value: '${qrcode_initial_value}'

  - id: qrcode_string
    type: std::string
    restore_value: ${qrcode_restore_value}
    initial_value: '${qrcode_initial_value}'

  - id: qrcode_title
    type: std::string
    restore_value: ${qrcode_restore_value}
    initial_value: '${qrcode_title_initial_value}'

script:
  - id: !extend action_component_color
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "qrcode_icon_color") {
              id(qrcode_icon_color) = color;
              page_home_icon_visibility->execute(hmi::home::BT_QRCODE.name,
                                                  id(qrcode_icon_color),
                                                  (not id(qrcode_string).empty()));
              blueprint_status_flags.qrcode = true;
              return;
            }
          }

  - id: !extend action_component_text
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "qrcode_icon") {
              disp1->set_component_text(hmi::home::BT_QRCODE.name, txt.c_str());
              blueprint_status_flags.qrcode = true;
              return;
            }
          }

  - id: !extend action_component_val
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "qrcode_enabled") {
              if (val < 1) id(qrcode_string) = "";
              page_home_icon_visibility->execute(hmi::home::BT_QRCODE.name,
                                                  id(qrcode_icon_color),
                                                  (not id(qrcode_string).empty()));
              blueprint_status_flags.qrcode = true;
              return;
            }
          }

  - id: !extend boot
    then:
      - lambda: |-
          disp1->set_component_font(hmi::home::BT_QRCODE.name, id(home_custom_buttons_font_id));

  - id: !extend page_change
    then:
      - lambda: if (new_page_id == hmi::qrcode::PAGE.id) page_qrcode->execute();

  - id: !extend page_home
    then:
      - lambda: |-
          page_home_icon_visibility->execute(hmi::home::BT_QRCODE.name,
                                              id(qrcode_icon_color),
                                              (not id(qrcode_string).empty()));

  - id: page_qrcode
    mode: single
    then:  # There's nothing here so far
      - lambda: |-
          if (current_page_id != hmi::qrcode::PAGE.id) {
            return;  // Page QRcode not visible
          }
          if (not id(qrcode_title).empty()) {
            disp1->set_component_text(hmi::qrcode::QRCODE_LABEL.name, id(qrcode_title).c_str());
          }
          if (!id(qrcode_string).empty()) {
            // 1) Resolve canvas size by mode
            const uint16_t canvas_w = (display_mode == 2) ? 320 : 470;
            const uint16_t canvas_h = (display_mode == 2) ? 480 : 320;

            // 2) Decide the rendered QR size in pixels.
            //    In ESPHome's qrcode(), `size` is the final *pixel width/height* of the drawn QR,
            //    including any quiet-zone computed from `border`. So we can center using it directly.
            const uint16_t qr_px = ${qrcode_size};

            // 3) Top-left position to center
            //    Clamp to 0 just in case someone sets qr_px > canvas dimension.
            int16_t x = (int16_t)((canvas_w - qr_px) / 2);
            int16_t y = (int16_t)((canvas_h - qr_px) / 2);
            if (x < 0) x = 0;
            if (y < 0) y = 0;

            // 4) Draw
            disp1->qrcode(
                (uint16_t)x,
                (uint16_t)y,
                id(qrcode_string).c_str(),
                qr_px,
                ${qrcode_background_color},
                ${qrcode_foreground_color},
                -1,                      // auto version (or your desired level)
                ${qrcode_border_size}    // quiet-zone in modules; size() already accounts for it
            );
          }

  - id: !extend stop_page_constructors
    then:
      - lambda: page_qrcode->stop();
...
