#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - ALARM PAGE                                                                 #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  BOOT_STEP_PAGE_ALARM: '10'
  PAGE_ID_ALARM: '23'
  TAG_PAGE_ALARM: nspanel_ha_blueprint.page.alarm

api:
  actions:
    # Updates the alarm settings page with current state and configuration, integrating with the panel's interface.
    - action: page_alarm
      variables:
        state: string            # Current state of the alarm system (e.g., "armed_home", "disarmed").
        supported_features: int  # Bitmask representing the alarm system's supported features.
        code_format: string      # Format required for the alarm code (numeric, alphanumeric).
        code_arm_required: bool  # Indicates if a code is needed to arm the system.
        entity: string           # Entity ID for the alarm system, enabling state updates and control.
        mui_alarm: string[]      # Localized text for alarm control buttons (e.g., Arm, Disarm).
      then:
        - lambda: |-
            if (current_page_id == ${PAGE_ID_ALARM}) {  // Update alarm page
              detailed_entity->publish_state(entity.c_str());

              // Alarm page code format
              set_component_text->execute(${PAGE_ID_ALARM}, "code_arm_req", code_arm_required ? "1" : "0");

              // Alarm page buttons
              alarm_button_renderer->execute("disarm", mui_alarm[5].c_str(), true, state == "disarmed");
              alarm_button_renderer->execute("home", mui_alarm[0].c_str(),
                                              supported_features & 1, state == "armed_home");
              alarm_button_renderer->execute("away", mui_alarm[1].c_str(),
                                              supported_features & 2, state == "armed_away");
              alarm_button_renderer->execute("night", mui_alarm[2].c_str(),
                                              supported_features & 4, state == "armed_night");
              alarm_button_renderer->execute("vacat", mui_alarm[3].c_str(),
                                              supported_features & 32, state == "armed_vacation");
              alarm_button_renderer->execute("bypass", mui_alarm[4].c_str(),
                                              supported_features & 16, state == "armed_bypass");
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_STANDARD_PAGE_ALARM

script:
  - id: alarm_button_renderer
    mode: restart
    parameters:
      button_name: string
      button_text: string
      is_feature_supported: bool
      state_is_current: bool
    then:
      - lambda: |-
          display_wrapped_text->execute(${PAGE_ID_ALARM}, ("bt_" + button_name + "_text").c_str(),
                                        button_text.c_str(), 10);
          if (is_feature_supported) {
            set_component_pic->execute(${PAGE_ID_ALARM}, ("bt_" + button_name + "_pic").c_str(),
                                        state_is_current ? 38 : 37);
            disp1->set_component_background_color(("bt_" + button_name + "_text").c_str(),
                                        state_is_current ? 19818 : 52857);
            disp1->set_component_background_color(("bt_" + button_name + "_icon").c_str(),
                                        state_is_current ? 19818 : 52857);
            set_component_font_color->execute(${PAGE_ID_ALARM}, ("bt_" + button_name + "_text").c_str(),
                                        state_is_current ? 65535 : 0);
            set_component_font_color->execute(${PAGE_ID_ALARM}, ("bt_" + button_name + "_icon").c_str(),
                                        state_is_current ? 65535 : 0);
            set_component_visibility->execute(${PAGE_ID_ALARM}, ("bt_" + button_name).c_str(),
                                        state_is_current);
          }

  - id: alarm_control_panel_action
    mode: restart
    parameters:
      entity: string
      key: string
      code_format: string
      pin: string
    then:
      - if:
          condition:
            - lambda: return pin.empty();
          then:
            - homeassistant.action:
                action: &alarm_control_panel_action !lambda |-
                  return "alarm_control_panel.alarm_" + ((key == "bypass") ? "custom_bypass" : key);
                data:
                  entity_id: !lambda return entity;
          else:
            - homeassistant.action:
                action: *alarm_control_panel_action
                data:
                  entity_id: !lambda return entity;
                  code: !lambda return pin;

  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_PAGE_ALARM}, "PAGE_ALARM", "Page Alarm");

  - id: !extend dump_config  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          // Check for requirements
          #if !defined(NSPANEL_HA_BLUEPRINT_STANDARD_PAGE_KEYB_NUM)
            #error "The package nspanel_esphome_standard_page_keyb_num.yaml is required."
          #endif

  - id: !extend event_from_display
    then:
      - if:
          condition:
            - lambda: return page == "alarm";
          then:
            - lambda: |-
                const std::string key = json["key"];
                const std::string code_format = json["code_format"];
                const std::string code_arm_req = json["code_arm_req"];
                if (code_format == "number" and (key == "disarm" or code_arm_req == "1")) {
                  goto_page_id->execute(${PAGE_ID_KEYB_NUM}, true);
                  const std::string value = json["value"];
                  const std::string mui = json["mui"];
                  set_component_value->execute(${PAGE_ID_KEYB_NUM}, "page_id", ${PAGE_ID_ALARM});
                  set_component_text->execute(${PAGE_ID_KEYB_NUM}, "domain", page.c_str());
                  set_component_text->execute(${PAGE_ID_KEYB_NUM}, "key", key.c_str());
                  set_component_text->execute(${PAGE_ID_KEYB_NUM}, "value", value.c_str());
                  set_component_text->execute(${PAGE_ID_KEYB_NUM}, "entity", detailed_entity->state.c_str());
                  set_component_text->execute(${PAGE_ID_KEYB_NUM}, "title", mui.c_str());
                } else {
                  alarm_control_panel_action->execute(detailed_entity->state.c_str(), key.c_str(),
                                                      code_format.c_str(), "");
                }

  - id: !extend stop_all
    then:
      - lambda: |-
          alarm_button_renderer->stop();
          alarm_control_panel_action->stop();
...
