#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - HARDWARE - BUZZER                                                          #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
###############################

---
substitutions:
  ##############################
  ## Change only in your      ##
  ## local yaml substitutions ##
  temp_units: "°C"
  ##############################
  BOOT_STEP_HW_TEMPERATURE: '8'

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_STANDARD_HW_TEMPERATURE

external_components:  # To-do: Remove this when PR#7942 is merged and released (v2025.1.0?)
  - source: github://pr#7942
    components:
      - adc

globals:
  - id: embedded_indoor_temp  # Is embedded sensor used for indoor temperature?
    type: bool
    restore_value: true
    initial_value: 'true'
  - id: temperature_is_celsius
    type: bool
    restore_value: false
    initial_value: 'true'

logger:
  logs:
    ntc: INFO
    resistance: INFO

number:
  - id: temperature_adjustment
    name: Temperature Adjustment
    platform: template
    entity_category: config
    unit_of_measurement: °C
    min_value: -10
    max_value: 10
    initial_value: 0
    step: 0.1
    mode: box
    restore_value: true
    internal: false
    icon: mdi:thermometer-minus
    device_class: temperature
    optimistic: true
    on_value:
      then:
        - logger.log: Temperature correction changed.
        - delay: 1s
        - lambda: temp_nspanel->publish_state(temp_nspanel->raw_state);

script:
  - id: !extend boot_initialize
    then:
      - lambda: |-
          std::string temp_units = "${temp_units}";
          id(temperature_is_celsius) = not (temp_units == "°F" || temp_units == "F" ||
                                            temp_units == "°f" || temp_units == "f");

  - id: !extend boot_package_register
    then:
      - lambda: boot_package_register_add->execute(${BOOT_STEP_HW_TEMPERATURE}, "HW_TEMPERATURE", "HW Temperature");

  - id: display_embedded_temp
    mode: restart
    then:
      - lambda: |-
          static DisplayComponent* indr_temp = get_component(${PAGE_ID_HOME}, "indr_temp");
          if (id(embedded_indoor_temp) or !wifi_component->is_connected() or !api_server->is_connected()) {
            const std::string temp_units = "${temp_units}";
            const bool temp_unit_fahrenheit = (temp_units == "°F" ||
                                                temp_units == "F" ||
                                                temp_units == "°f" ||
                                                temp_units == "f");
            char buffer[15]; // Buffer for formatted temperature string
            if (temp_unit_fahrenheit) {
              snprintf(buffer, sizeof(buffer), "%.0f${temp_units}",
                      (id(temp_nspanel).state * 9.0 / 5.0) + 32); // Fahrenheit with no decimal
            } else {
              snprintf(buffer, sizeof(buffer), "%.1f${temp_units}",
                      id(temp_nspanel).state); // Celsius with one decimal
            }
            display_component_update_text->execute(indr_temp,
                                                  adjustDecimalSeparator(buffer, id(mui_decimal_separator)));
          }

  - id: !extend set_var_bool
    then:
      - lambda: |-
          if (component == "emb_indoor_temp")
            id(embedded_indoor_temp) = val;

  - id: !extend stop_all
    then:
      - script.stop: display_embedded_temp

sensor:
  - id: ntc_source  # INTERNAL TEMPERATURE SENSOR, ADC VALUE
    platform: adc
    pin: 38
    attenuation: 12db
    samples: 4
    update_interval: 10s
    filters:
      - sliding_window_moving_average:
          window_size: 6
          send_every: 1

  - id: resistance_sensor  # INTERNAL TEMPERATURE SENSOR, adc reading converted to resistance (calculation)
    platform: resistance
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - id: temp_nspanel  # INTERNAL TEMPERATURE SENSOR, resistance to temperature (calculation)
    name: Temperature
    platform: ntc
    sensor: resistance_sensor
    unit_of_measurement: °C
    internal: false
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    filters:
      - lambda: |-
          return x + temperature_adjustment->state;
    on_value:
      then:
        - script.execute: display_embedded_temp  # Show panel's temperature if API or Wi-Fi are out
...
