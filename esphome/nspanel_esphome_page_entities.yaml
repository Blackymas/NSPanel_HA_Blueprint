#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - Page Entities                                                              #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_ENTITIES: 15
  PAGE_ENTITYPAGE01_ID: 18
  PAGE_ENTITYPAGE02_ID: 19
  PAGE_ENTITYPAGE03_ID: 20
  PAGE_ENTITYPAGE04_ID: 21
  half_width_chars: "iljtIf '-,;:!.\\\"|()[]{}*^~\\\\/_"
  TAG_PAGE_ENTITIES: nspanel.page.entities

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_ENTITIES

script:
  - id: !extend action_component_text
    then:
      - lambda: |-
          if (page.find("entitypage") == 0) {
            if (
                not txt.empty() and  // There's nothing to adjust if the value is empty
                component.find("_") == std::string::npos  // Applyes only to value itself. No label or icon.
                ) {
              // Value - Adjust decimal separator
              if (not id(mui_decimal_separator).empty() and id(mui_decimal_separator) != ".") {
                disp1->set_component_text(
                          component.c_str(),
                          adjustDecimalSeparator(
                                                  txt,
                                                  id(mui_decimal_separator).empty() ? '.' : id(mui_decimal_separator)[0]
                                                ).c_str()
                );
              }

              // Value - Adjust font
              // Adjusted length starts at 0
              float adjusted_length = 0.0;

              // Iterate over each character in the string
              for (char const &c: txt) {
                // Check if character is a space or other specified exceptions
                if (display_charset == 2 or std::string("${half_width_chars}").find(c) != std::string::npos) {
                  adjusted_length += 0.5; // Count these as half
                } else {
                  adjusted_length += 1.0; // Count all other characters as 1
                }
              }
              // Decide which font to use based on adjusted length
              if (adjusted_length > 8.0 and adjusted_length <= 12.0) {
                disp1->set_component_font(component.c_str(), 1);
              } else if (adjusted_length > 12.0) {
                disp1->set_component_font(component.c_str(), 0);
              }
            }
          }

  - id: !extend action_component_val
    then:
      - lambda: |-
          if (page == "mem" and component == "ent_value_xcen") {  // Entities pages alignment
            ESP_LOGD("${TAG_PAGE_ENTITIES}", "Set value alignment on entities pages: %i", val);
            page_entities_value_horizontal_alignment = val;
          }

  - id: !extend page_change
    then:
      - lambda: |-
          if (new_page_id == ${PAGE_ENTITYPAGE01_ID}) page_entitypage01->execute();
          else if (new_page_id == ${PAGE_ENTITYPAGE02_ID}) page_entitypage02->execute();
          else if (new_page_id == ${PAGE_ENTITYPAGE03_ID}) page_entitypage03->execute();
          else if (new_page_id == ${PAGE_ENTITYPAGE04_ID}) page_entitypage04->execute();

  - id: page_entitypage
    mode: single
    parameters:
      page_number: uint
    then:
      - lambda: |-
          // Set value alignment
          if (
                page_entities_value_horizontal_alignment != 1 and
                (
                  current_page_id == ${PAGE_ENTITYPAGE01_ID} or
                  current_page_id == ${PAGE_ENTITYPAGE02_ID} or
                  current_page_id == ${PAGE_ENTITYPAGE03_ID} or
                  current_page_id == ${PAGE_ENTITYPAGE04_ID}
                )
              ) {
            for (uint8_t i = 1; i <= 8; ++i) {
              disp1->send_command_printf("value%02d.xcen=%" PRIu8, i, page_entities_value_horizontal_alignment);
            }
          }

  - id: page_entitypage01
    mode: single
    then:
      - script.execute:
          id: page_entitypage
          page_number: 1
  - id: page_entitypage02
    mode: single
    then:
      - script.execute:
          id: page_entitypage
          page_number: 2
  - id: page_entitypage03
    mode: single
    then:
      - script.execute:
          id: page_entitypage
          page_number: 3
  - id: page_entitypage04
    mode: single
    then:
      - script.execute:
          id: page_entitypage
          page_number: 4

  - id: !extend stop_page_constructors
    then:
      - lambda: |-
          page_entitypage->stop();
          page_entitypage01->stop();
          page_entitypage02->stop();
          page_entitypage03->stop();
          page_entitypage04->stop();
...
