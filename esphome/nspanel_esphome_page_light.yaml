#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME - Page light                                                                      #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_LIGHT: 19
  PAGE_LIGHT_ID: 10
  TAG_PAGE_LIGHT: nspanel.page.light

display:
  - id: !extend disp1
    on_touch:
      then:
        - lambda: |-
            if (
                  page_id == ${PAGE_LIGHT_ID} and  // Page light
                  !touch_event and                 // Release
                  component_id == 32               // power button
                ) {
              fire_ha_event("action_call", {
                {"action", "light.toggle"},
                {"entity", detailed_entity->state.c_str()}
              });
            }

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_LIGHT

script:
  - id: !extend event_from_display
    then:
      - lambda: |-
          if (params[0] == "light") {
            // CSV Format varies by type:
            // light,brightness_pct,<value>
            // light,color_temp,<value>
            // light,rgb_color,<red>,<green>,<blue>
            // light,<component>,<event>,<value>

            if (params_count < 3) {
              ESP_LOGW("${TAG_PAGE_LIGHT}", "Need 3+ params");
              return;
            }

            // Handle brightness and color temperature
            if (params[1] == "brightness_pct" or params[1] == "color_temp") {
              if (params_count != 3) {
                ESP_LOGW("${TAG_PAGE_LIGHT}", "Need 3 params");
                return;
              }

              ESP_LOGV("${TAG_PAGE_LIGHT}", "key=%s, value=%s",
                        params[1].c_str(), params[2].c_str());

              fire_ha_event("action_call", {
                {"action", "light.turn_on"},
                {"key", params[1].c_str()},
                {"value", params[2].c_str()},
                {"entity", detailed_entity->state.c_str()}
              });

            } else if (params[1] == "rgb_color") {
              // RGB color: light,rgb_color,<red>,<green>,<blue>
              if (params_count != 5) {
                ESP_LOGW("${TAG_PAGE_LIGHT}", "Need 5 params");
                return;
              }

              ESP_LOGV("${TAG_PAGE_LIGHT}", "RGB: r=%s, g=%s, b=%s",
                        params[2].c_str(), params[3].c_str(), params[4].c_str());

              fire_ha_event("action_call", {
                {"action", "light.turn_on"},
                {"key", "rgb_color"},
                {"red", params[2].c_str()},
                {"green", params[3].c_str()},
                {"blue", params[4].c_str()},
                {"entity", detailed_entity->state.c_str()}
              });

            } else {
              // Generic event: light,<component>,<event>,<value>
              if (params_count != 4) {
                ESP_LOGW("${TAG_PAGE_LIGHT}", "Bad params");
                return;
              }

              ESP_LOGV("${TAG_PAGE_LIGHT}", "component=%s, event=%s, value=%s",
                        params[1].c_str(), params[2].c_str(), params[3].c_str());

              fire_ha_event("generic", {
                {"page", "light"},
                {"component", params[1].c_str()},
                {"event", params[2].c_str()},
                {"value", params[3].c_str()},
                {"entity", detailed_entity->state.c_str()}
              });
            }
          }

  - id: !extend page_change
    then:
      - lambda: if (new_page_id == ${PAGE_LIGHT_ID}) page_light->execute();

  - id: page_light
    mode: single
    then:  # There's nothing here so far

  - id: !extend stop_page_constructors
    then:
      - lambda: page_light->stop();
...
