#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME - Page light                                                                      #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

---
substitutions:
  BOOT_STEP_PAGE_LIGHT: 19
  PAGE_LIGHT_ID: 10
  TAG_PAGE_LIGHT: nspanel.page.light

display:
  - id: !extend disp1
    on_touch:
      then:
        - if:
            condition:
              - lambda: return (!touch_event);  // Release
              - lambda: return (page_id == 10);  // Page light
              - lambda: return (component_id == 32);  // power button
            then:
              - script.execute:
                  id: ha_call_action
                  service: "light.toggle"
                  key: ""
                  value: ""

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_LIGHT

script:
  - id: !extend event_from_display
    then:
      - if:
          condition:
            - lambda: return (page == "light");
          then:
            - lambda: |-
                // Extract component with proper null checking
                const std::string component = json["component"].isNull() ? "" : json["component"].as<std::string>();
                ESP_LOGV("${TAG_PAGE_LIGHT}", "  component: %s", component.c_str());

                // Extract key with proper null checking
                const std::string key = json["key"].isNull() ? "" : json["key"].as<std::string>();
                ESP_LOGV("${TAG_PAGE_LIGHT}", "  key: %s", key.c_str());

                // Check for missing value key
                if (json["value"].isNull()) {
                  ESP_LOGW("${TAG_PAGE_LIGHT}", "Missing 'value' key");
                  return;
                } // endif json["value"].isNull()

                // Handle brightness and color temperature
                if (key == "brightness_pct" || key == "color_temp") {
                  ESP_LOGV("${TAG_PAGE_LIGHT}", "Set light attributes");
                  const std::string value = json["value"].isNull() ? "" : json["value"].as<std::string>();
                  ESP_LOGV("${TAG_PAGE_LIGHT}", "  value: %s", value.c_str());
                  ha_call_action->execute("light.turn_on", key.c_str(), value.c_str());
                } else if (component == "rgb_color") { // endif brightness/color_temp
                  // Validate that value is an array before assignment
                  if (!json["value"].is<JsonArray>()) {
                    ESP_LOGW("${TAG_PAGE_LIGHT}", "Expected array for rgb_color but got different type");
                    return;
                  } // endif !is<JsonArray>()
                  
                  JsonArray rgb_color = json["value"].as<JsonArray>();
                  
                  // Validate array size
                  if (rgb_color.size() != 3) {
                    ESP_LOGW("${TAG_PAGE_LIGHT}", "Invalid RGB array size: %zu (expected 3)", rgb_color.size());
                    return;
                  } // endif rgb_color.size() != 3
                  
                  // Validate each RGB component is a valid integer
                  for (size_t i = 0; i < 3; i++) {
                    if (rgb_color[i].isNull() || !rgb_color[i].is<int>()) {
                      ESP_LOGW("${TAG_PAGE_LIGHT}", "Invalid RGB component at index %zu", i);
                      return;
                    } // endif invalid component
                    
                    const int rgb_value = rgb_color[i].as<int>();
                    if (rgb_value < 0 || rgb_value > 255) {
                      ESP_LOGW("${TAG_PAGE_LIGHT}", "RGB component %zu out of range: %d (0-255)", i, rgb_value);
                      return;
                    } // endif out of range
                  } // endfor RGB validation
                  
                  // Send event to Home Assistant
                  ESP_LOGD("${TAG_PAGE_LIGHT}", "Setting light color");
                  esphome::api::CustomAPIDevice ha_event;
                  ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint", {
                    {"device_name", id(device_name).state},
                    {"esphome_version", "${version}"},
                    {"type", "action_call"},
                    {"action", "light.turn_on"},
                    {"key", "rgb_color"},
                    {"red", to_string(rgb_color[0].as<int>())},
                    {"green", to_string(rgb_color[1].as<int>())},
                    {"blue", to_string(rgb_color[2].as<int>())},
                    {"entity", detailed_entity->state.c_str()},
                    {"tag", "${TAG_PAGE_LIGHT}"}
                  });
                } // endif component == "rgb_color"

  - id: !extend page_change
    then:
      - if:
          condition:
            - lambda: return new_page_id == ${PAGE_LIGHT_ID};
          then:
            - script.execute: page_light

  - id: page_light
    mode: single
    then:  # There's nothing here so far

  - id: !extend stop_page_constructors
    then:
      - script.stop: page_light
...
