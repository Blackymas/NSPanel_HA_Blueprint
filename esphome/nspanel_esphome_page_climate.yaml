#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME - Page climate                                                                    #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  BOOT_STEP_PAGE_CLIMATE: 12
  PAGE_CLIMATE_ID: 7
  TAG_PAGE_CLIMATE: nspanel.page.climate

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_CLIMATE

script:
  - id: !extend event_from_display  # Defined by nspanel_esphome_core_hw_display.yaml
    then:
      - lambda: |-
          if (page == "climate") {
            if (json["key"].isNull() || json["value"].isNull()) {
              ESP_LOGW("${TAG_PAGE_CLIMATE}", "Missing climate fields 'key' or 'value'");
              return;
            } // endif missing fields

            const std::string key = json["key"].as<std::string>();
            const std::string value = json["value"].as<std::string>();


            if (!json["embedded"].isNull()) {
              const uint8_t embedded = json["embedded"].as<uint8_t>();
              change_climate_state->execute(embedded == 1, key.c_str(), value.c_str());
            }

            const std::string component = json["component"].isNull() ? "" : json["component"].as<std::string>();
            esphome::api::CustomAPIDevice ha_event;
            // Send event to Home Assistant
            ha_event.fire_homeassistant_event("esphome.nspanel_ha_blueprint", {
              {"device_name", device_name->state.c_str()},
              {"esphome_version", "${version}"},
              {"type", "generic"},
              {"page", page.c_str()},
              {"component", component.c_str()},
              {"event", event.c_str()},
              {"value", value.c_str()},
              {"entity", detailed_entity->state.c_str()}
            });
          }

  - id: !extend page_change
    then:
      - if:
          condition:
            - lambda: return new_page_id == ${PAGE_CLIMATE_ID};
          then:
            - script.execute: page_climate

  - id: page_climate
    mode: single
    then:  # There's nothing here so far

  - id: set_climate
    mode: restart
    parameters:
      current_temp: float
      supported_features: int
      target_temp: float
      target_temp_high: float
      target_temp_low: float
      temp_step: uint
      total_steps: uint
      temp_offset: int
      climate_icon: string
      embedded_climate: bool
    then:
      - lambda: |-
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "Script: set_climate");
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  current_temp: %f", current_temp);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  supported_features: %i", supported_features);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  target_temp: %f", target_temp);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  target_temp_high: %f", target_temp_high);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  target_temp_low: %f", target_temp_low);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  temp_step: %u", temp_step);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  total_steps: %u", total_steps);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  temp_offset: %i", temp_offset);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  climate_icon: %s", climate_icon.c_str());
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  embedded_climate: %s", YESNO(embedded_climate));
          
          if (current_page_id != ${PAGE_CLIMATE_ID}) {
            ESP_LOGW("${TAG_PAGE_CLIMATE}", "'set_climate' was called when page 'climate' is not visible");
            return;
          }
          if (!is_device_ready_for_tasks()) {
            ESP_LOGW("${TAG_PAGE_CLIMATE}", "'set_climate' was called while the device is not ready for tasks");
            return;
          }
          disp1->send_command_printf("climateslider.maxval=%i", total_steps);
          disp1->send_command_printf("slider_high.maxval=%i", total_steps);
          disp1->send_command_printf("slider_low.maxval=%i", total_steps);
          disp1->set_component_value("temp_offset", temp_offset);
          disp1->set_component_value("temp_step", temp_step);
          const char dec_separator_str[2] = {id(mui_decimal_separator)[0], '\0'};
          disp1->set_component_text("dec_separator", dec_separator_str);
          disp1->show_component("current_temp");
          char buffer[15];
          const bool useDecimal = (temp_step % 10 != 0);

          // Feed watchdog
          delay(${DELAY_DEFAULT});
          App.feed_wdt();

          if (current_temp > -999) {  // Current temp enabled
            ESP_LOGV("${TAG_PAGE_CLIMATE}", "Show current temperature");
            snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", current_temp);
            disp1->set_component_text("current_temp",
                                      adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());
          } else {
            ESP_LOGV("${TAG_PAGE_CLIMATE}", "Show current temperature 'unavailable'");
            disp1->set_component_text("current_temp", id(mui_unavailable_global).c_str());
          }

          // Feed watchdog
          delay(${DELAY_DEFAULT});
          App.feed_wdt();

          uint8_t active_slider = UINT8_MAX;

          if (target_temp > -999) {  // Target temp enabled
            active_slider = 0;

            snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", target_temp);
            disp1->set_component_text("target_high",
                                      adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());

            disp1->set_component_value("climateslider", round(((10*target_temp) - temp_offset) / temp_step));

            disp1->hide_component("slider_high");
            disp1->hide_component("slider_low");
            disp1->hide_component("target_low");

            disp1->show_component("target_high");
            disp1->show_component("climateslider");

          } else {

            disp1->hide_component("slider_high");

            if (target_temp_low > -999) {  // Target temp low enabled
              active_slider = 2;

              snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", target_temp_low);
              disp1->set_component_text("target_low",
                                        adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());

              disp1->set_component_value("slider_low", round(((10*target_temp_low) - temp_offset) / temp_step));

              disp1->show_component("target_low");
              disp1->show_component("slider_low");

            } else {
              disp1->hide_component("target_low");
              disp1->hide_component("slider_low");
            }

            // Feed watchdog
            delay(${DELAY_DEFAULT});
            App.feed_wdt();

            if (target_temp_high > -999) {  // Target temp high enabled
              active_slider = 1;

              snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f°" : "%.0f°", target_temp_high);
              disp1->set_component_text("target_high",
                                        adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());

              disp1->set_component_value("slider_high", round(((10*target_temp_high) - temp_offset) / temp_step));

              disp1->show_component("target_high");
              disp1->show_component("slider_high");
            } else {
              disp1->hide_component("target_high");
              disp1->hide_component("slider_high");
            }
          }

          // Feed watchdog
          delay(${DELAY_DEFAULT});
          App.feed_wdt();

          if (
                target_temp > -999 or       // Target temp enabled
                target_temp_high > -999 or  // Target temp high enabled
                target_temp_low > -999      // Target temp low enabled
              ) {
            disp1->set_component_text("target_icon", climate_icon.c_str());
            disp1->show_component("target_icon");
            disp1->show_component("decrease_temp");
            disp1->show_component("increase_temp");
          } else {
            disp1->hide_component("target_icon");
            disp1->hide_component("decrease_temp");
            disp1->hide_component("increase_temp");
          }

          // Feed watchdog
          delay(${DELAY_DEFAULT});
          App.feed_wdt();

          if (active_slider != UINT8_MAX)
            disp1->set_component_value("active_slider", active_slider);

          disp1->set_component_value("embedded", (embedded_climate) ? 1 : 0);

  - id: !extend stop_page_constructors
    then:
      - script.stop: page_climate
      - script.stop: set_climate
...
