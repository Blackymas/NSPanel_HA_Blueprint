#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME - Page climate                                                                    #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
---
substitutions:
  BOOT_STEP_PAGE_CLIMATE: 12
  PAGE_CLIMATE_ID: 7
  TAG_PAGE_CLIMATE: nspanel.page.climate
  mui_unavailable: Unavailable

api:
  actions:
    # Dynamically updates the climate page with the latest climate control settings and status.
    - action: page_climate
      variables:
        current_temp: float      # Current temperature reading.
        supported_features: int  # Bitmask indicating the supported features of the climate device, such as temperature control (1) and fan mode (4).
        target_temp: float       # Desired target temperature setting.
        target_temp_high: float  # Upper limit of the target temperature range for devices supporting ranges.
        target_temp_low: float   # Lower limit of the target temperature range.
        temp_step: int           # Temperature adjustment step size, indicating the granularity of changes (multiplied by 10 for precision).
        total_steps: int         # Total adjustment steps available, derived from the device's temperature range and step size.
        temp_offset: int         # Calibration offset applied to the temperature reading (multiplied by 10 for precision).
        climate_icon: string     # Icon codepoint representing the current climate status, chosen from HASwitchPlate Material Design Icons.
        embedded_climate: bool   # Indicates if climate control is integrated into the interface.
        entity: string           # Entity ID of the climate device, allowing for direct control and status updates.
      then:
        - lambda: |-
            ESP_LOGV("${TAG_API}", "Action: page_climate");
            ESP_LOGV("${TAG_API}", "  current_temp: %f", current_temp);
            ESP_LOGV("${TAG_API}", "  supported_features: %i", supported_features);
            ESP_LOGV("${TAG_API}", "  target_temp: %i", target_temp);
            ESP_LOGV("${TAG_API}", "  target_temp_high: %f", target_temp_high);
            ESP_LOGV("${TAG_API}", "  target_temp_low: %f", target_temp_low);
            ESP_LOGV("${TAG_API}", "  temp_step: %i", temp_step);
            ESP_LOGV("${TAG_API}", "  total_steps: %i", total_steps);
            ESP_LOGV("${TAG_API}", "  temp_offset: %i", temp_offset);
            ESP_LOGV("${TAG_API}", "  climate_icon: %s", climate_icon.c_str());
            ESP_LOGV("${TAG_API}", "  embedded_climate: %s", YESNO(embedded_climate));
            ESP_LOGV("${TAG_API}", "  entity: %s", entity.c_str());

            // Set detailed entity sensor
            if (current_page_id == ${PAGE_CLIMATE_ID})
              detailed_entity->publish_state(entity.c_str());

            set_climate_current_temp = current_temp;
            set_climate_supported_features = supported_features;
            set_climate_target_temp = target_temp;
            set_climate_target_temp_high = target_temp_high;
            set_climate_target_temp_low = target_temp_low;
            set_climate_temp_step = temp_step;
            set_climate_total_steps = total_steps;
            set_climate_temp_offset = temp_offset;
            set_climate_climate_icon = climate_icon;
            set_climate_embedded_climate = embedded_climate;

        - script.execute: set_climate

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_PAGE_CLIMATE

globals:
  - id: is_embedded_thermostat  # Is embedded thermostat set as main climate entity?
    type: bool
    restore_value: true
    initial_value: 'false'

  - id: mui_unavailable
    type: std::string
    restore_value: true
    initial_value: '"${mui_unavailable}"'
    max_restore_data_length: 25

script:
  - id: !extend action_component_text
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "mui_unavailable") {
              id(mui_unavailable) = txt;
            }
          }

  - id: !extend action_component_val
    then:
      - lambda: |-
          if (page == "mem") {
            if (component == "embedded_climate") {
              id(is_embedded_thermostat) = val;
            }
          }

  - id: !extend event_from_display  # Defined by hw_display
    then:
      - lambda: |-
          if (params[0] == "climate") {
              // CSV Format: climate,key,<value>,...
              // params[0]=page, params[1]=key, params[2]=value,...

            if (params_count < 3) {
              ESP_LOGW("${TAG_PAGE_CLIMATE}", "Bad params");
              return;
            }

            const std::string& key = params[1];
            const std::string& value = params[2];

            if (key == "temperature") {
              // CSV Format: climate,temperature,<value*10>,<embedded>
              // params[0]=page, params[1]=temperature, params[2]=temperature value, params[3]=embedded (0/1)

              if (params_count != 4) {
                ESP_LOGW("${TAG_PAGE_CLIMATE}", "Bad params");
                return;
              }
              const std::string& embedded = params[3];
              change_climate_state->execute(embedded == "1", key.c_str(), value.c_str());
            }

            fire_ha_event("generic", {  // Send event to Home Assistant
              {"page", "climate"},
              {"value", value.c_str()},
              {"entity", detailed_entity->state.c_str()}
            });
          }

  - id: !extend page_change
    then:
      - lambda: if (new_page_id == ${PAGE_CLIMATE_ID}) page_climate->execute();

  - id: page_climate
    mode: single
    then:  # There's nothing here so far

  - id: set_climate
    mode: restart
    then:
      - lambda: |-
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "Script: set_climate");
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_current_temp: %f", set_climate_current_temp);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_supported_features: %i", set_climate_supported_features);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_target_temp: %f", set_climate_target_temp);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_target_temp_high: %f", set_climate_target_temp_high);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_target_temp_low: %f", set_climate_target_temp_low);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_temp_step: %u", set_climate_temp_step);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_total_steps: %u", set_climate_total_steps);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_temp_offset: %i", set_climate_temp_offset);
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_climate_icon: %s", set_climate_climate_icon.c_str());
          ESP_LOGV("${TAG_PAGE_CLIMATE}", "  set_climate_embedded_climate: %s", YESNO(set_climate_embedded_climate));

          if (current_page_id != ${PAGE_CLIMATE_ID}) {
            ESP_LOGW("${TAG_PAGE_CLIMATE}", "'set_climate' was called when page 'climate' is not visible");
            return;
          }
          if (!is_device_ready_for_tasks()) {
            ESP_LOGW("${TAG_PAGE_CLIMATE}", "'set_climate' was called while the device is not ready for tasks");
            return;
          }
          disp1->send_command_printf("climateslider.maxval=%i", set_climate_total_steps);
          disp1->send_command_printf("slider_high.maxval=%i", set_climate_total_steps);
          disp1->send_command_printf("slider_low.maxval=%i", set_climate_total_steps);
          disp1->set_component_value("temp_offset", set_climate_temp_offset);
          disp1->set_component_value("temp_step", set_climate_temp_step);
          const char dec_separator_str[2] = {id(mui_decimal_separator)[0], '\0'};
          disp1->set_component_text("dec_separator", dec_separator_str);
          disp1->show_component("current_temp");
          char buffer[15];
          const bool useDecimal = (set_climate_temp_step % 10 != 0);
          feed_wdt_delay(${DELAY_SHORT});

          if (set_climate_current_temp > -999) {  // Current temp enabled
            ESP_LOGV("${TAG_PAGE_CLIMATE}", "Show current temperature");
            snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f째" : "%.0f째", set_climate_current_temp);
            disp1->set_component_text("current_temp",
                                      adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());
          } else {
            ESP_LOGV("${TAG_PAGE_CLIMATE}", "Show current temperature 'unavailable'");
            disp1->set_component_text("current_temp", id(mui_unavailable).c_str());
          }
          feed_wdt_delay(${DELAY_SHORT});

          uint8_t active_slider = UINT8_MAX;

          if (set_climate_target_temp > -999) {  // Target temp enabled
            active_slider = 0;

            snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f째" : "%.0f째", set_climate_target_temp);
            disp1->set_component_text("target_high",
                                      adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());

            disp1->set_component_value("climateslider",
                              round(((10*set_climate_target_temp) - set_climate_temp_offset) / set_climate_temp_step));

            disp1->hide_component("slider_high");
            disp1->hide_component("slider_low");
            disp1->hide_component("target_low");

            disp1->show_component("target_high");
            disp1->show_component("climateslider");

          } else {

            disp1->hide_component("slider_high");

            if (set_climate_target_temp_low > -999) {  // Target temp low enabled
              active_slider = 2;

              snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f째" : "%.0f째", set_climate_target_temp_low);
              disp1->set_component_text("target_low",
                                        adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());

              disp1->set_component_value("slider_low",
                          round(((10*set_climate_target_temp_low) - set_climate_temp_offset) / set_climate_temp_step));

              disp1->show_component("target_low");
              disp1->show_component("slider_low");

            } else {
              disp1->hide_component("target_low");
              disp1->hide_component("slider_low");
            }
            feed_wdt_delay(${DELAY_SHORT});

            if (set_climate_target_temp_high > -999) {  // Target temp high enabled
              active_slider = 1;

              snprintf(buffer, sizeof(buffer), (useDecimal) ? "%.1f째" : "%.0f째", set_climate_target_temp_high);
              disp1->set_component_text("target_high",
                                        adjustDecimalSeparator(buffer, id(mui_decimal_separator)[0]).c_str());

              disp1->set_component_value("slider_high",
                        round(((10*set_climate_target_temp_high) - set_climate_temp_offset) / set_climate_temp_step));

              disp1->show_component("target_high");
              disp1->show_component("slider_high");
            } else {
              disp1->hide_component("target_high");
              disp1->hide_component("slider_high");
            }
          }
          feed_wdt_delay(${DELAY_SHORT});

          if (
                set_climate_target_temp > -999 or       // Target temp enabled
                set_climate_target_temp_high > -999 or  // Target temp high enabled
                set_climate_target_temp_low > -999      // Target temp low enabled
              ) {
            disp1->set_component_text("target_icon", set_climate_climate_icon.c_str());
            disp1->show_component("target_icon");
            disp1->show_component("decrease_temp");
            disp1->show_component("increase_temp");
          } else {
            disp1->hide_component("target_icon");
            disp1->hide_component("decrease_temp");
            disp1->hide_component("increase_temp");
          }
          feed_wdt_delay(${DELAY_SHORT});

          if (active_slider != UINT8_MAX)
            disp1->set_component_value("active_slider", active_slider);

          disp1->set_component_value("embedded", (set_climate_embedded_climate) ? 1 : 0);

  - id: !extend stop_page_constructors
    then:
      - lambda: |-
          page_climate->stop();
          set_climate->stop();
...
