#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHOME CORE - HARDWARE - BUZZER                                                          #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################

##### External references #####
# nspanel_esphome_core.yaml:
#   api.actions.notification_show
###############################

---
substitutions:
  BOOT_STEP_HW_WIFI: '9'
  MDI_ICON_API_OFF: "\uF256"         # mdi:api-off
  MDI_ICON_HOME_ASSISTANT: "\uE7CF"  # mdi:home-assistant
  MDI_ICON_RESTART: "\uE708"         # mdi:restart
  MDI_ICON_WIFI: "\uE5A8"            # mdi:wifi
  MDI_ICON_WIFI_OFF: "\uE5A9"        # mdi:wifi-off
  TAG_HW_WIFI: nspanel_ha_blueprint.hw.wifi

api:
  on_client_connected:
    then:
      - script.execute: refresh_wifi_icon
  on_client_disconnected:
    then:
      - script.execute: refresh_wifi_icon

esphome:
  platformio_options:
    build_flags:
      - -D NSPANEL_HA_BLUEPRINT_CORE_HW_WIFI
  on_boot:
    - priority: 600.${BOOT_STEP_HW_WIFI}  # This is where most sensors are set up.
      then:
        - if:
            condition: &condition_NOT_safe_mode
              - lambda: return nspanel_ha_blueprint::current_panel_state != nspanel_ha_blueprint::PanelState::SAFE_MODE;
            then:
              - text_sensor.template.publish:
                  id: device_name
                  state: ${name}

script:
  - id: !extend boot_package_register
    then:
      - lambda: id(boot_package_register_add).execute(${BOOT_STEP_HW_WIFI}, "HW_WIFI", "HW Wi-Fi");

  - id: !extend dump_config
    then:
      - lambda: |-
          if (id(wifi_component).is_connected()) {
            ESP_LOGCONFIG("${TAG_HW_WIFI}", "Wi-Fi: %.0f dBm", id(wifi_rssi).state);
          } else {
            ESP_LOGE("${TAG_HW_WIFI}", "Wi-Fi: DISCONNECTED");
          }
          ESP_LOGCONFIG("${TAG_HW_WIFI}", "Device: %s", id(device_name).state);

  - id: !extend page_boot
    then:
      - script.execute: page_boot_wifi

  - id: page_boot_wifi
    mode: restart
    then:
      - lambda: |-
          if (!id(wifi_component).is_connected())
            id(page_boot_log).execute("Boot", "Waiting WiFi");
      - wait_until:
          condition:
            - lambda: return id(wifi_component).is_connected();
            - lambda: return current_page_id == ${PAGE_ID_BOOT};
          timeout: 20s
      - lambda: |-
          if (current_page_id == ${PAGE_ID_BOOT})
            id(disp1).set_component_text_printf("sys_ip", "IP: %s", network::get_ip_addresses()[0].str().c_str());

  - id: !extend page_home
    then:
      - script.execute: refresh_wifi_icon

  - id: refresh_wifi_icon
    mode: restart
    then:
      - lambda: |-
          ESP_LOGV("${TAG_HW_WIFI}", "Refresh WiFi icon");
          static DisplayComponent* wifi_icon = get_component(${PAGE_ID_HOME}, "wifi_icon");
          static bool blueprint_is_connected = false;
          static bool api_is_connected = false;
          static bool wifi_is_connected = false;
          static bool wifi_rssi_warning = false;
          bool status_has_changed = blueprint_is_connected != is_boot_step_completed(${BOOT_STEP_VERSIONING}) or
                                    wifi_is_connected != id(wifi_component).is_connected() or
                                    api_is_connected != id(api_server).is_connected();
          if (status_has_changed) {
            ESP_LOGV("${TAG_HW_WIFI}", "Status changed");
            blueprint_is_connected = is_boot_step_completed(${BOOT_STEP_VERSIONING});
            api_is_connected = id(api_server).is_connected();
            wifi_is_connected = id(wifi_component).is_connected();
            // Update Wi-Fi icon
            char new_wifi_icon[5] = "\0";  // Allocate sufficient space to store UTF-8 icon
            if (wifi_is_connected) {
                if (api_is_connected) {
                    if (blueprint_is_connected) {
                        copyStringToCharArray(new_wifi_icon, "${MDI_ICON_WIFI}");
                    } else {
                        copyStringToCharArray(new_wifi_icon, "${MDI_ICON_HOME_ASSISTANT}");
                    }
                } else {
                    copyStringToCharArray(new_wifi_icon, "${MDI_ICON_API_OFF}");
                }
            } else {
                copyStringToCharArray(new_wifi_icon, "${MDI_ICON_WIFI_OFF}");
            }

            if (new_wifi_icon[0] != '\0' and strcmp(wifi_icon->text, new_wifi_icon) != 0)
              id(display_component_update_text).execute(wifi_icon, new_wifi_icon);

            ESP_LOGV("${TAG_HW_WIFI}", "WiFi icon: %s (\\u%04" PRIx32 ")", new_wifi_icon, decode_utf8(new_wifi_icon));
            id(set_variable_value).execute("api",
                                        (blueprint_is_connected and api_is_connected and wifi_is_connected) ? 1 : 0);
          }

          // Update Wi-Fi icon color
          if (status_has_changed or (wifi_rssi_warning != (id(wifi_rssi).state <= -70))) {
            ESP_LOGVV("${TAG_HW_WIFI}", "RSSI changed");
            wifi_rssi_warning = (id(wifi_rssi).state <= -70);
            id(display_component_update_color).execute(wifi_icon,
                                                    (blueprint_is_connected and wifi_is_connected and api_is_connected)
                                                    ? (wifi_rssi_warning ? 64992 : 33808)
                                                    : 63488);
          }

  - id: !extend stop_all
    then:
      - lambda: |-
          id(page_boot_wifi).stop();
          id(refresh_wifi_icon).stop();

  - id: !extend time_watchdog  # Defined by nspanel_esphome_core_base.yaml
    then:
      - lambda: |-
          if (not id(wifi_component).is_connected()) {
            ESP_LOGW("${TAG_HW_WIFI}", "Retry WiFi");
            id(wifi_component).retry_connect();
          }
          id(refresh_wifi_icon).execute();

sensor:
  ##### Wi-Fi Signal stregth
  - name: RSSI
    id: wifi_rssi
    platform: wifi_signal
    internal: false
    disabled_by_default: false
    icon: mdi:wifi
    entity_category: diagnostic

text_sensor:
  - id: device_name
    name: Device Name
    platform: template
    icon: mdi:identifier
    entity_category: diagnostic
    internal: false
    disabled_by_default: false
    lambda: |-
      return {"${name}"};
    filters:
      - lambda: |-
          #ifdef ESP_MAC_WIFI_STA
          std::string suffix = "00ERROR";  // Default suffix in case of an error
          uint8_t mac[6] = {0,0,0,0,0,0};
          if (esp_read_mac(mac, ESP_MAC_WIFI_STA) == ESP_OK) {
            suffix.clear();  // Clear the default error suffix
            for (int i = 3; i < 6; ++i) {  // Use last 3 bytes of MAC
              char hex[3];
              snprintf(hex, sizeof(hex), "%02X", mac[i]);
              suffix += hex;
            }
          }
          // Proceed with suffix (either MAC-based or default error indicator)
          const std::string raw_name = (x + "-" + suffix);
          #else
          const std::string raw_name = x;
          #endif

          std::string result;
          bool last_was_underscore = false;
          for (const char& c : raw_name) {
            if (isalnum(c)) {
              result += tolower(c);  // Add alphanumeric characters as lowercase
              last_was_underscore = false;
            } else if (!last_was_underscore) {  // Replace non-alphanumeric with '_' but avoid consecutive '_'
              result += '_';
              last_was_underscore = true;
            }
          }
          return result;

##### WIFI SETUP #####
wifi:
  id: wifi_component
  power_save_mode: LIGHT
  use_psram: true
  networks:
    - id: wifi_default
      ssid: ${wifi_ssid}
      password: ${wifi_password}
  on_connect:
    then:
      - script.execute: refresh_wifi_icon
      - script.execute:
          id: page_boot_log
          category: Wi-Fi
          log_message: !lambda return network::get_ip_addresses()[0].str().c_str();

  on_disconnect:
    then:
      - script.execute: refresh_wifi_icon
...
